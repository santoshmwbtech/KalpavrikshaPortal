<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Korzh.EasyQuery.Db</name>
    </assembly>
    <members>
        <member name="T:Korzh.EasyQuery.Db.DbQueryFormats">
            <summary>
            Represents different formats of SQL statements.
            </summary>
            <remarks>
            Different databases have different syntax for elements used in SQL statements (such as tables, field, constants, etc.).
            This class allows to consider those differences during SQL statement creation.
            For example we can indicate if boolean constants (true and false) must be quoted or not 
            or where query builder should place table join conditions (into FROM or into WHERE clause).
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.Default">
            <summary>
            Gets the default set of formats.
            </summary>
            <value>The default set of formats.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.CopyFromCore(Korzh.EasyQuery.QueryFormats)">
            <summary>
            Copies all formats from some <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.
            </summary>
            <param name="source">The source <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.SetDefaultFormats(Korzh.EasyQuery.Db.FormatType)">
            <summary>
            Sets the default formats for different types of databases.
            </summary>
            <param name="formatType">Type of the format (Access, Oracle, MS SQL, etc).</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.SaveNodes(System.Xml.XmlWriter)">
            <summary>
            Saves <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object to XML writer.
            </summary>
            <param name="writer">The writer.</param>        
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.SaveToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves DbQueryFormats to IDictionary&lt;string, object&gt; object.
            Used for serialization to JSON
            </summary>
            <param name="dict">The IDictionary&lt;string, object&gt; object to save formats to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads DbQueryFormats from the IDictionary&lt;string, object&gt; object.
            Used for deserialization from JSON
            </summary>
            <param name="dict">The IDictionary&lt;string, object&gt; object to load formats from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.LoadNode(System.String,System.String)">
            <summary>
            Loads the root node of the <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Loads a property of QueryFormats. 
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="propName">The property</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Loads a property of QueryFormats (asynchronous way). 
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="propName">The property</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.WriteContentToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the properties of QueryFormats to JSON. 
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.WriteContentToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the properties of QueryFormats to JSON (asynchronous way). 
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbQueryFormats.SubQueryLevel">
            <summary>
            Indicates the level of sub-query for the query we are generating currently.
            Default value is 0 which means we generate the main query.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.LimitClauseTemplate">
            <summary>
            Gets or sets template clause for pagination (default value depends on database).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.RecordCountTemplate">
            <summary>
            Gets or sets template clause for count records (default value depends on database).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.RowNumberAlias">
            <summary>
            Gets or sets the alias for ROW_NUMBER function 
            which is used in Legacy Paging.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.RecordCountAlias">
            <summary>
            Gets or sets the alias for Total Records column.
            This option works only if RecordCountTemplate is not empty
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.SqlQuote1">
            <summary>
            Gets or sets the left quote symbol (double-quote by default).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.SqlQuote2">
            <summary>
            Gets or sets the right quote symbol (double-quote by default).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.IdentQuote1">
            <summary>
            Gets or sets the left quote symbol for identifiers (double-quote by default).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.IdentQuote2">
            <summary>
            Gets or sets the right quote symbol for identifiers (double-quote by default).
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryFormats.QuoteIdentifier(System.String)">
            <summary>
            Returns the string passed in paraters wrapped with IdentQuote1 and IdentQuote2 symbols
            </summary>
            <param name="ident"></param>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.SqlSyntax">
            <summary>
            Gets or sets the type of SQL syntax.
            </summary>
            <value>The value of SQL syntax type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.UseSchema">
            <summary>
            Gets or sets a value indicating whether <see cref="N:Korzh.EasyQuery"/> will use schema in result SQL statememnt.
            </summary>
            <value><c>true</c> if schema will be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.UseDbName">
            <summary>
            Gets or sets a value indicating whether <see cref="N:Korzh.EasyQuery"/> will add database name into table names in result SQL statememnt.
            </summary>
            <value><c>true</c> if database name will be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.DefaultSchemaName">
            <summary>
            Gets or sets the name of the default schema.
            </summary>
            <value>The name of the default schema.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.FormatType">
            <summary>
            Gets or sets the format type.
            </summary>
            <value>The name of the format type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.LegacyPaging">
            <summary>
            Get or sets value indicating whether paging should be made using ROW_NUMBER() function.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.BracketJoins">
            <summary>
            Gets or sets a value indicating whether <see cref="N:Korzh.EasyQuery"/> must bracket joins in result SQL statement.
            </summary>
            <value><c>true</c> if joins will be bracketed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.UseAsInFrom">
            <summary>
            Gets or sets a value indicating whether we must add AS conjuction between table name and alias in the FROM clause.
            </summary>
            <value><c>true</c> if AS conjuction must be added; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.UseTableAlias">
            <summary>
            Gets or sets a value indicating whether we will use table aliases in generated queries.
            </summary>
            <value>
              <c>true</c> if table aliases will be used in result SQL; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.UseEntityContainerName">
            <summary>
            Gets or sets a value indicating whether SQL generator should use entity container name for table definitions in FROM clause
            </summary>
            <value>
              <c>true</c> if entity container name is used in result SQL; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.GroupByCalcColumns">
            <summary>
            Gets or sets a value indicating whether SQL generator should use calculated columns "as is" in GROUP BY clause
            </summary>
            <value>
              if <c>true</c> - calculated columns will be used "as is" in GROUP BY clause; <c>false</c> - they will be replaced by comma-separated list of fields.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.ParameterPrefix">
            <summary>
            Gets or sets the prefix symbol which precedes the parameter names in generated SQL statement.
            Usually it's '@' symbol but for some databases it must be set to ':'
            </summary>
            <value>
              the prefix symbol which precedes the parameter names in SQL. 
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.PrefixUnicodeConsts">
            <summary>
            Gets or sets a value indicating whether SQL generator should add 'N' prefix before string constants with Unicode characters
            </summary>
            <value>
              if <c>true</c> - 'N' prefix will be added to all string constants with non-ASCII symbols; <c>false</c> - those constants will not have any prefix.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.SupportRightJoin">
            <summary>
            Gets or sets a value indicating wether DB supports RIGHT JOINs.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.SupportHashJoin">
            <summary>
            Gets or sets a value indicating wether DB supports (LEFT | INNER | RIGHT) HASH JOINs
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryFormats.JoinsOrder">
            <summary>
            Gets or sets the type of table order in the FROM clause of generated SQL statement
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.JoinsOrder">
            <summary>
            Represents differt types of table order in the FROM clause of generated SQL statement
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.JoinsOrder.Basic">
            <summary> 
            No particular order. The tables in FROM section will be listed in the same order how they appear in the query
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.JoinsOrder.LinksDirection">
            <summary>
            The table with the most "outbounds" links will be listed first.
            After that tables are linked according to their connections with the "root" table.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.JoinsOrder.TablePriority">
            <summary>
            The table with the highest value of Priority field will be listed first.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.FormatType">
            <summary>
            Represents different database types
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.FormatType.MsAccess">
            <summary>
            The MS Access
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.FormatType.MsSqlServer">
            <summary>
            MS SQL Server
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.FormatType.Oracle">
            <summary>
            Oracle
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.FormatType.MySql">
            <summary>
            MySQL
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.FormatType.PostgreSql">
            <summary>
            Postgre SQL
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.FormatType.Sqlite">
            <summary>
            SQLite
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbUtils">
            <summary>
            Different utilties for database-oriented operations
            For internal use only
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbUtils.EdmxTypeToDataType(System.String)">
            <summary>
            Converts type form EDMX file into <see cref="T:DataType"/> enumeration.
            </summary>
            <param name="edmxType">Data type from EDMX.</param>
            <returns>DataType.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbUtils.SqlServerTypeToDataType(System.String)">
            <summary>
            Converts SQL Server data types to <see cref="T:DataType"/> enumeration.
            </summary>
            <param name="sqlType">Data type used in SQL Server.</param>
            <returns>DataType.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbUtils.ContainsAggregateFunctions(System.String)">
            <summary>
            Determines whether SQL expression passed in parameter contains aggregate functions.
            </summary>
            <param name="sqlExpr">An SQL expression.</param>
            <returns><c>true</c> if expression contains aggregate functions; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbUtils.HasSelectStatement(System.String)">
            <summary>
            Determines whether the expression passed in parameter has a select statement.
            </summary>
            <param name="sqlExpr">The SQL expression.</param>
            <returns>System.Boolean.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbUtils.DataTypeToDbType(Korzh.EasyQuery.DataType)">
            <summary>
            Converts DataType enum value to corresponding DbType 
            </summary>
            <param name="dt">DataType value</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModelLoadingUtils.ChooseField(System.Collections.Generic.List{System.String},System.String)">
            <summary>
             Find filed fot SQL Value Editor
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModelLoadingUtils.RemoveID(System.String)">
            <summary>
             Remove Id part in foreign keys
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModelLoadingUtils.PrettifyName(System.String,Korzh.EasyQuery.Db.FormatType)">
            <summary>
             Makes the orignal table name prettier 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModelLoadingUtils.ReplaceChar(System.String,System.Char,System.Int32)">
            <summary>
             Written to replace char in string 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModelLoadingUtils.MakeSingle(System.String)">
            <summary>
             Change plural to single
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.XmlExtensions">
            <summary>
            Different extension methods used in other EasyQuery classes.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.XmlExtensions.ElementLocal(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns one (the first) local element (an XElement object) for specified XElement by its name.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>XElement.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.XmlExtensions.ElementsLocal(System.Xml.Linq.XElement,System.String)">
            <summary>
            Returns all local elements for specified XElement by their name.
            </summary>
            <param name="element">The element.</param>
            <param name="name">The name.</param>
            <returns>IEnumerable&lt;XElement&gt;.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbColumn">
            <summary>
            Represents database table column
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbColumn.UsedTables">
            <summary>
            Gets the used tables.
            </summary>
            <value>The list of used tables.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbColumn.Model">
            <summary>
            Gets or sets the reference to the data model where this column is defined.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.GetGroupByExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the column's expression using in GROUP BY clause.
            </summary>
            <param name="formats">The formats.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbColumn"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.#ctor(System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Column"/> class.
            </summary>
            <param name="dispName">Name of the disp.</param>
            <param name="sorting">Sorting.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.FillTablesList">
            <summary>
            Fills the list of used tables.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbColumn.BaseAttr">
            <summary>
            Gets the entity attribute (<see cref="T:Korzh.EasyQuery.EntityAttr"/> object) this column is based on.
            </summary>
            <value>A <see cref="T:Korzh.EasyQuery.EntityAttr"/> object.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.RecreateExpression(System.Int32)">
            <summary>
            Recreates the column expression.
            </summary>
            <param name="tag">The expression's tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.GetAlias(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the column alias (for SELECT or ORDER BY clause).
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns>The column alias.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbColumn.Sorting">
            <summary>
            Gets or sets the sorting.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.GetOrderByExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the columns expression for ORDER BY clause.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns>The SQL expression for ORDER BY clause.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.GetSelectExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the columns expression for SELECT clause.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns>The SQL expression for SELECT clause.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbColumn.UseAlias(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets a value indicating whether this column used the alias name or not.
            </summary>
            <param name="formats">Formats.</param>
            <returns></returns>
            <value>
            	<see langword="true"/> if this column used the alias; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbEntityAttr">
            <summary>
            Base attribute of SQL entity
            </summary>
            <seealso cref="T:Korzh.EasyQuery.EntityAttr" />
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.#ctor(Korzh.EasyQuery.Entity,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbEntityAttr" /> class.
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="isVirtual">if set to <c>true</c> we create a virtual attribute.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.#ctor(Korzh.EasyQuery.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbEntityAttr"/> class.
            </summary>
            <param name="parentEntity">The parent entity.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityAttr.Tables">
            <summary>
            Gets the list of the tables used in this attribute. 
            </summary>
            <value>A TableList object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityAttr.Quote">
            <summary>
            Gets or sets a value indicating whether corresponding field name should be quoted in result SQL statement.
            </summary>
            <value><c>true</c> if field name must be quoted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityAttr.IsQuoted">
            <summary>
            Gets or sets a value indicating whether corresponding field name should be quoted in result SQL statement.
            </summary>
            <value><c>true</c> if field name must be quoted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityAttr.UseAlias">
            <summary>
            Gets or sets a value indicating whether it's necessary to use alias for columns based on this attribute.
            </summary>
            <value><c>true</c> (default) if it's necessary to use alias for columns based on this attribute; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityAttr.EntityPropName">
            <summary>
            Get or sets property name associated with the attribute (for models loaded from .edmx files)
            </summary>
            <returns><c>true</c> if this instance contains parameters (for example defined in expressions of tables associated with this attribute); otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityAttr.UseCustomFuncInOrderBy">
            <summary>
            Gets or sets value indicating wether custom func shoulb be used in order by expression
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.HasParams">
            <summary>
            Determines whether this attribute has query parameters.
            </summary>
            <returns><c>true</c> if this instance contains parameters (for example defined in expressions of tables associated with this attribute); otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.OnModelAssignment">
            <summary>
            Called when attribute is inserted into model.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.ProcessVirtualExpr">
            <summary>
            Scans attribute's expression for new parameters, tables, etc
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.GetDataAttrFullExpr">
            <summary>
            Gets a string that represents full expression of EntityAttr instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression which represents the attribute. Calls <see cref="M:Korzh.EasyQuery.Db.DbEntityAttr.GetSqlExprWithoutCustomFunc(Korzh.EasyQuery.Db.DbQueryFormats)"></see>
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns>SQL expression which represents the attribute. 
            For <see cref="F:Korzh.EasyQuery.EntAttrKind.Data"/> attributes it will look like "TableAliasName.FieldName"
            for <see cref="F:Korzh.EasyQuery.EntAttrKind.Virtual"/> attributes it will be the same as the value of the <see cref="P:Korzh.EasyQuery.EntityAttr.Expr"/> property.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.GetSqlExprWithoutCustomFunc(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression which represents the attribute ignoring <see cref="P:Korzh.EasyQuery.EntityAttr.CustomFunc"></see> property
            </summary>
            <param name="formats"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.GetSqlName(Korzh.EasyQuery.Db.DbQueryFormats,System.Boolean)">
            <summary>
            Gets the full SQL name which represents the attribute.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats" /> object.</param>
            <param name="includeTableName">if set to <c>true</c> then we need to include table name into result expression.</param>
            <returns>Full name which represents the attribute.
            For <see cref="F:Korzh.EasyQuery.EntAttrKind.Data" /> attributes it will look like "[DbName.SchemaName.]TableName.FieldName"
            for <see cref="F:Korzh.EasyQuery.EntAttrKind.Virtual" /> attributes it will be the same as the value of <see cref="P:Korzh.EasyQuery.EntityAttr.Expr" /> property.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.CompareWithExpr(System.String)">
            <summary>
            Compares attribute's expression with the one passed in the parameter.
            </summary>
            <param name="expr">The expression definition to compare with</param>
            <returns><c>true</c> if our attribute's expression is equal to the one passed in the parameter, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.CopyFrom(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Copies all attribute's properties from another entity attribute
            </summary>
            <param name="attr">An EntityAttr object to copy from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.AddParamsTo(Korzh.EasyQuery.QueryParamList)">
            <summary>
            Adds the parameters associated with some entity attribute into the list of query parameters (see <see cref="T:Korzh.EasyQuery.QueryParamList" />.
            </summary>
            <param name="prms">The list of parameters.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves the attributes to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.LoadAttribute(System.String,System.String)">
            <summary>
            Loads the attribute.
            </summary>
            <param name="propname">The propname.</param>
            <param name="propvalue">The propvalue.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.LoadNodes(System.Xml.XmlReader)">
            <summary>
            Loads the sub-nodes of entity attribute's node.
            </summary>
            <param name="reader">An instance of XmlReader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.SaveToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves attribute properties to Dictionary object (used for serialization to JSON).
            </summary>
            <param name="dict">A dictionary object which will be serialized to JSON afterwards.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes attribute's properties to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Some read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes attribute's properties to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Some read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.ReadPropertyFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one attribute's property from JSON.
            </summary>
            <param name="reader">A JsonReader.</param>
            <param name="propName">The name of the property.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityAttr.ReadPropertyFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one attribute's property from JSON (asynchronous way).
            </summary>
            <param name="reader">A JsonReader.</param>
            <param name="propName">The name of the property.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbEntityLink">
            <summary>
            Represents link between two entities 
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbEntityLink.Condition">
            <summary>
            Represents linking condition
            </summary>
            <remarks> Usually linking condition looks like {table1 field} = {table2 field} 
            but it also can has the following format {table1 field} = {constant}.
            Condition operator also can differ, e.g. {table1 field} > {table2 field} 
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.Condition.StrToLinkCondType(System.String)">
            <summary>
            Allows to get <see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> by its text representation
            </summary>
            <param name="s">Text representation of condition type</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> enumeration value</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.Info">
            <summary>
            Stores additional information associated with this condition
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.Condition.LinkCondTypeToStr(Korzh.EasyQuery.Db.LinkCondType)">
            <summary>
            Convert <see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> value to its text representation
            </summary>
            <param name="type">LinkCo<see cref="T:Korzh.EasyQuery.Db.LinkCondType"/>ndType value.</param>
            <returns>Text</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.Expr1">
            <summary>
            Gets or sets the left side of linking condition.
            </summary>
            <value>Full field name (e.g. CUSTOMER.CompanyName) or constant</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.Expr2">
            <summary>
            Gets or sets the right side of linking condition.
            </summary>
            <value>Full field name (e.g. CUSTOMER.CompanyName) or constant</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.Operator">
            <summary>
            Gets or sets the condition operator.
            </summary>
            <value>Operator symbol (e.g. =, !=, etc.) </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.CondType">
            <summary>
            Gets or sets the type of condition (field to field or field to expression).
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> value</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.Entity1">
            <summary>
            Gets the first (left) table taken part in link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Condition.Entity2">
            <summary>
            Gets the second (right) table taken part in link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.Condition.#ctor(Korzh.EasyQuery.Db.DbEntityLink)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbEntityLink.Condition"/> class.
            </summary>
            <param name="aLink">A <see cref="T:Korzh.EasyQuery.Db.TableLink"/> object which the condition is created for.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.Condition.GetEntitySqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression that represents the condition.
            </summary>
            <param name="formats">Formats.</param>
            <returns>Correctly formatted text of SQL expression which represents the condition. 
            E.g.: CUSTOMER.CustNo = ORDERS.CustNo </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.Condition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.StrToLinkType(System.String)">
            <summary>
            Converts text to <see cref="T:TableLink.LinkType" /> value.
            </summary>
            <param name="s">The string to convert into LinkType</param>
            <returns>TableLink.LinkType.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbEntityLink.ConditionList">
            <summary>
            Represents list of linking conditions
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Entity1">
            <summary>
            Gets or sets the first entity of the link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Entity2">
            <summary>
            Gets or sets the second entity of the link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.Conditions">
            <summary>
            Gets list of linking conditions.
            </summary>
            <value>ConditionList object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.LnkType">
            <summary>
            Gets or sets the type of the link (inner, left, right or full).
            </summary>
            <value><see cref="T:TableLinkType"/> enumeration value</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableLink"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.AddCondition(Korzh.EasyQuery.Db.LinkCondType,System.String,System.String,System.String)">
            <summary>
            Adds the link condition by two expressions and operation.
            </summary>
            <param name="condType">Type of the condition.</param>
            <param name="expr1">The first expression.</param>
            <param name="expr2">The second expression.</param>
            <param name="operation">The operation (=, !=, etc) .</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression of the link
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns>Text of correctly formatted SQL expression that represents the link</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbEntityLink.ConditionExpr">
            <summary>
            Gets or sets the expression of link condition.
            This expression will be used if <see cref="P:Korzh.EasyQuery.Db.DbEntityLink.Conditions"/> list is empty.
            </summary>
            <value>
            An SQL expression of link condition.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbEntityLink.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbExprTag">
            <summary>
            Contains several constants for db-related expressions tags values
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbExprTag.CustomSql">
            <summary>Constant expression</summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbExprTag.TagToOldClassName(System.Int32)">
            <summary>
            Converts the expression's tag value to the name of old expression class (like "CONST" or "ENTATTR").
            </summary>
            <param name="tag">The tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbExprTag.OldClassNameToTag(System.String)">
            <summary>
            Converts old class name to tag.
            </summary>
            <param name="className">Name of the class (a string like ENTATTR).</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.CustomSqlExpr">
            <summary>
            Represents a custom SQL expression
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:CompoundExpr"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.CustomSqlExpr.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.TagToOldClassName(System.Int32)">
            <summary>
            Converts the expression's tag value to the name of old expression class (like "CONST" or "ENTATTR").
            </summary>
            <param name="tag">The tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.CustomSqlExpr.Value">
            <summary>
            Gets or sets the value of expression.
            </summary>
            <value>The expression value.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.CustomSqlExpr.Attribute">
            <summary>
            Gets or sets the base attribute for this custom SQL expression.
            </summary>
            <value>The base attribute.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.CustomSqlExpr.IsAggregate">
            <summary>
            Gets a value indicating whether this expression is aggregate.
            </summary>
            <value><c>true</c> if this instance is aggregate; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.SetContentSilent(System.String,System.String)">
            <summary>
            Sets the content of the expression silently (without calling ContentChanged event).
            </summary>
            <param name="val">New value.</param>
            <param name="txt">New text.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.GetUsedTables(Korzh.EasyQuery.Db.TableList)">
            <summary>
            Returns list of tables used in condition.
            </summary>
            <param name="usedTables">The used tables.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads expression from XML.
            </summary>
            <param name="reader">XmlReader object positioned on the expression node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves expression to XML writer.
            </summary>
            <param name="writer">An XmlWriter object.</param>
            <param name="tagName">Name of the XML tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads expression from IDictionary object (used when we load query from JSON).
            </summary>
            <param name="dict">IDictionary object which contains all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.SaveToJsonDictCore(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            This is an abstract method which should be overridden in descendant classes.
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes expression properties to JSON
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes expression properties to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one expression property from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CustomSqlExpr.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one expression property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbGateException">
            <summary>
            Represents exception class for <see cref="T:Korzh.EasyQuery.Db.DbGate"/>
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbGateException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbInfo">
            <summary>
            Represents a structure that contains information about some database
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbInfo.Name">
            <summary>
            Gets or sets the name of database.
            </summary>
            <value>The database's name.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbInfo"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbInfoList">
            <summary>
            Represents the list of <see cref="T:Korzh.EasyQuery.Db.DbInfo"/> objects
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbTableInfo">
            <summary>
            Represents a structure that contains information about some database table
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTableInfo.Name">
            <summary>
            Gets or sets the name of table.
            </summary>
            <value>The table's name. </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTableInfo.SchemaName">
            <summary>
            Gets or sets the name of the dabase schema which table belongs to.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTableInfo.DBName">
            <summary>
            Gets or sets the name of the database which this table belongs to.
            </summary>
            <value>The name of the database. </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTableInfo.IsView">
            <summary>
            Gets or sets if the current table is a View.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTableInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DbTableInfo"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTableInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbTableInfo"/> class.
            </summary>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTableInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbTableInfo"/> class.
            </summary>
            <param name="dbName">Database name.</param>
            <param name="schemaName">Schema name.</param>
            <param name="tableName">Name of the table.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTableInfo.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:DbTableInfo"/> class.
            </summary>
            <param name="dbName">Database name.</param>
            <param name="schemaName">Schema name.</param>
            <param name="tableName">Name of the table.</param>
            <param name="isView">If the current table is a View.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTableInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbTableInfoList">
            <summary>
            Represents the list of <see cref="T:Korzh.EasyQuery.Db.DbTableInfo"/> objects
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbLinkInfo">
            <summary>
            Represents a structure that contains information about some link between two database tables
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbLinkInfo.Table1Name">
            <summary>
            Gets or sets the name of the table 1.
            </summary>
            <value>The name of the table 1.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbLinkInfo.Table2Name">
            <summary>
            Gets or sets the name of the table 2.
            </summary>
            <value>The name of the table 2.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbLinkInfo.Field1Name">
            <summary>
            Gets or sets the name of the field from the table 1.
            </summary>
            <value>The name of the field from the table 1.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbLinkInfo.Field2Name">
            <summary>
            Gets or sets the name of the field from the table 2.
            </summary>
            <value>The name of the field from the table 2.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbLinkInfo.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DbLinkInfo"/> class.
            </summary>
            <param name="table1">The name of table 1.</param>
            <param name="table2">The name of table 2.</param>
            <param name="field1">The name of field from table 1.</param>
            <param name="field2">The name of field from table 2.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbLinkInfoList">
            <summary>
            Represents the list of <see cref="T:Korzh.EasyQuery.Db.DbLinkInfo"/> objects
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbLinkInfoList.FindByTableNames(System.String,System.String)">
            <summary>
            Finds the link by table names.
            </summary>
            <param name="table1">The name of first table.</param>
            <param name="table2">The name of second table.</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbFieldInfo">
            <summary>
            Represents a structure that contains information about some table field
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbFieldInfo.Name">
            <summary>
            Gets or sets the name of table.
            </summary>
            <value>The field's name. </value>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbFieldInfo.IsKey">
            <summary>
            If the field is the key;
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbFieldInfo.IsNullable">
            <summary>
            Indicates whether the field is nullable;
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbFieldInfo.Size">
            <summary>
            Gets or sets the size of field .
            </summary>
            <value>The field's size.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbFieldInfo.FieldType">
            <summary>
            Gets or sets the type of the field.
            </summary>
            <value>The type of the field.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbFieldInfo.Position">
            <summary>
            Gets or sets the original position of the field in table.
            </summary>
            <value>
            The original position of the field in table.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbFieldInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbFieldInfoList">
            <summary>
            Represents the list of <see cref="T:Korzh.EasyQuery.Db.DbTableInfo"/> objects
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbFieldInfoList.SortedByPosition">
            <summary>
            Gets or sets a value indicating whether the list of fields should be sorted by position or alphabetically (default value).
            </summary>
            <value><c>true</c> if the list must be sorted by position; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbFieldInfoList.InsertItem(System.Int32,Korzh.EasyQuery.Db.DbFieldInfo)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbGate">
            <summary>
            Represents base class which allows to get DB structure information availble for some connection
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetFormatType">
            <summary>
            Returns the format type for this DB gate
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbGate"/> class.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbGate.DbGateTypes">
            <summary>
            The list of all registered DbGate types (descendants of DbGate)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.Register(System.Type)">
            <summary>
            Registers the specified gate type.
            </summary>
            <param name="gateType">A concrete type of some DbGate descendant.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetName">
            <summary>
            Gets the name of <see cref="T:Korzh.EasyQuery.Db.DbGate"/>. Must be overrided in inherited classes
            </summary>
            <returns>The name of <see cref="T:Korzh.EasyQuery.Db.DbGate"/></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetGateId">
            <summary>
            Gets the id of <see cref="T:Korzh.EasyQuery.Db.DbGate"/>. Must be overrided in inherited classes
            </summary>
            <returns>The id of <see cref="T:Korzh.EasyQuery.Db.DbGate"/></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetSqlDialect">
            <summary>
            Gets the name of default SQL dialect. Can be overrided in inherited classes
            </summary>
            <returns>The name of default SQL dialect. Empty string if SQL dialect can't be defined</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetDatabases">
            <summary>
            Gets the list of available databases.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetTables(System.String,System.String)">
            <summary>
            Gets the list of available tables.
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.DbTableInfoList"/> object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetLinks(System.String,System.String)">
            <summary>
            Gets the list of available tables.
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.DbTableInfoList"/> object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetFields(System.String,System.String,System.String)">
            <summary>
            Gets the fields by table.
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <param name="tableName">Name of the table.</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.DbTableInfoList"/> object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetFieldsEx(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets the fields by table.
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <param name="tableName">Name of the table.</param>
            <param name="sortByOriginalPosition">if set to <c>true</c> the result field list will be sorted by their original positions.</param>
            <returns>
              <see cref="T:Korzh.EasyQuery.Db.DbTableInfoList" /> object
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetFieldsBySQL(System.String)">
            <summary>
            Gets the fields of result set of some SQL statement execution.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.ProgressIndicator">
            <summary>
            Gets or sets the progress indicator object.
            </summary>
            <value>The progress indicator.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.SetProgressMinMax(System.Int32,System.Int32)">
            <summary>
            Sets the minimum and maximum of progress indicator.
            </summary>
            <param name="min">The minimum value of progress indicator.</param>
            <param name="max">The maximum value of progress indicator.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.SetProgress(System.Int32)">
            <summary>
            Set the progress to the specified position.
            </summary>
            <param name="pos">The position of progress.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.Connected">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DbGate"/> is connected.
            When this property is assigned to <c>true</c> then the object tries to connect to database.
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbGate.finalConnectionString">
            <summary>
            When overriden in derived class, return the connection
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.SetLogger(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Set a logger 
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.LogInfo(System.String,System.Object[])">
            <summary>
            Formats and writes an informational log message.
            </summary>
            <param name="message">Format string of the log message in message template format.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.LogDebug(System.String,System.Object[])">
            <summary>
            Formats and writes a debug log message.
            </summary>
            <param name="message">Format string of the log message in message template format.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.LogError(System.String,System.Object[])">
            <summary>
            Formats and writes an error log message.
            </summary>
            <param name="message">Format string of the log message in message template format.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.Connection">
            <summary>
            Gets the connection.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbGate.ConnectionType">
            <summary>
            Gets the type of the connection.
            </summary>
            <value>The type of the connection.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetConnection">
            <summary>
            When overriden in derived class, returns the connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreCheckConnection">
            <summary>
            When overriden in derived class, performs the actual connection checking
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CheckConnection">
            <summary>
            Checks the connection. Calls CoreCheckConnection() method.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.ConnectionStringBuilderDlg">
            <summary>
            Gets or sets the connection string builder dialog.
            </summary>
            <value>The connection string builder dialog.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.AssembleConnectionString">
            <summary>
            Builds the final connection string based on the string defined in <see cref="P:Korzh.EasyQuery.Db.DbGate.ConnectionString"/> property, 
            current environment variables and the parameters defined in UserID and Password properties.
            </summary>
            <returns>The final connection string used to connect to database</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.UserID">
            <summary>
            Gets or sets the "User ID" parameter of database connection.
            </summary>
            <value>The "User ID" parameter.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.Password">
            <summary>
            Gets or sets the "Password" parameter of database connection.
            </summary>
            <value>The "Password" parameter.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.LoginPrompt">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object should ask user for login and password when connect to database.
            </summary>
            <value><c>true</c> if DbGate should ask for login and password; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.OnLoginRequest">
            <summary>
            Raises the <see cref="E:LoginRequest"/> event and filled UserID and Password by values returned in event arguments
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.Db.DbGate.LoginRequest">
            <summary>
            Occurs when the <see cref="T:Korzh.EasyQuery.Db.DbGate"/> objects needs to get <see cref="P:Korzh.EasyQuery.Db.DbGate.UserID"/> and <see cref="P:Korzh.EasyQuery.Db.DbGate.Password"/> to connect to some database.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetUidName">
            <summary>
            Gets the name of User ID attribute in connection string
            </summary>
            <returns>The name of "User ID" attribute </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetPwdName">
            <summary>
            Gets the name of "password" attribute in connection string.
            </summary>
            <returns>The name of password attribute</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.Version">
            <summary>
            Gets the version of the current <see cref="T:Korzh.EasyQuery.Db.DbGate"/> implementation
            </summary>
            <value>The version of <see cref="T:Korzh.EasyQuery.Db.DbGate"/> implementation.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetVersion">
            <summary>
            Core implemenation of <see cref="P:Korzh.EasyQuery.Db.DbGate.Version"/> property. Must be overrided in descendants.
            </summary>
            <returns>The version (as string) of this <see cref="T:Korzh.EasyQuery.Db.DbGate"/> implementation</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGate.UseViews">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Korzh.EasyQuery.Db.DbGate"/> will add views in the list of tables returned by <see cref="M:Korzh.EasyQuery.Db.DbGate.GetTables(System.String,System.String)"/> method.
            </summary>
            <value><c>true</c> if <see cref="T:Korzh.EasyQuery.Db.DbGate"/> will add views are returned by <see cref="M:Korzh.EasyQuery.Db.DbGate.GetTables(System.String,System.String)"/> method; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreGetDatabases(Korzh.EasyQuery.Db.DbInfoList)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.GetDatabases"/> method. 
            </summary>
            <param name="databases">The reference to <see cref="T:Korzh.EasyQuery.Db.DbInfoList"/> object which must be filled by <see cref="T:Korzh.EasyQuery.Db.DbInfo"/> objects</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreGetTables(System.String,System.String,Korzh.EasyQuery.Db.DbTableInfoList)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.GetTables(System.String,System.String)"/> method.
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <param name="tables">The reference to <see cref="T:Korzh.EasyQuery.Db.DbTableInfoList"/> object which must be filled by <see cref="T:Korzh.EasyQuery.Db.DbTableInfo"/> objects</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreGetLinks(System.String,System.String,Korzh.EasyQuery.Db.DbLinkInfoList)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.GetLinks(System.String,System.String)"/> method. 
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <param name="links">The reference to <see cref="T:Korzh.EasyQuery.Db.DbLinkInfoList"/> object which must be filled by <see cref="T:Korzh.EasyQuery.Db.DbLinkInfo"/> objects</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreGetFields(System.String,System.String,System.String,Korzh.EasyQuery.Db.DbFieldInfoList)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.GetFields(System.String,System.String,System.String)"/> method. 
            </summary>
            <param name="dbName">Name of the database. Can be empty string if associated connection can work only with one database</param>
            <param name="schemaName">Name of the database schema. Can be empty string.</param>
            <param name="tableName">Name of the table.</param>
            <param name="fields">The reference to <see cref="T:Korzh.EasyQuery.Db.DbFieldInfoList"/> object which must be filled by <see cref="T:Korzh.EasyQuery.Db.DbFieldInfo"/> objects. </param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreGetFieldsBySQL(System.String,Korzh.EasyQuery.Db.DbFieldInfoList)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.GetFieldsBySQL(System.String)"/> method. 
            </summary>
            <param name="sql">SQL statement.</param>
            <param name="fields">The reference to <see cref="T:Korzh.EasyQuery.Db.DbFieldInfoList"/> object which must be filled by <see cref="T:Korzh.EasyQuery.Db.DbFieldInfo"/> objects. </param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetConnected">
            <summary>
            Core implemenation of "get" method of <see cref="P:Korzh.EasyQuery.Db.DbGate.Connected"/> property.
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.SetConnected(System.Boolean)">
            <summary>
            Core implemenation of "set" method of <see cref="P:Korzh.EasyQuery.Db.DbGate.Connected"/> property.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.LoadParams(Korzh.EasyQuery.Db.DbParameters)">
            <summary>
            Loads the connection parameters.
            </summary>
            <param name="dbParams">The parameters of some connection.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.SaveParams(Korzh.EasyQuery.Db.DbParameters)">
            <summary>
            Saves the connection parameters.
            </summary>
            <param name="dbParams">The parameters of some connection.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreLoadParams(Korzh.EasyQuery.Db.DbParameters)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.LoadParams(Korzh.EasyQuery.Db.DbParameters)"/> method.
            </summary>
            <param name="dbParams">The DbParameters object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.CoreSaveParams(Korzh.EasyQuery.Db.DbParameters)">
            <summary>
            Core implementation of <see cref="M:Korzh.EasyQuery.Db.DbGate.SaveParams(Korzh.EasyQuery.Db.DbParameters)"/> method.
            </summary>
            <param name="dbParams">The DbParameters object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.GetDataAdapter(System.String)">
            <summary>
            Gets the data adapter.
            </summary>
            <param name="sqlText">The SQL text.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGate.DbTypeByDataType(Korzh.EasyQuery.DataType)">
            <summary>
            Gets SqlDbType object which coressponds to DataType object specified in  parameter
            </summary>
            <param name="dt">The dt.</param>
            <returns>SqlDbType.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbGateList">
            <summary>
            Represents the list of <see cref="T:DbGate"/> objects
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbGateList.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:Korzh.EasyQuery.Db.DbGate"/> with the specified name.
            </summary>
            <value>
            The <see cref="T:Korzh.EasyQuery.Db.DbGate"/>.
            </value>
            <param name="dbGateName">Name of the DB gate.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGateList.Find(System.String,System.String)">
            <summary>
            Finds the specified <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object by its class name and version number
            </summary>
            <param name="className">Name of the <see cref="T:Korzh.EasyQuery.Db.DbGate"/> class.</param>
            <param name="version">The version of necessary <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object.  <br />
            Can be empty string. In such case the first found object with specified class name will be returned.
            </param>
            <returns>Found <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object or null if there is not such object in the list</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbGateList.FindByName(System.String,System.String)">
            <summary>
            Finds the specified <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object by its name and version number
            </summary>
            <param name="name">The name of the <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object.</param>
            <param name="version">The version of necessary <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object.  <br />
            Can be empty string. In such case the first found object with specified class name will be returned.
            </param>
            <returns>Found <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object or null if there is not such object in the list</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.IConnectionStringBuilderDlg">
            <summary>
            Defines  methods for ConnectionString Builder dialog
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.IConnectionStringBuilderDlg.RunDialog(Korzh.EasyQuery.Db.DbGate,System.Boolean)">
            <summary>
            Shows the dialog.
            </summary>
            <param name="dbGate">The <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object.</param>
            <param name="changeSourceControls">if set to <c>true</c> we show the controls which allows to change the data source.</param>
            <returns>
            true if connection string is built; otherwise - false
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.IConnectionStringBuilderDlg.ConnectionString">
            <summary>
            Gets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.IConnectionStringBuilderDlg.DBGateName">
            <summary>
            Gets the name of <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object.
            </summary>
            <value>name of <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Db.LoginRequestEventArgs">
            <summary>
            Provides data for <see cref="E:Korzh.EasyQuery.Db.DbGate.LoginRequest"/> event
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.LoginRequestEventArgs.UserID">
            <summary>
            Gets or sets the "User ID" parameter.
            </summary>
            <value>The "User ID" parameter.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.LoginRequestEventArgs.Password">
            <summary>
            Gets or sets the "Password" parameter.
            </summary>
            <value>The "Password" parameter.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.LoginRequestEventArgs.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:LoginRequestEventArgs"/> class.
            </summary>
            <param name="userID">The "User ID" parameter.</param>
            <param name="password">The "Password" parameter.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.LoginRequestEventHandler">
            <summary>
            Represents delegate for DbGate.RequestLogin event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbModel">
            <summary>
            Database-related implementation of <see cref="T:Korzh.EasyQuery.DataModel"/> class. 
            In addition to the basic data it contains also list of database tables and the links between them.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbModel"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.IsEmpty">
            <summary>
            Gets a value indicating wether model is empty;
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.Tables">
            <summary>
            Gets list of data model tables.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.TableCategories">
            <summary>
            Gets the list of table categories.
            </summary>
            <value>
            The table categories.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SetTableCategory(Korzh.EasyQuery.Db.Table,System.String)">
            <summary>
            Sets the category of the table. Creates a new category if the specified one does not exist yet.
            </summary>
            <param name="table">The table.</param>
            <param name="categoryName">Name of the category.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.ExtractTablesByExpr(System.String,Korzh.EasyQuery.Db.TableList)">
            <summary>
            Extracts all tables used in some SQL expression (like Table1.FieldName1 + Table2.FieldName2) and add them into tableList.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.OnModelLoaded">
            <summary>
            Called after the model has been loaded from some file or string.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.DbParams">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.DbParameters"/> object that represents different options of database linked with current data model.
            </summary>
            <value>The <see cref="T:Korzh.EasyQuery.Db.DbParameters"/> object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.StoreDbParams">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Korzh.EasyQuery.Db.DbModel.DbParams"/> will be store in data model definition file.
            </summary>
            <value>
            <c>true</c> if <see cref="P:Korzh.EasyQuery.Db.DbModel.DbParams"/> will be store in data model definition file; 
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.Links">
            <summary>
            List of links between the model tables.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.EntityLinks">
            <summary>
            Gets the entity links.
            </summary>
            <value>The entity links.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.OnModelChanged">
            <summary>
            Called after the model has been changed.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.FillByDataTable(System.Data.DataTable,System.Boolean)">
            <summary>
            Fills the <see cref="T:Korzh.EasyQuery.Db.DbModel"/> by database table represented by <see cref="T:System.Data.DataTable"/> object.
            </summary>
            <param name="dataTable">The <see cref="T:System.Data.DataTable"/> object.</param>
            <param name="createEntity">if set to <c>true</c> then all attributes will be added into some new entity. 
            Otherwise - they will be added into root entity.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.AssignEntityAttrID(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Assigns the default ID for entity attribute.
            </summary>
            <param name="attr">The EntityAttr object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CalcPath(Korzh.EasyQuery.Db.Table,Korzh.EasyQuery.Db.Table)">
            <summary>
            CalcPath method finds a path between tables and return it to caller or
            returns null if there is no any path between specified tables.
            </summary>
            <param name="table1">Represents start point of the path</param>
            <param name="table2">Represents end point of the path</param>
            <returns>A <see cref="T:Korzh.EasyQuery.Db.Path"/> object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CheckPath(Korzh.EasyQuery.Db.Path,Korzh.EasyQuery.Db.Table,Korzh.EasyQuery.Db.PathList,Korzh.EasyQuery.Db.TableList)">
            <summary>
            CheckPath is an internal procedure which moves to one step in paths searching.
            </summary>
            <param name="path">The current path.</param>
            <param name="destTable">The destination table.</param>
            <param name="nextStep">The next step: list of paths created on this step.</param>
            <param name="passedTables">The tables which have been passed already.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CalcEntityPath(Korzh.EasyQuery.Entity,Korzh.EasyQuery.Entity)">
            <summary>
            Finds a path between two entities and return it to caller as list of Enityt objects.
            Returns null if there is no any path between specified entities.
            </summary>
            <param name="entity1">First entity.</param>
            <param name="entity2">Second entity.</param>
            <returns>A <see cref="T:Korzh.EasyQuery.Db.Path" /> object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.FindLinkByEntities(Korzh.EasyQuery.Entity,Korzh.EasyQuery.Entity)">
            <summary>
            Finds the link by 2 entities.
            </summary>
            <param name="entity1">First entity.</param>
            <param name="entity2">Second entity.</param>
            <returns>EntityLink.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.InitModelLoading">
            <summary>
            Inits the model loading.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.LoadNode(System.Xml.XmlReader,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads the root node of the model. Can be overriden for loading additional root nodes in <see cref="T:Korzh.EasyQuery.DataModel"/>'s descendants
            </summary>
            <param name="reader">The reader.</param>
            <param name="rwOptions">The rw options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.LoadOneModelAtrributeFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads one data model's attribute from the main XML node (DataModel)
            </summary>
            <param name="reader">An XmlReader object</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CreateTableAlias(Korzh.EasyQuery.Db.DbTable,System.String,System.Boolean,System.String,System.Func{Korzh.EasyQuery.Db.TableLink,System.Boolean},System.Func{Korzh.EasyQuery.Db.DbEntityAttr,System.Boolean})">
            <summary>
            Creates table alias from the table.
            </summary>
            <param name="fromTable"></param>
            <param name="aliasName"></param>
            <param name="createEntity"></param>
            <param name="entityName"></param>
            <param name="linkFilter"></param>
            <param name="entityAttrFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.LoadFromDbml(System.String)">
            <summary>
            Loads the model from DBML file (Entity Framework model format).
            </summary>
            <param name="dbmlFile">The path to .dbml file.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CreateOperator">
            <summary>
            Creates the operator. Used for creating objects while building the model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CreateEntityAttr(Korzh.EasyQuery.Entity,System.Boolean)">
            <summary>
            Creates an entity attribute. Used for creating entity attributes while building the model
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="isVirtual">if set to <c>true</c> the new attribute will be virtual (calculated).</param>
            <returns>EntityAttr.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CreateNullOperator">
            <summary>
            Creates the 'null' operator - a special operator which is used when a real operator can't be found (e.g. wrong ID)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CreateOperator(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an instance of <see cref="T:Korzh.EasyQuery.Operator"/>.
            </summary>
            <param name="id">The ID.</param>
            <param name="caption">The caption (the string shown to use in the drop-down menu.</param>
            <param name="expr">The expression - what will be used in the generated query statement (in SQL or other query language).</param>
            <param name="format">The format. It defines the way this operator will be represented in query panel.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.CreateQuery(Korzh.EasyQuery.Query)">
            <summary>
            Creates a Query object associated with this model
            </summary>
            <param name="parentQuery">The parent query.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.FillByDbGate(Korzh.EasyQuery.Db.DbGate,Korzh.EasyQuery.Db.DbConnectionLoaderOptions)">
            <summary>
            Fills the model by database gate.
            </summary>
            <param name="dbGate">A <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object which will help to fill the model by DB meta info.</param>
            <param name="options">Different options. You can set some filters on talbes and fields here.</param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SplitTablesIntoAliases">
            <summary>
            Splits tables into aliases
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.IsM2MTable(Korzh.EasyQuery.Db.DbFieldInfoList)">
            <summary>
             Check if current table has all key fields
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.FindReferencedTable(System.String,System.String,Korzh.EasyQuery.Db.DbLinkInfoList)">
            <summary>
             Check if there is current table in links
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.LoadFromConnection(System.Data.Common.DbConnection,Korzh.EasyQuery.Db.DbConnectionLoaderOptions)">
            <summary>
            Populates model by information from database connection.
            </summary>
            <param name="connection">The DbConnection object.</param>
            <param name="options">Different options.</param>>
            <exception cref="T:Korzh.EasyQuery.DataModel.Error">If this method can't find an DbGate class for specified connection.</exception>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.PrimaryTableName">
            <summary>
            The name of the primary which will be used as a "root" table for this query (regardless it's used already in any column/condition or not)
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.EntityContainerName">
            <summary>
            Gets the name of the default entity container. This value is used for the models created from EDMX files (Entity Framework models)
            </summary>
            <value>
            The name of the default entity container.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbModel.IsLoadedFromDbContext">
            <summary>
            Gets or sets a value indicating whether this instance is loaded from a DbContext object.
            </summary>
            <value>
            <c>true</c> if this instance is loaded from DbContext; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.AddEntityAttr(Korzh.EasyQuery.Entity,System.String,System.String,System.Boolean,Korzh.EasyQuery.DataType,System.Int32,Korzh.EasyQuery.Db.Table[])">
            <summary>
            Adds a new attribute to the model.
            </summary>
            <param name="entity">The parent entity.</param>
            <param name="expression">The attribute's expression.</param>
            <param name="caption">The attribute's caption.</param>
            <param name="isVirtual">The kind of the new attribute: Data (false) or Virtual (true).</param>
            <param name="dataType">The type of the data.</param>
            <param name="size">The size (if necessary).</param>
            <param name="tables">The tables for this new attribute.</param>
            <returns>EntityAttr.</returns>
            <exception cref="T:System.ArgumentNullException">
            Expression can't be null
            or
            No tables defined for the new attribute: " + expression
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.GetDefaultUICAttribute">
            <summary>
            Returns the first attribute in the Root entity with UseInConditions set to true.
            This attribute is shown by default for new condition.
            </summary>
            <returns>
            An Attribute object.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.ExcludeFieldsFromExpr(System.String)">
            <summary>
            Excludes field references from some SQL expression.
            </summary>
            <param name="expr">The expression.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.AutoLinking(Korzh.EasyQuery.Db.DbGate)">
            <summary>
            This procedure finds the links between tables listed in the model (based on field names and types) and then add found links into the <see cref="P:Korzh.EasyQuery.Db.DbModel.Links"/> list.
            </summary>
            <param name="dbGate">The "database gate" object of appropriate type (one of <see cref="T:Korzh.EasyQuery.Db.DbGate"/> descendants).</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.PostProcessQueryExpr(Korzh.EasyQuery.QueryExpr)">
            <summary>
            Post process QueryExpr during the loading (to support the old format of XML query files)
            </summary>
            <param name="queryExpr">The QueryExpr to process</param>
            <returns>EqExpression.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SaveNodes(System.Xml.XmlWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the root nodes of the model. Can be overriden for storing additional nodes
            </summary>
            <param name="writer">The writer.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SaveAttributes(System.Xml.XmlWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the attributes of the model. Can be overriden for storing additional attributes
            </summary>
            <param name="writer">The writer.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SaveDbParamsXmlNode(System.Xml.XmlWriter)">
            <summary>
            Saves the <see cref="P:Korzh.EasyQuery.Db.DbModel.DbParams"/> node.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SaveTablesNode(System.Xml.XmlWriter)">
            <summary>
            Saves tables using <see cref="T:System.Xml.XmlWriter"/> object.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.SaveLinksNode(System.Xml.XmlWriter)">
            <summary>
            Saves links using <see cref="T:System.Xml.XmlWriter"/> object.
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.WriteContentToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of DbMomdel to JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">Some read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.WriteContentToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of DbMomdel to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">Some read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.ReadOneModelPropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one model property from JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="propName">The name of the property to read.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbModel.ReadOneModelPropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one model property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader.</param>
            <param name="propName">The name of the property to read.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbConnectionLoaderOptions">
            <summary>
            Represents different options for <see cref="T:Korzh.EasyQuery.Services.DbConnectionModelLoader" /> class
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.TableFilters">
            <summary>
            Gets the table filters. Each filter is a function which returns <c>true</c> for the tables that should be processed.
            </summary>
            <value>The table filters.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.FieldFilters">
            <summary>
            Gets the field filters. Each filter is a function which returns <c>true</c> for the field that should be processed.
            </summary>
            <value>The field filters.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.ReplaceToSingularNames">
            <summary>
            Gets a value indicating whether replace the name of the table in plural form (like Customers) 
            to it singular variant (Customer) when we create an entity by some table.
            </summary>
            <value><c>true</c> if the entity name will have a singular form of the corresponding table name; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.SplitTablesOnMultiReference">
            <summary>
            Split one table on two (or more) if there are multi-references between two tables
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.PrettifyNames">
            <summary>
            Prettify table and column names
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.DoNotReplaceToSingularNames">
            <summary>
            Sets the value <see cref="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.ReplaceToSingularNames"/> property to false.
            This function returns the same instance of <see cref="T:Korzh.EasyQuery.Db.DbConnectionLoaderOptions"/> so it can be used in the method chaining calls.
            </summary>
            <returns>DbConnectionLoaderOptions.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.DoNotSplitTablesOnMultiReference">
            <summary>
            Sets the value <see cref="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.SplitTablesOnMultiReference"/> property to false. 
            This function returns the same instance of <see cref="T:Korzh.EasyQuery.Db.DbConnectionLoaderOptions"/> so it can be used in the method chaining calls.
            </summary>
            <returns>DbConnectionLoaderOptions.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.DoNotPrettifyNames">
            <summary>
            Sets the value <see cref="P:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.PrettifyNames"/> property to false. 
            This function returns the same instance of <see cref="T:Korzh.EasyQuery.Db.DbConnectionLoaderOptions"/> so it can be used in the method chaining calls.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.IgnoreViews">
            <summary>
            Add the filter which makes model loader to ignore the views and process only the tables.
            This function returns the same instance of <see cref="T:Korzh.EasyQuery.Db.DbConnectionLoaderOptions"/> so it can be used in the method chaining calls.
            </summary>
            <returns>DbConnectionLoaderOptions.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.AddTableFilter(System.Func{Korzh.EasyQuery.Db.DbTableInfo,System.Boolean})">
            <summary>
            Adds the table filter.
            </summary>
            <param name="filter">The table filter - a function which returns <c>true</c> for the tables that should be processed.</param>
            <returns>DbConnectionLoaderOptions.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbConnectionLoaderOptions.AddFieldFilter(System.Func{Korzh.EasyQuery.Db.DbFieldInfo,System.Boolean})">
            <summary>
            Adds the field filter.
            </summary>
            <param name="filter">The field filter - a function which returns <c>true</c> for the field that should be processed.</param>
            <returns>DbConnectionLoaderOptions.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbOperator">
            <summary>
            Represents a logical expression or "predicate". For example: "less than", "is equal to", "starts with".
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbOperator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbOperator"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbOperator.#ctor(Korzh.EasyQuery.Db.DbModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbOperator"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbOperator.#ctor(Korzh.EasyQuery.Db.DbModel,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbOperator" /> class with specified parameters.
            </summary>
            <param name="model">The model.</param>
            <param name="id">Operator ID.</param>
            <param name="aCaption">Operator caption.</param>
            <param name="aExpr">Operator expression.</param>
            <param name="aDisplayFormat">Operator display format.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbOperator.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbOperator.LoadAttribute(System.String,System.String)">
            <summary>
            Loads the attribute.
            </summary>
            <param name="propname">The propname.</param>
            <param name="propvalue">The propvalue.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbOperator.Tables">
            <summary>
            Gets the list of the tables used in this operator (only for operators with "isCondition==true" ). 
            </summary>
            <value>A <see cref="T:Korzh.EasyQuery.Db.TableList"/> object</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbOperator.SaveAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves the attributes.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbParam">
            <summary>
            Represents one entry in <see cref="T:Korzh.EasyQuery.Db.DbParameters"/> list
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbParam.Name">
            <summary>
            Database parameter name
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.DbParam.Value">
            <summary>
            Database parameter value
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbParameters">
            <summary>
            Represents different parameters of database linked with this <see cref="T:Korzh.EasyQuery.DataModel"/> object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbParameters.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:String"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbParameters.FindByName(System.String)">
            <summary>
            Finds the database parameter by key.
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbParameters.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbParameters.GateClass">
            <summary>
            Gets or sets the ID of database gate.
            </summary>
            <value>The ID of database gate.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbParameters.LoginPrompt">
            <summary>
            Gets or sets a value indicating whether <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object should ask user for login and password when connect to database.
            </summary>
            <value><c>true</c> if <see cref="T:Korzh.EasyQuery.Db.DbGate"/> object should ask for login and password; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbQuery">
            <summary>
            Represents query for building SQL command
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbQuery" /> class.
            </summary>
            <param name="model">The model.</param>
            <param name="parentQuery">The parent query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbQuery" /> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbQuery"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQuery.Formats">
            <summary>
            Gets or sets the formats used during SQL statements building.
            </summary>
            <value>The formats used during SQL statements building.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CreateFormats">
            <summary>
            Gets the formats of generated query language (SQL or other).
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQuery.Options">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> object which defines some extra clauses of generated query.
            </summary>
            <value>The instance of <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> class</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQuery.ResultColumns">
            <summary>
            Gets the full list of columns which will be returned in result query. 
            It equals to Columns list if it's not empty. Otherwise - it's an array of all fields from all tables taking part in this query (like SELECT * in SQL). 
            </summary>
            <value>
            The list of result columns.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CoreClear">
            <summary>
            Clears all query content. Can be overriden in derived classes.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQuery.ExtraTables">
            <summary>
            Gets the list of "extra" tables (the tables which will be included into result query by user request).
            </summary>
            <value>The <see cref="T:Korzh.EasyQuery.Db.TableList"/> object which contains extra tables.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.LoadNode(System.Xml.XmlReader,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads the root node.
            </summary>
            <param name="reader">The reader.</param>
            <param name="rwOptions">The rw options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.SaveNodes(System.Xml.XmlWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves the root nodes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The rw options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
             Reads the property from JSON reader or skip unused.
            </summary>
            <param name="reader"></param>
            <param name="propName"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
             Reads the property from JSON reader or skip unused (asynchronous way). 
            </summary>
            <param name="reader"></param>
            <param name="propName"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves content of the query to JSON.
            </summary>
            <param name="writer"></param>
            <param name="rwOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves content of the query to JSON (asynchronous way). 
            </summary>
            <param name="writer"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.GetUsedTables">
            <summary>
            Gets the used tables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.GetUsedEntities">
            <summary>
            Gets the list of used entities.
            </summary>
            <returns>List&lt;Entity&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.GetParentQueryRootEntity">
            <summary>
            Gets the entities from parent query.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.OnCondSqlGen(Korzh.EasyQuery.Db.CondSqlGenEventArgs)">
            <summary>
            Raises the <see cref="E:CondSqlGen"/> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.CondSqlGenEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Korzh.EasyQuery.Db.DbQuery.CondSqlGen">
            <summary>
            This event is raised during query building for each condition in the query and it 
            allows you to replace the SQL expression generated for this condition.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQuery.NoPathResolution">
            <summary>
            Get or set the type of reaction for the situation when two tables have no path between them
            </summary>
            <value>The value of <see cref="T:Korzh.EasyQuery.NoPathResultion"/> enum.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CreateColumnCore">
            <summary>
            Creates the column object. This particular implementation returns and instance of DbColumn class
            </summary>
            <returns>Column.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CreateParentEntityAttrExpr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Creates the parent entity attribute expression.
            </summary>
            <param name="attr">The attribute we need to create a parent expression for.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CreateQueryExpr">
            <summary>
            Creates a sub-query expression.
            </summary>
            <returns>An EqExpression object that represents a sub-query expression</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CreateSubQuery">
            <summary>
            Creates the subquery.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.NewModel">
            <summary>
            Creates a new model (an object of DataModel class or its descendant).
            </summary>
            <returns>DataModel.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQuery.CheckModelObject(Korzh.EasyQuery.DataModel)">
            <summary>
            Checks if model object has appropriate type and raise exception if not
            </summary>
            <param name="model">An object of DataModel type (or one of its descendants)</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.CondSqlGenEventArgs">
            <summary>
            Provides data for CondSqlGen event of <see cref="T:Korzh.EasyQuery.Db.SqlQueryBuilder"/> class
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.CondSqlGenEventArgs.Condition">
            <summary>
            Gets the condition which this event occurs for.
            </summary>
            <value>The condition.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.CondSqlGenEventArgs.SQL">
            <summary>
            Gets or sets the SQL expression for the corresponding condition.
            </summary>
            <value>The SQL expression.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.CondSqlGenEventArgs.#ctor(Korzh.EasyQuery.Condition,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:CondSqlGenEventArgs"/> class.
            </summary>
            <param name="cond">The Condition object which SQL expression is generating for.</param>
            <param name="sql">The SQL expression.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.CondSqlGenEventHandler">
            <summary>
            Represents delegate for CondSqlGen event of <see cref="T:Korzh.EasyQuery.Db.SqlQueryBuilder"/> class
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbQueryBuilder">
            <summary>
            Lets you build SQL commands based on <see cref="T:Korzh.EasyQuery.Db.DbQuery"/> object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryBuilder.#ctor(Korzh.EasyQuery.Db.DbQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbQueryBuilder"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryBuilder.EscapeDef">
            <summary>
            contains escape symbol definition which will be added to the condition if necessary 
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryBuilder.Query">
            <summary>
            Gets the query object associated with the builder.
            </summary>
            <value>The query reprensented by an instance of <see cref="T:Korzh.EasyQuery.Db.DbQuery" /> class.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbQueryBuilder.CreateFormats">
            <summary>
            Creates <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.
            </summary>
            <returns>The instance of <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> class </returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryBuilder.Formats">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object in the parent query.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbQueryBuilder.Extras">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> object which defines some extra clauses and options of the generated query.
            </summary>
            <value>The instance of <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> class</value>
        </member>
        <member name="T:Korzh.EasyQuery.Db.EntitySqlQueryBuilder">
            <summary>
            Lets you build Entity SQL commands based on <see cref="T:Korzh.EasyQuery.Db.DbQuery"/> object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.#ctor(Korzh.EasyQuery.Db.DbQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.EntitySqlQueryBuilder"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.CreateResult">
            <summary>
            Creates the result object.
            </summary>
            <returns>QueryBuilderResult.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.Result">
            <summary>
            Gets the result object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.BuildSQL">
            <summary>
            Builds the SQL statement.
            </summary>
            <remarks> 
            After calling this method read <see cref="P:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.Result"/> property to get the text 
            of created SQL statement or other parameters such as list of result columns,
            list of used tables, text of particular statement clause (e.g. WHERE), etc.
            </remarks>
            <returns>
            <see langword="true"/> if query was successfully built; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.CanBuild">
            <summary>
            Gets a value indicating whether this instance can be built.
            </summary>
            <value><c>true</c> if this instance can build; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.BuildParamSQL">
            <summary>
            The same as <see cref="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.BuildSQL"/> method but generates parametrized SQL expression where all values are replaced by parameters (e.g. @param1).
            You can access full list of parameters used in generated SQL statement through <see cref="P:Query.Params"/> property.
            </summary>
            <returns>
            <see langword="true"/> if query was successfully built; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.BuildSQLEx(System.String,System.String)">
            <summary>
            Builds the SQL with some additional columns and conditions which can be passed in parameters
            </summary>
            <param name="extraColumns">
            The addtional columns which will be placed in SELECT clause of result SQL.
            All columns should be listed exactly as they will appear in result SQL (e.g. "Customer.FirstName") and separated by comma.
            </param>
            <param name="extraConditions">
            The addtional conditions which will be placed in WHERE clause of result SQL.
            All conditions should be listed exactly as they will appear in result SQL. 
            <para>For example: Order.Paid=true AND Order.Freight > 1000 </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.ResetSqlBuilder">
            <summary>
            Resets the SQL builder.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.ProcessScalarValue(Korzh.EasyQuery.Condition,System.String,Korzh.EasyQuery.DataType,Korzh.EasyQuery.ScalarExprOptions)">
            <summary>
            Processes scalar value and returns SQL (or some other query language) expression.
            </summary>
            <param name="value">The value.</param>
            <param name="dataType">Type of the data.</param>
            <param name="exprOptions">Different options.</param>
            <param name="cnd">Current condition</param>
            <returns>System.String object which represents the value.</returns>
        </member>
        <member name="E:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.CondSqlGen">
            <summary>
            This event is raised during query building for each condition in the query and it 
            allows you to replace the SQL expression generated for this condition.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlQueryBuilder.OnCondSqlGen(Korzh.EasyQuery.Db.CondSqlGenEventArgs)">
            <summary>
            Raises the <see cref="E:CondSqlGen"/> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.CondSqlGenEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.EntitySqlStatement">
            <summary>
            Represents the result of performing BuildSQL command.
            </summary>
            <remarks>
            Object of this class contains data which represent the result of BuildSQL() command.
            This includes all database tables used in query, result columns, all SQL SELECT statement clauses 
            and the whole SQL statement (in SQL property).
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.#ctor(Korzh.EasyQuery.Db.EntitySqlQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.SqlStatement"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.Query">
            <summary>
            Gets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.Portion">
            <summary>
            Allows to specify a portion of result set to return.
            </summary>
            <value>The portion of result set.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.Formats">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object in the parent query.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.ExtraClauses">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> object which defines some extra clauses of generated query.
            </summary>
            <value>The instance of <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> class</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.SelectClause">
            <summary>
            Gets the text of SELECT clause.
            </summary>
            <value>Text of SELECT clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.FromClause">
            <summary>
            Gets the text of FROM clause.
            </summary>
            <value>Text of FROM clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.WhereClause">
            <summary>
            Gets the text of WHERE clause.
            </summary>
            <value>Text of WHERE clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.NeedGroupBy">
            <summary>
            Gets a value indicating whether GROUP BY section is necessary in result SQL.
            </summary>
            <value><c>true</c> if GROUP BY section is necessary in result SQL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.GroupClause">
            <summary>
            Gets the text of GROUP BY clause.
            </summary>
            <value>Text of GROUP BY clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.HavingClause">
            <summary>
            Gets the text of HAVING clause.
            </summary>
            <value>Text of HAVING clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.OrderClause">
            <summary>
            Gets the text of ORDER BY clause.
            </summary>
            <value>Text of ORDER BY clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.RootEntity">
            <summary>
            Gets the root (first) table used in query.
            </summary>
            <value>The root (first) table used in query.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.AddToWhereClause(System.String)">
            <summary>
            Adds some text to WHERE clause.
            </summary>
            <param name="s">Text that will be added into WHERE clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.AddToHavingClause(System.String)">
            <summary>
            Adds some text to HAVING clause.
            </summary>
            <param name="s">Text that will be added into HAVING clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.AddCondition(System.String)">
            <summary>
            Adds text of some condition to WHERE clause.
            </summary>
            <param name="s">Text of the condition that will be added into WHERE clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.AddHavingCondition(System.String)">
            <summary>
            Adds text of some condition to HAVING clause.
            </summary>
            <param name="s">Text of the condition that will be added into HAVING clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.ClearAll">
            <summary>
            Clears all clauses.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.ClearWhereClause">
            <summary>
            Clears the WHERE clause.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.ClearHavingClause">
            <summary>
            Clears the HAVING clause.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.GetSql(System.String,System.String)">
            <summary>
            Gets the SQL statement with custom SELECT and ORDER BY clauses.
            </summary>
            <param name="selectExpr">The SELECT expresstion.</param>
            <param name="orderExpr">The ORDER BY expression.</param>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.SQL">
            <summary>
            Gets the text of result SQL statement.
            </summary>
            <value>Text of built SQL statement after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.EntitySqlStatement.EntitySql">
            <summary>
            Gets the "entity SQL" (for Entity Framework).
            </summary>
            <value>
            The entity SQL.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.EntitySqlStatement.GetStatement">
            <summary>
            Returns the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.ResultEntity">
            <summary>
            Represents a table used in query.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultEntity.Entity">
            <summary>
            Gets the table.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultEntity.Link">
            <summary>
            Link to other (parent) table used in query.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultEntity.ChildEntites">
            <summary>
            Gets the list of child tables.
            </summary>
            <value>The child tables.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultEntity.#ctor(Korzh.EasyQuery.Entity,Korzh.EasyQuery.Db.DbEntityLink)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.ResultEntity" /> class.
            </summary>
            <param name="entity">The entity.</param>
            <param name="link">The link.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultEntity.AddChildEntity(Korzh.EasyQuery.Entity,Korzh.EasyQuery.Db.DbEntityLink)">
            <summary>
            Adds the child entity.
            </summary>
            <param name="entity">The entity.</param>
            <param name="link">The link.</param>
            <returns>ResultEntity.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultEntity.FindEntityByName(System.String)">
            <summary>
            Finds the table in result entity by its name
            </summary>
            <param name="name">The name.</param>
            <returns>ResultEntity.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.ResultEntityList">
            <summary>
            Represents list of result tables.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.FilterExpressionBuilder">
            <summary>
            Used for building Sql commands using <see cref="T:Korzh.EasyQuery.Db.DbQuery"/>
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpressionBuilder.#ctor(Korzh.EasyQuery.Db.DbQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.SqlQueryBuilder"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpressionBuilder.CreateResult">
            <summary>
            Creates the result object.
            </summary>
            <returns>QueryBuilderResult.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.FilterExpressionBuilder.Result">
            <summary>
            Gets the result.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.FilterExpressionBuilder.CanBuild">
            <summary>
            Gets a value indicating whether this instance can be built.
            </summary>
            <value><c>true</c> if this instance can build; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpressionBuilder.BuildFilter">
            <summary>
            Builds the filter expression. It can be used (for example) in DataSet.FilterExpression property to filter data
            </summary>
            <returns><c>true</c> if the expression was generated correctly, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpressionBuilder.ResetFilterBuilder">
            <summary>
            Resets the filter builder.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.Db.FilterExpressionBuilder.CondSqlGen">
            <summary>
            This event is raised during query building for each condition in the query and it 
            allows you to replace the SQL expression generated for this condition.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpressionBuilder.OnCondSqlGen(Korzh.EasyQuery.Db.CondSqlGenEventArgs)">
            <summary>
            Raises the <see cref="E:CondSqlGen"/> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.CondSqlGenEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.FilterExpression">
            <summary>
            Represents the result of performing BuildSQL command.
            </summary>
            <remarks>
            Object of this class contains data which represent the result of BuildSQL() commmand.
            This includes all database tables used in query, result columns, all SQL SELECT statement clauses 
            and the whole SQL statement (in SQL property).
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.#ctor(Korzh.EasyQuery.Db.FilterExpressionBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.SqlStatement"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.FilterExpression.Formats">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object in the parent query.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.FilterExpression.ExtraClauses">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> object which defines some extra clauses of generated query.
            </summary>
            <value>The instance of <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> class</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.AddToWhereClause(System.String)">
            <summary>
            Adds some text to WHERE clause.
            </summary>
            <param name="s">Text that will be added into WHERE clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.AddCondition(System.String)">
            <summary>
            Adds text of some condition to WHERE clause.
            </summary>
            <param name="s">Text of the condition that will be added into WHERE clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.ClearAll">
            <summary>
            Clears all clauses.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.ClearWhereClause">
            <summary>
            Clears the WHERE clause.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.GetFilterExpr">
            <summary>
            Gets the filter expression.
            </summary>
            <returns>String object that represents the expression.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.FilterExpression.GetStatement">
            <summary>
            Returns the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.FilterExpression.FilterExpr">
            <summary>
            Gets the filter expression.
            </summary>
            <value>The value of built filter expression after calling <see cref="M:Korzh.EasyQuery.Db.FilterExpressionBuilder.BuildFilter"/> method.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Db.ResultSetPortion">
            <summary>
            Represents a portion of result set to return
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultSetPortion.Offset">
            <summary>
            Specifies the number of rows to skip, before starting to return rows from the result set.
            </summary>
            <value>The number of rows to skip.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultSetPortion.Limit">
            <summary>
            Specifies the number of rows to return from result set (starting from the row defined in <see cref="P:Korzh.EasyQuery.Db.ResultSetPortion.Offset"/>)
            </summary>
            <value>The number of rows to return from result set.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultSetPortion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.ResultSetPortion"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultSetPortion.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.ResultSetPortion"/> class.
            </summary>
            <param name="offset">The offset.</param>
            <param name="limit">The limit for the record number to fetch.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.SqlDialect">
            <summary>
            Represents some dialect of SQL syntax (like Oracle, MySQL, ANSI 92, etc)
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlDialect.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlDialect.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.SqlDialectList">
            <summary>
            Represents different dialects of SQL
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlDialectList.FindByName(System.String)">
            <summary>
            Finds the <see cref="T:Korzh.EasyQuery.Db.SqlDialect"/> object by name.
            </summary>
            <param name="name">The parameter name.</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.SqlExtras">
            <summary>
            Represents different extra clauses of SELECT query.
            </summary>
            <remarks>
            This class allows to turn on/off some additional clauses of SQL SELECT statement (such as DISTINCT and others).
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlExtras.SelectDistinct">
            <summary>
            Gets or sets a value indicating whether SELECT clause must contain DISTINCT option.
            </summary>
            <value>
            	<see langword="true"/> if SELECT clause must contain DISTINCT option; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlExtras.SelectTop">
            <summary>
            Gets or sets the content of TOP command in SELECT clause.
            </summary>
            <value>The content of TOP command.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlExtras.LimitClause">
            <summary>
            Gets or sets the content of LIMIT clause in result SQL statement
            </summary>
            <value>The content of LIMIT clause.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlExtras.IsParamMode">
            <summary>
            Gets or sets a value indicating whether we should replace all values in conditions with parameters during SQL generation.
            </summary>
            <value><c>true</c> if the values in conditions will be replaced with parameters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlExtras.LazyJoins">
            <summary>
            Gets or sets a value indicating whether "lazy outer joins" scheme is used.
            If it is <c>true</c> <see cref="T:Korzh.EasyQuery.Db.SqlQueryBuilder"/> will "delay" outer joins and apply them only when all inner joins have been made. 
            Such behaviour will allow to get more records in result set.
            </summary>
            <value><c>true</c> if "lazy outer joins" scheme is used; otherwise, <c>false</c>.</value>
            <remarks>
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlExtras.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads DbOptions from the IDictionary&lt;string, object&gt; object.
            Used for deserialization from JSON
            </summary>
            <param name="clauseDict">The IDictionary&lt;string, object&gt; object to load formats from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlExtras.SetClauseByName(System.String,System.Object)">
            <summary>
            Sets one property according to its name and value.
            </summary>
            <param name="propName">Property name.</param>
            <param name="propValue">Property value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlExtras.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of SqlExtras object to JSON.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlExtras.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of SqlExtras object to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlExtras.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Read the SQL extras from JSON.
            </summary>
            <param name="reader">The reader.</param>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlExtras.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Read the SQL extras from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="T:Korzh.EasyQuery.Db.SqlQueryBuilder">
            <summary>
            Lets you build SQL commands based on <see cref="T:Korzh.EasyQuery.Db.DbQuery"/> object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.#ctor(Korzh.EasyQuery.Db.DbQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.SqlQueryBuilder"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.CreateResult">
            <summary>
            Creates the result object
            </summary>
            <returns>QueryBuilderResult.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlQueryBuilder.Result">
            <summary>
            Gets the result object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL">
            <summary>
            Builds the SQL statement.
            </summary>
            <remarks> 
            After calling this method read <see cref="P:Korzh.EasyQuery.Db.SqlQueryBuilder.Result"/> property to get the text 
            of created SQL statement or other parameters such as list of result columns,
            list of used tables, text of particular statement clause (e.g. WHERE), etc.
            </remarks>
            <returns>
            <see langword="true"/> if query was successfully built; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlQueryBuilder.CanBuild">
            <summary>
            Gets a value indicating whether the query can be built.
            </summary>
            <value><c>true</c> if this instance can build; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildParamSQL">
            <summary>
            The same as <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method but generates parametrized SQL expression where all values are replaced by parameters (e.g. @param1).
            You can access full list of parameters used in generated SQL statement through <see cref="P:Query.Params"/> property.
            </summary>
            <returns>
            <see langword="true"/> if query was successfully built; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQLEx(System.String,System.String)">
            <summary>
            Builds the SQL with some additional columns and conditions which can be passed in parameters
            </summary>
            <param name="extraColumns">
            The additional columns which will be placed in SELECT clause of result SQL.
            All columns should be listed exactly as they will appear in result SQL (e.g. "Customer.FirstName") and separated by comma.
            </param>
            <param name="extraConditions">
            The additional conditions which will be placed in WHERE clause of result SQL.
            All conditions should be listed exactly as they will appear in result SQL. 
            <para>For example: Order.Paid=true AND Order.Freight > 1000 </para>
            </param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.AddTablesExtraConditions(Korzh.EasyQuery.Db.ResultTableNode)">
            <summary>
            Adds the tables extra conditions if need.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.ResetSqlBuilder">
            <summary>
            Resets the SQL builder.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.GetParamExpr(System.String)">
            <summary>
            Gets the parameter expression.
            </summary>
            <param name="id">The identifier.</param>
            <returns>System.String which represents the parameter (either @ParamID or :ParamID depending SQL syntax which is used)</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.ProcessScalarValue(Korzh.EasyQuery.Condition,System.String,Korzh.EasyQuery.DataType,Korzh.EasyQuery.ScalarExprOptions)">
            <summary>
            Processes scalar value and returns SQL (or some other query language) expression.
            </summary>
            <param name="cnd">The condition in which we calculate this scalar value</param>
            <param name="value">The value.</param>
            <param name="dataType">Type of the data.</param>
            <param name="exprOptions">Different options.</param>
            <returns>System.String.</returns>
        </member>
        <member name="E:Korzh.EasyQuery.Db.SqlQueryBuilder.CondSqlGen">
            <summary>
            This event is raised during query building for each condition in the query and it 
            allows you to replace the SQL expression generated for this condition.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilder.OnCondSqlGen(Korzh.EasyQuery.Db.CondSqlGenEventArgs)">
            <summary>
            Raises the <see cref="E:CondSqlGen"/> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.CondSqlGenEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.SqlQueryBuilderExtensions">
            <summary>
            Contains several extension method used in SqlQueryBulder (and, possibly, other query builders as well)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilderExtensions.GetSqlExpr(Korzh.EasyQuery.EqExpression,Korzh.EasyQuery.Db.DbQueryFormats,Korzh.EasyQuery.Db.SqlExtras)">
            <summary>
            Gets the SQL expression of the <see cref="T:Korzh.EasyQuery.EqExpression" /> object.
            </summary>
            <param name="expr">An <see cref="T:Korzh.EasyQuery.EqExpression" /> object.</param>
            <param name="formats">A <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats" /> object.</param>
            <param name="extras">Some extra clauses and options which may affect the result SQL.</param>
            <returns>A correctly formatted SQL expression.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilderExtensions.GetUsedTables(Korzh.EasyQuery.EqExpression,Korzh.EasyQuery.Db.TableList)">
            <summary>
            Add the tables used in this expression into the list.
            </summary>
            <param name="expr">An <see cref="T:Korzh.EasyQuery.EqExpression" /> object.</param>
            <param name="tables">The list where the used tables should be added to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlQueryBuilderExtensions.CollectUsedTables(Korzh.EasyQuery.Condition,Korzh.EasyQuery.Db.TableList)">
            <summary>
            Collects the tables used by this condition and adds them to the list passed in usedTables parameter
            </summary>
            <param name="condition">The condition.</param>
            <param name="usedTables">The list of used tables.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.SqlStatement">
            <summary>
            Represents the result of performing BuildSQL command.
            </summary>
            <remarks>
            Object of this class contains data which represent the result of BuildSQL() command.
            This includes all database tables used in query, result columns, all SQL SELECT statement clauses 
            and the whole SQL statement (in SQL property).
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.#ctor(Korzh.EasyQuery.Db.SqlQueryBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.SqlStatement"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.Query">
            <summary>
            Gets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.Portion">
            <summary>
            Allows to specify a portion of result set to return.
            </summary>
            <value>The portion of result set.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.Formats">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object in the parent query.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.ExtraClauses">
            <summary>
            Gets the <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> object which defines some extra clauses of generated query.
            </summary>
            <value>The instance of <see cref="T:Korzh.EasyQuery.Db.SqlExtras"/> class</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.SelectClause">
            <summary>
            Gets the text of SELECT clause.
            </summary>
            <value>Text of SELECT clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.FromClause">
            <summary>
            Gets the text of FROM clause.
            </summary>
            <value>Text of FROM clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.WhereClause">
            <summary>
            Gets the text of WHERE clause.
            </summary>
            <value>Text of WHERE clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.NeedGroupBy">
            <summary>
            Gets a value indicating whether GROUP BY section is necessary in result SQL.
            </summary>
            <value><c>true</c> if GROUP BY section is necessary in result SQL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.GroupClause">
            <summary>
            Gets the text of GROUP BY clause.
            </summary>
            <value>Text of GROUP BY clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.HavingClause">
            <summary>
            Gets the text of HAVING clause.
            </summary>
            <value>Text of HAVING clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.OrderClause">
            <summary>
            Gets the text of ORDER BY clause.
            </summary>
            <value>Text of ORDER BY clause after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.RootNode">
            <summary>
            Gets or sets the root table node in the generated SQL statement.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.AddToWhereClause(System.String)">
            <summary>
            Adds some text to WHERE clause.
            </summary>
            <param name="s">Text that will be added into WHERE clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.AddToHavingClause(System.String)">
            <summary>
            Adds some text to HAVING clause.
            </summary>
            <param name="s">Text that will be added into HAVING clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.AddCondition(System.String)">
            <summary>
            Adds text of some condition to WHERE clause.
            </summary>
            <param name="s">Text of the condition that will be added into WHERE clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.AddHavingCondition(System.String)">
            <summary>
            Adds text of some condition to HAVING clause.
            </summary>
            <param name="s">Text of the condition that will be added into HAVING clause.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.ClearAll">
            <summary>
            Clears all clauses.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.ClearWhereClause">
            <summary>
            Clears the WHERE clause.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.ClearHavingClause">
            <summary>
            Clears the HAVING clause.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.GetSql(System.String,System.String)">
            <summary>
            Gets the SQL statement with custom SELECT and ORDER BY clauses.
            </summary>
            <param name="selectExpr">The SELECT expresstion.</param>
            <param name="orderExpr">The ORDER BY expression.</param>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.SQL">
            <summary>
            Gets the text of result SQL statement.
            </summary>
            <value>Text of built SQL statement after calling <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildSQL"/> method.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.SqlStatement.GetStatement">
            <summary>
            Returns the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.HasChunkLimit">
            <summary>
            Gets a value indicating whether the result query statement includes paging (offset/fetch/limit) clauses.
            </summary>
            <value><c>true</c> if this instance has paging; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.SqlStatement.RowNumberAlias">
            <summary>
            Gets the alias for Total Records column.
            This option works only if <see cref="P:Korzh.EasyQuery.Db.DbQueryFormats.LegacyPaging" ></see> is true.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.ResultTableNode">
            <summary>
            Represents one table in result SQL statement
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNode.Table">
            <summary>
            The reference to the original model table.
            </summary>
            <value>The table.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNode.Links">
            <summary>
            Gets or sets the list of all connections this node has with other nodes (tables).
            </summary>
            <value>All links to other nodes.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNode.LinkToParent">
            <summary>
            Gets the link to the parent node.
            </summary>
            <value>The link to the parent node.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNode.ChildNodes">
            <summary>
            Gets all child nodes.
            </summary>
            <value>The child nodes.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultTableNode.#ctor(Korzh.EasyQuery.Db.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.ResultTableNode"/> class.
            </summary>
            <param name="table">The table.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.ResultTableNodeLink">
            <summary>
            Represents one connection between two nodes (two <see cref="T:Korzh.EasyQuery.Db.ResultTableNode"/> objects.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNodeLink.Node1">
            <summary>
            Gets the parent node
            </summary>
            <value>The node1.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNodeLink.Node2">
            <summary>
            Gets the child node.
            </summary>
            <value>The node2.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.ResultTableNodeLink.TableLink">
            <summary>
            Gets the original link between tables (from the data model).
            </summary>
            <value>The table link.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.ResultTableNodeLink.#ctor(Korzh.EasyQuery.Db.ResultTableNode,Korzh.EasyQuery.Db.ResultTableNode,Korzh.EasyQuery.Db.TableLink)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.ResultTableNodeLink"/> class.
            </summary>
            <param name="node1">The parent node.</param>
            <param name="node2">The child node.</param>
            <param name="link">The orginal link between tables.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableLink">
            <summary>
            Represents link between two tables 
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableLink.Condition">
            <summary>
            Represents linking condition
            </summary>
            <remarks> Usually linking condition looks like {table1 field} = {table2 field} 
            but it also can has the following format {table1 field} = {constant}.
            Condition operator also can differ, e.g. {table1 field} > {table2 field} 
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.Condition.StrToLinkCondType(System.String)">
            <summary>
            Allows to get <see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> by its text representation
            </summary>
            <param name="s">Text representation of condition type</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> enumeration value</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.Condition.#ctor(Korzh.EasyQuery.Db.TableLink)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableLink.Condition"/> class.
            </summary>
            <param name="link">A <see cref="T:Korzh.EasyQuery.Db.TableLink"/> object which the condition is created for.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.Condition.#ctor(Korzh.EasyQuery.Db.TableLink,Korzh.EasyQuery.Db.TableLink.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableLink.Condition"/> class.
            </summary>
            <param name="link">A <see cref="T:Korzh.EasyQuery.Db.TableLink"/> object which the condition is created for.</param>
            <param name="cond">A <see cref="T:Korzh.EasyQuery.Db.TableLink"/> object which the condition is created for.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.Info">
            <summary>
            Stores additional information associated with this condition
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.Condition.LinkCondTypeToStr(Korzh.EasyQuery.Db.LinkCondType)">
            <summary>
            Convert <see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> value to its text representation
            </summary>
            <param name="type">LinkCo<see cref="T:Korzh.EasyQuery.Db.LinkCondType"/>ndType value.</param>
            <returns>Text</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.Expr1">
            <summary>
            Gets or sets the left side of linking condition.
            </summary>
            <value>Full field name (e.g. CUSTOMER.CompanyName) or constant</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.Expr2">
            <summary>
            Gets or sets the right side of linking condition.
            </summary>
            <value>Full field name (e.g. CUSTOMER.CompanyName) or constant</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.CustomExpr">
            <summary>
            Gets or sets the custom expression of condition (if 'CustomExpr' condition type is used)
            </summary>
            <value>Custom condition expression (like: "table1.OrderType = 1")</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.Operator">
            <summary>
            Gets or sets the condition operator.
            </summary>
            <value>Operator symbol (e.g. =, !=, etc.) </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.CondType">
            <summary>
            Gets or sets the type of condition (field to field or field to expression).
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.LinkCondType"/> value</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.Table1">
            <summary>
            Gets the first (left) table taken part in link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Condition.Table2">
            <summary>
            Gets the second (right) table taken part in link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.Condition.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression that represents the condition.
            </summary>
            <param name="formats">Formats.</param>
            <returns>Correctly formatted text of SQL expression which represents the condition. 
            E.g.: CUSTOMER.CustNo = ORDERS.CustNo </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.Condition.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.IsEnabled">
            <summary>
            Determines whether the link can be used on query building.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.UseHash">
            <summary>
            Gets or sets value indicating wether database should use hash join algorithm 
            (experimental feature)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.ContainsTable(Korzh.EasyQuery.Db.Table)">
            <summary>
            Returns true if the table passed in parameter participates in this link
            </summary>
            <param name="table">The Table object to check for</param>
            <returns>True if table participates in this link; otherwise - false.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.SwitchTables(System.Boolean)">
            <summary>
            Switches the tables that participate in the link. Table1 become Table2 and vice versa.
            So, the default direction of the link is changed.
            </summary>
            <param name="changeLinkTypeAccordingly">
            if set to <c>true</c> the type of the link will be changed accordingly, so LEFT join will become RIGHT and vice versa. 
            The links with other types are not affected.
            </param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.StrToLinkType(System.String)">
            <summary>
            Converts text to <see cref="T:Korzh.EasyQuery.Db.TableLinkType"/> value.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableLink.ConditionList">
            <summary>
            Represents list of linking conditions
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.SetParent(Korzh.EasyQuery.Db.TableLinkList)">
            <summary>
            Sets the reference to parent list.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.ClearParent">
            <summary>
            Clears the reference to parent list.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Table1">
            <summary>
            Gets or sets the first table of the link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Table2">
            <summary>
            Gets or sets the second table of the link.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.Conditions">
            <summary>
            Gets list of linking conditions.
            </summary>
            <value>ConditionList object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.LnkType">
            <summary>
            Gets or sets the type of the link (inner, left, right or full).
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.TableLinkType"/> enumeration value</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.QuoteFields">
            <summary>
            Gets or sets a value indicating whether field names in link conditions should be quoted in SQL expressions.
            </summary>
            <value><c>true</c> if field names in link conditions should be quoted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableLink"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.CopyFrom(Korzh.EasyQuery.Db.TableLink)">
            <summary>
            Gets or sets a value indicating whether field names in link conditions should be quoted in SQL expressions.
            </summary>
            <value><c>true</c> if field names in link conditions should be quoted; otherwise, <c>false</c>.</value>
            <returns>Current table link object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.AddCondition(Korzh.EasyQuery.Db.LinkCondType,System.String,System.String,System.String)">
            <summary>
            Adds the link condition by two expressions and operation.
            </summary>
            <param name="condType">Type of the condition.</param>
            <param name="expr1">The first expression.</param>
            <param name="expr2">The second expression.</param>
            <param name="operation">The operation (=, !=, etc) .</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression of the link
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns>Text of correctly formatted SQL expression that represents the link</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLink.ConditionExpr">
            <summary>
            Gets or sets the expression of link condition.
            This expression will be used if <see cref="P:Korzh.EasyQuery.Db.TableLink.Conditions"/> list is empty.
            </summary>
            <value>
            An SQL expression of link condition.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.RemoveFromTables">
            <summary>
            Removes link reference from linked tables.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.EnsureExistenceInTables">
            <summary>
            Ensures the existence in tables.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLink.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.LinkCondType">
            <summary>
            Represents the type of linking condition (field-to-field, field-to-expression, etc.)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.LinkCondType.FieldField">
            <summary>
            field-to-field link condition.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.LinkCondType.FieldExpr">
            <summary>
            field-to-expression link condition.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.LinkCondType.ExprField">
            <summary>
            expression-to-field link condition.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.LinkCondType.ExprExpr">
            <summary>
            expression-to-expression link condition.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.LinkCondType.CustomExpr">
            <summary>
            link condition totally defined by user.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableLinkType">
            <summary>
            Type of the link (inner, outer left, outer right or full)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.TableLinkType.Inner">
            <summary>
            Inner join.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.TableLinkType.Left">
            <summary>
            Left outer join.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.TableLinkType.Right">
            <summary>
            Right outer join.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.TableLinkType.Full">
            <summary>
            Full join.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.TableLinkType.Cross">
            <summary>
            Cross join.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Db.TableLinkType.CrossApply">
            <summary>
            Cross apply
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableLinkList">
            <summary>
            Represents list of the links (<see cref="T:Korzh.EasyQuery.Db.TableLink"/> objects).
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkList.FindByTables(Korzh.EasyQuery.Db.Table,Korzh.EasyQuery.Db.Table)">
            <summary>
            Finds links by tables.
            </summary>
            <param name="table1">First table</param>
            <param name="table2">Second table</param>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1" /> An enumerable of objects which represents the link between specified tables
            or null if such link was not found</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkList.FindForeignKeyLink(Korzh.EasyQuery.Db.Table,Korzh.EasyQuery.Db.Table,System.String,System.String)">
            <summary>
            Finds a link created by some foreign key constraints.
            </summary>
            <param name="table1">The first table</param>
            <param name="table2">The second table</param>
            <param name="field1">The field name in the first table</param>
            <param name="field2">The field name in the second table</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.TableLink" /> A TableLink object which represents the found link or <c>null</c> - if such a link was not found</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableLinkStore">
            <summary>
            Represents a storage of links connected with some DbModel object
            </summary>
            <remarks>
            An instance of this class does not only contains list of links 
            but also holds a reference to some DbModel object.
            So, removing a link from this list will remove it from the "Links" property of the linked tables.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableLinkStore.Model">
            <summary>
            Current DbModel
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.#ctor(Korzh.EasyQuery.Db.DbModel)">
            <summary>
            
            </summary>
            <param name="dbModel"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.InsertItem(System.Int32,Korzh.EasyQuery.Db.TableLink)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.ClearItems">
            <summary>
            Clears the items.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.RemoveByTable(Korzh.EasyQuery.Db.Table)">
            <summary>
            Removes all links which contain the table passed in parameter
            </summary>
            <param name="table">A <see cref="T:Table" /> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.AddRange(System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Db.TableLink})">
            <summary>
            Adds links
            </summary>
            <param name="links"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of links from JSON.
            </summary>
            <param name="reader">The reader</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of links from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of links to JSON.
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableLinkStore.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of linksto JSON.
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableListException">
            <summary>
            Class TableListException.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableListException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableListException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.Table">
            <summary>
            Table class represents one table in a <see cref="T:Korzh.EasyQuery.Db.DbModel"/> object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.#ctor">
            <summary>
            Default constructor of the <see cref="T:Korzh.EasyQuery.Db.Table"/> class
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.#ctor(Korzh.EasyQuery.Db.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.Table"/> class by already existing object of the same class
            </summary>
            <param name="source">Original <see cref="T:Korzh.EasyQuery.Db.Table"/> object that will be copied</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.Links">
            <summary>
            Gets the links.
            </summary>
            <returns>TableLinkList.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.Category">
            <summary>
            Gets or sets the table category.
            </summary>
            <value>
            The table category.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.Store">
            <summary>
            Gets the table store of the table.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.Info">
            <summary>
            Stores additional information associated with this entity
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.EnsureLinkExistence(Korzh.EasyQuery.Db.TableLink)">
            <summary>
            Ensures the existence of the link passed in parameter.
            </summary>
            <param name="link">The link.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.Alias">
            <summary>
            Gets or sets the alias.
            </summary>
            <value>Table alias</value>
            <remarks>
            Alias must be unique for <see cref="T:Korzh.EasyQuery.Db.Table"/> object. 
            Each table in the database can have several its representations in <see cref="T:Korzh.EasyQuery.Db.DbModel"/> object but with different aliases.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetCalcAlias">
            <summary>
            Gets the calculated alias (used when the "alias" field is empty)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.DBName">
            <summary>
            Gets or sets the name of the database.
            </summary>
            <value>Name of the database which specified table belongs to</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
            <value>The name of the schema.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.DesignLayout">
            <summary>
            Gets or sets the design layout (left, top and width, height of the table window in Data Model Editor).
            </summary>
            <value>The design layout as a string which represent left, top, width, heigth value separated by comma.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.ComposeAlias(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Composes the alias.
            </summary>
            <param name="formats">The <see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.NeedQuote(System.String)">
            <summary>
            Gets a value indicating whether string should be quoted
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.QuoteIfNecessary(System.String,Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Puts quotes around identifier if necessary.
            </summary>
            <param name="s">The source string (e.g. table name, etc.).</param>
            <param name="formats">The formats.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetPrimalExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the "primal" table expression. 
            Usually it's the name this table is referenced by in the DB.
            However, for a virtual table it's simply its expression.
            </summary>
            <param name="formats">The formats.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetSqlName(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the name that represents the table in SQL expressions.
            </summary>
            <param name="formats">SQL formats (quoting, syntax style, etc). </param>
            <returns>The name that represents the table in SQL expressions.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression that represents the table in WHERE clause.
            </summary>
            <param name="formats">SQL formats (quoting, syntax style, etc). </param>
            <returns>SQL expression that represents the table</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetFromExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the full name of the table which is used in FROM clause.
            </summary>
            <param name="formats">SQL formats (quoting, syntax style, etc).</param>
            <returns>
            The expression which represents the table in FROM clause.
            It consists of table name + table alias
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.FullName">
            <summary>
            Gets the full name of the table.
            </summary>
            <returns>Full table name. It consists of table name + table alias for database tables or equals to table alias for virtual ones.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.Priority">
            <summary>
            Gets or sets the table's priority.
            The lower value the more close to the beginning of FROM clause this table will appear 
            </summary>
            <value>The priority of the table.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Table.ExtraCondition">
            <summary>
            Gets or sets the extra condition.
            </summary>
            <value>
            The SQL expression for extra condition. This condition will be added automatically into the generated SQL when this <see cref="T:Korzh.EasyQuery.Db.Table"/> object is used.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.CreateByClass(System.String)">
            <summary>
            Creates <see cref="T:Korzh.EasyQuery.Db.Table"/> object the by table class name (db or virtual).
            </summary>
            <param name="className">Name of the table class.</param>
            <returns></returns>
        </member>
        <member name="F:Korzh.EasyQuery.Db.Table.Params">
            <summary>
            The list of parameters associated with this table.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            When overriden in a derived class loads table properties from <see cref="T:System.Xml.XmlReader"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.ProcessAttribute(System.Xml.XmlReader)">
            <summary>
            Processes one attribute during XML reading.
            </summary>
            <param name="reader">An instance of XmlReader class.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetRank">
            <summary>
            Gets table's rank. It represents the number of links which come out from this table
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.LoadNodes(System.Xml.XmlReader)">
            <summary>
            Loads the sub-nodes of table's node.
            </summary>
            <param name="reader">An instance of XmlReader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves table properties to <see cref="T:System.Xml.XmlWriter"/> object. Calls <see cref="M:Korzh.EasyQuery.Db.Table.SaveAttributes(System.Xml.XmlWriter)"/>procedure to do the job.
            </summary>
            <param name="writer">An XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.SaveAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves table properties to <see cref="T:System.Xml.XmlWriter"/> object.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes table properties to <see cref="T:Newtonsoft.Json.JsonWriter"/> object. Calls <see cref="M:Korzh.EasyQuery.Db.Table.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)"/>procedure to do the job.
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes table properties to <see cref="T:Newtonsoft.Json.JsonWriter"/> object. Calls <see cref="M:Korzh.EasyQuery.Db.Table.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)"/>procedure to do the job (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes table's properties to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes table's properties to JSON .
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the table from JSON (asynchronous way)
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the table from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one table's property from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one table's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.SaveNodes(System.Xml.XmlWriter)">
            <summary>
            Saves the nodes to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetTableTag">
            <summary>
            Gets the table Tag (class): DB or virtual.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.System#IComparable{Korzh#EasyQuery#Db#Table}#CompareTo(Korzh.EasyQuery.Db.Table)">
            <summary>
            Compares the current table with another table alphabetically.
            </summary>
            <param name="tbl">The table.</param>
            <returns>-1 if this table's name is less than another's name, 0 - if equal, 1 - otherwise</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.CompareToTable(Korzh.EasyQuery.Db.Table)">
            <summary>
            Compares the current table with another table alphabetically.
            </summary>
            <param name="tbl">The table.</param>
            <returns>-1 if this table's name is less than another's name, 0 - if equal, 1 - otherwise</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.Table.GetTableName">
            <summary>
            Gets the name of the table.
            </summary>
            <returns>Table name for database tables empty string for other cases (e.g. for virtual table).</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableCategory">
            <summary>
            Represents a category of tables
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.TableCategory.Name">
            <summary>
            Gets the category name.
            </summary>
            <value>
            The category name.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategory.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableCategory"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategory.Equals(Korzh.EasyQuery.Db.TableCategory)">
            <summary>
            Equalses the specified other.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategory.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategory.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategory.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableCategoryList">
            <summary>
            Represents a list of table categories
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategoryList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableCategoryList"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategoryList.#ctor(System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Db.TableCategory})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.TableCategoryList"/> class.
            </summary>
            <param name="items">The items.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableCategoryList.FindByName(System.String)">
            <summary>
            Finds a category by its name.
            </summary>
            <param name="name">The name of category.</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.DbTable">
            <summary>
            Represents one table in <see cref="T:Korzh.EasyQuery.Db.DbModel"/> object which corresponds to some database table
            </summary>
            <remarks>
            Each table in database can have several representations in data model
            but only with different aliases
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DbTable"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.#ctor(Korzh.EasyQuery.Db.Table)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Db.DbTable"/> class by already existing object of <see cref="T:Korzh.EasyQuery.Db.Table"/> class 
            </summary>
            <param name="source">Original <see cref="T:Korzh.EasyQuery.Db.Table"/> object that will be copied</param>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTable.Name">
            <summary>
            Gets or sets the name of the table.
            </summary>
            <value>Name of the table</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTable.Hints">
            <summary>
            Gets or sets the hints of the table.
            </summary>
            <value>Comma-delimited list of table hints. For example: NOLOCK,ROWLOCK, etc.</value>
            <remarks>Used for MS SQL server tables.</remarks>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTable.IsQuoted">
            <summary>
            Gets or sets a value indicating whether name of this table should be quoted in SQL expressions.
            </summary>
            <value><c>true</c> if table name should be quoted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.NeedQuote(System.String)">
            <summary>
            Gets a value indicating whether string should be quoted
            </summary>
            <param name="s">The s.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetCalcAlias">
            <summary>
            Gets the calculated alias (used when the "alias" field is empty)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Db.DbTable.FullName">
            <summary>
            Gets the full name of the table.
            </summary>
            <returns>Full table name. Full name consists of table name + table alias</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetSqlName(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the full DB name that represents the table.
            </summary>
            <param name="formats">SQL formats (quoting, syntax style, etc). </param>
            <returns>Full DB name that represents the table ([DbName.SchemaName.]TableName</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression that represents the table in WHERE clause.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> (quoting, syntax style, etc).</param>
            <returns>SQL expression that represents the table</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetFromExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the full name of the table which is used in FROM clause.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> (quoting, syntax style, etc).</param>
            <returns>
            The expression which represents the table in FROM clause.
            It consists of table name + table alias
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.ProcessAttribute(System.Xml.XmlReader)">
            <summary>
            Processes one attribute during XML reading.
            </summary>
            <param name="reader">An instance of XmlReader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.SaveAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves table properties to <see cref="T:System.Xml.XmlWriter"/> object.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one table's property from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one table's property from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of DbTable object to JSON.
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of DbTable object to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetTableTag">
            <summary>
            Gets the table class (DB or virtual).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetTableName">
            <summary>
            Gets the name of the table.
            </summary>
            <returns>Table name for database tables empty string for other cases (e.g. for virtual table).</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.DbTable.GetRank">
            <summary>
            Gets table's rank. It represents the number of links which come out from this table and table's priority
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.VirtualTable">
            <summary>
            Represents a virtual table. 
            Virtual tables do not correpond to some table in database but are defined through some SQL SELECT statement instead.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:VirtualTable"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.VirtualTable.Expr">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expr.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.GetPrimalExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the "primal" table expression.
            Usually it's the name this table is referenced by in the DB.
            However, for a virtual table it's simply its expression.
            </summary>
            <param name="formats">The formats.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.GetSqlName(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the name that represents the table in SQL expressions.
            </summary>
            <param name="formats">SQL formats (quoting, syntax style, etc).</param>
            <returns>
            The name that represents the table in SQL expressions.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.GetSqlExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the SQL expression that represents the table in WHERE clause.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> (quoting, syntax style, etc).</param>
            <returns>SQL expression that represents the table</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.GetFromExpr(Korzh.EasyQuery.Db.DbQueryFormats)">
            <summary>
            Gets the full name of the table which is used in FROM clause.
            </summary>
            <param name="formats"><see cref="T:Korzh.EasyQuery.Db.DbQueryFormats"/> (quoting, syntax style, etc).</param>
            <returns>
            The expression which represents the table in FROM clause.
            It consists of table name + table alias
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.ProcessAttribute(System.Xml.XmlReader)">
            <summary>
            Processes one attribute during XML reading.
            </summary>
            <param name="reader">An instance of XmlReader object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.SaveAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves table properties to <see cref="T:System.Xml.XmlWriter"/>.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one table's property from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one table's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of VirtualTable object to JSON
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of VirtualTable object to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.VirtualTable.GetTableTag">
            <summary>
            Gets the table class (DB or virtual).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableList">
            <summary>
            Represents list of the <see cref="T:Korzh.EasyQuery.Db.Table"/> objects.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.FindByAlias(System.String)">
            <summary>
            Finds the <see cref="T:Korzh.EasyQuery.Db.Table"/> object by its alias.
            </summary>
            <param name="alias">The alias of the required <see cref="T:Korzh.EasyQuery.Db.Table"/> object.</param>
            <returns><see cref="T:Korzh.EasyQuery.Db.Table"/> object or null if <see cref="T:Korzh.EasyQuery.Db.Table"/> object with specified alias was not found. </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.FindByName(System.String)">
            <summary>
            Finds the <see cref="T:Korzh.EasyQuery.Db.Table"/> object by its name.
            </summary>
            <param name="name">The name of the required table.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.GetUniqueAlias(System.String)">
            <summary>
            Generates an unique <see cref="T:Korzh.EasyQuery.Db.Table"/> object alias by some base name
            </summary>
            <param name="baseName"></param>
            <returns>A string value that represents new unique <see cref="T:Korzh.EasyQuery.Db.Table"/> object alias</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.GetCommaText">
            <summary>
            Gets the string whcih contains comma separated list of tables
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.Add(Korzh.EasyQuery.Db.Table)">
            <summary>
            Adds the table
            </summary>
            <param name="table">The table that will be added to the list</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.AddIfNotExists(Korzh.EasyQuery.Db.Table)">
            <summary>
            Adds the table if there is no another table with the same alias in this list yet.
            </summary>
            <param name="table">The table that will be added to the list</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.AddRange(System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Db.Table},System.Boolean)">
            <summary>
            Adds the range of tables
            </summary>
            <param name="tables">The collection of tables to add.</param>
            <param name="skipExisting">If true, the tables that already exists will be skipped</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.SortAlphabetically">
            <summary>
            Sorts the list alphabetically.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableList.CopyFrom(Korzh.EasyQuery.Db.TableList)">
            <summary>
            Copies tables from another list.
            </summary>
            <param name="tables">A TableList object to copy from.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.UsedTableList">
            <summary>
            Represents a list of "used" tables. 
            The only difference with orginal TableList is that this class doesn't allow to insert already existing table and inserts tables in list according their priority
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.UsedTableList.InsertItem(System.Int32,Korzh.EasyQuery.Db.Table)">
            <summary>
            Inserts the item.
            </summary>
            <param name="index">The index.</param>
            <param name="item">The item.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Db.TableStore">
            <summary>
            Represetns storage of tables. 
            </summary>
            <remarks>
            Object of this class not only contains list of tables 
            but also remove information about the table from corresponding attributes when the table is deleted from the storage.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.#ctor(Korzh.EasyQuery.Db.DbModel)">
            <summary>
            Initializes a new instance of the <see cref="T:TablesStorage"/> class.
            </summary>
            <param name="model">The <see cref="T:Korzh.EasyQuery.Db.DbModel"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.Add(Korzh.EasyQuery.Db.Table)">
            <summary>
            Adds the table
            </summary>
            <param name="table">The table that will be added to the list</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection"/>.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of tables from JSON.
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of tables from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of tables to JSON.
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Db.TableStore.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of tables to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Db.Path">
            <summary>
            Represents list of tables which are linked to each other
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Path.StartPoint">
            <summary>
            Gets the start point (first table) of the path.
            </summary>
            <value> <see cref="T:Korzh.EasyQuery.Db.Table"/> object</value>
        </member>
        <member name="P:Korzh.EasyQuery.Db.Path.EndPoint">
            <summary>
            Gets the end point (the last table) in the path.
            </summary>
            <value><see cref="T:Korzh.EasyQuery.Db.Table"/>object.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Db.PathList">
            <summary>
            Represents list of paths.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Services.DbConnectionModelLoader">
            <summary>
            Represents a IModelLoader implementation which allows to load the model directly from a connection (using DB meta data)
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IModelLoader" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.DbConnectionModelLoader.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.DbConnectionModelLoader"/> class.
            </summary>
            <param name="connection">The connection object to build the model from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.DbConnectionModelLoader.#ctor(System.Data.Common.DbConnection,Korzh.EasyQuery.Db.DbConnectionLoaderOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.DbConnectionModelLoader" /> class.
            </summary>
            <param name="connection">The connection to build the model from.</param>
            <param name="options">Some options to tune up the model beeing built.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.DbConnectionModelLoader.LoadModelAsync(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Loads the model from the connection passed in the loader's constructor.
            NB: The model ID is not actually taking into account.
            </summary>
            <param name="model">The model.</param>
            <param name="modelId">The model identifier.</param>
            <returns><c>true</c> if the model has been loaded successfully. Otherwise - <c>false</c>.</returns>
            <exception cref="T:Korzh.EasyQuery.Services.ModelLoaderException">Data model type must be DbModel</exception>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyDbResultSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyDbResultSet.#ctor(Korzh.EasyQuery.Db.DbQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.GdtDbResultSet"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyDbResultSet.AddRow(System.Data.IDataReader)">
            <summary>
            / Adds a new row to the result set and fills its content from the data reader.
            </summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyQueryManagerSql">
            <summary>
            Represents an implementation of <see cref="T:Korzh.EasyQuery.Services.EasyQueryManager" />
            which generates SQL queries and can work with some relational DB directly.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManagerSql.DbCommandTuner">
            <summary>
            Gets or sets the function which is called before execution of some DbCommand.
            </summary>
            <value>The function which is called before DbCommand execution.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManagerSql.ColumnFilter">
            <summary>
            Gets or sets the function which is called before generating result set and fiters by columns.
            The function takes column index (in the original list of the query columns), 
            column name and column type (as they are returned after SQL execution), 
            and returns a boolean value that says if we need to use this column or not.
            </summary>
            <value>The function which is called before generating result set.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManagerSql.RowFilter">
            <summary>
            Gets or sets the function which is called before generating result set and fiters by rows.
            </summary>
            <value>The function which is called before generating result set.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.#ctor(System.IServiceProvider,Korzh.EasyQuery.Services.EasyQueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EasyQueryManagerSql"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.CreateModelCore(System.String)">
            <summary>
            Creates new DataModel object
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>A DataModel instance</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.CreateQueryCore(Korzh.EasyQuery.DataModel)">
            <summary>
            Creates new DbQuery object.
            </summary>
            <returns>DbQuery instance.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.CreateQueryFormatsCore">
            <summary>
            Creates a QueryFormats object. 
            The derived classes can override this method to return an object of DbQueryFormats or any other inherited class.
            </summary>
            <returns>An instance of QueryFormats or inherited class.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.BuildQuery(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Builds SQL statement by the DbQuery object. This methods calls QueryBuilder delegate to build SQL.
            </summary>
            <param name="options">A dynamic object which represents different options or any other additional parameters of SQL generation</param>
            <param name="addPaging">if set to <c>true</c> then we need to add paging commands to generated SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.ExecuteQueryCore(Newtonsoft.Json.Linq.JObject)">
            <summary>
            The actual implemenation of ExecuteQuery function.
            This method is overridden in EasyQueryManagerBase descendants like EasyQueryManagerSql or EasyQueryManagerLinq.
            </summary>
            <param name="options">Any additional options passed as JObject.</param>
            <returns>IEqResultSet.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManagerSql.ConnectionResolver">
            <summary>
            Gets or sets the connection resolver - a faunction that returs a connection object by model's ID.
            </summary>
            <value>The connection resolver.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetConnection(System.String)">
            <summary>
            Gets the DbConnection associated with this service. If connection is not defined yet - it wil be resolved using ConnectionResolver. 
            This method opens the connection if it's not opened yet.
            </summary>
            <exception cref="T:Korzh.EasyQuery.Services.EasyQueryManagerException">No connection</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetConnectionCore(System.String)">
            <summary>
            Returns the connection object. The default implementations just calls ConnectionResolved to get the connection.
            You can override this function in dervived class to implement your own behavior of resolving the connnection by the model ID.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>DbConnection.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetEmptyResultSet(System.Int32)">
            <summary>
            Gets any empty result set.
            </summary>
            <param name="resultFormat">The result format</param>
            <returns>IEqResultSet object with empty result set</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.CreateDbResultSet(System.Int32)">
            <summary>
            Creates result set based on format
            </summary>
            <param name="resultFormat">The result format</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.RetrieveResultSet(System.String,Korzh.EasyQuery.QueryBuilderResult,System.Int32)">
            <summary>
            Creates and returns a ResultSet object by SQL statement.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="qbr">The result of the query builder work.</param>
            <param name="resultFormat">The result format.</param>
            <returns>IEqResultSet object filled with data.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetDataExportSettings(System.String)">
            <summary>
            Gets the data export settings.
            </summary>
            <param name="format">The exporting format (not used in the current implementation).</param>
            <returns>IDataExportSettings.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetQueryBuilderCore(Korzh.EasyQuery.Query,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Returns the query builder. In this particular kind of EasyQueryManager it will be an instance of SqlQueryBuilder.
            This method also builds the query so you can read the result via GetResult method call.
            </summary>
            <param name="query">The query.</param>
            <param name="options">Some options.</param>
            <returns>IQueryBuilder.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetDataReader(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the data reader by query. This function is called from ExecuteQuery or ExportQueryResult.
            </summary>
            <param name="options">Any additional options passed as JObject instance.</param>
            <param name="addPaging">if set to <c>true</c> we need to add paging to the generated query.</param>
            <returns>IDataReader.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.PrepareDbCommand(System.String,Korzh.EasyQuery.QueryParamList)">
            <summary>
            Creates and prepares the database command.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="queryParams">The query parameters.</param>
            <returns>DbCommand.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.GetRecordCount">
            <summary>
            Gets the record count for the current query
            </summary>
            <returns>System.Int64.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerSql.RegisterDbGate``1">
            <summary>
            Registers <see cref="T:Korzh.EasyQuery.Db.DbGate"/> with current type
            </summary>
            <typeparam name="TDbGate"></typeparam>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb">
            <summary>
            Contains several extension methods for EasyQueryOptions 
            which allows to tune up the EasyQuery manager and middleware.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb.UseDbConnection``1(Korzh.EasyQuery.Services.EasyQueryOptions,System.String)">
            <summary>
            Registers the connection resolver for a particular connection type.
            </summary>
            <typeparam name="T">The type of the connection (e.g. SqlConnection)</typeparam>
            <param name="options">An instance of EasyQueryOptions.</param>
            <param name="connectionString">The connection string.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb.UseDbConnection(Korzh.EasyQuery.Services.EasyQueryOptions,System.Func{System.IServiceProvider,System.String,System.Data.Common.DbConnection})">
            <summary>
            Registers the database connection resolver.
            </summary>
            <param name="options"></param>
            <param name="resolver"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb.UseDbConnectionModelLoader(Korzh.EasyQuery.Services.EasyQueryOptions,System.Action{Korzh.EasyQuery.Db.DbConnectionLoaderOptions})">
            <summary>
            Register the model loader resolver which returns <see cref="T:Korzh.EasyQuery.Services.DbConnectionModelLoader" /> the database connection model loader.
            </summary>
            <param name="easyQueryOptions">An instance of EasyQueryOptions.</param>
            <param name="configurator">The configurator for options that passed to FillByDbGate procedure when we load our model from the DB meta-data</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb.UseDbCommandTuner``1(Korzh.EasyQuery.Services.EasyQueryOptions,System.Action{``0})">
            <summary>
            Register the DbCommand tuner - a function which allows to tune a DbCommand 
            before it's thrown for the execution. 
            For example, you can define a function which will increase the timeout for SQL commands.
            </summary>
            <typeparam name="T">The type of the DbCommand</typeparam>
            <param name="options">An instance of EasyQueryOptions.</param>
            <param name="tuner">The tuner procedure. It takes a DbCommand object as a parameter.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb.UseSqlFormats(Korzh.EasyQuery.Services.EasyQueryOptions,Korzh.EasyQuery.Db.FormatType,System.Action{Korzh.EasyQuery.Db.DbQueryFormats})">
            <summary>
            Set the formats for result SQL statements to some format type (e.g. MsSqlServer or MySQL)
            </summary>
            <param name="options">An instance of EasyQueryOptions.</param>
            <param name="formatType">Type of the format.</param>
            <param name="formatsTuner">The formats tuner - a procedure which allows to adjust formats.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptionsExtentionsDb.UseSqlFormats(Korzh.EasyQuery.Services.EasyQueryOptions,System.Action{Korzh.EasyQuery.Db.DbQueryFormats})">
            <summary>
            Adds the function which allows to tune up the SQL formats of generated queries.
            </summary>
            <param name="options">An instance of EasyQueryOptions.</param>
            <param name="formatsTuner">The formats tuner function.</param>
            <exception cref="T:System.ArgumentNullException">formatTuner</exception>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IDbResultSet">
            <summary>
            Represents an extension of IEqResultSet interface which also contains a function for adding a row.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IEqResultSet" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IEqResultSet" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDbResultSet.AddRow(System.Data.IDataReader)">
            <summary>
            Adds a new row and fills it from the data reader.
            </summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.GdtDbResultSet">
            <summary>
            Represents result set which can be easly convertend into Google's DataTable format
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtDbResultSet.#ctor(Korzh.EasyQuery.Db.DbQuery)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.GdtDbResultSet"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtDbResultSet.AddRow(System.Data.IDataReader)">
            <summary>
            / Adds a new row to the result set and fills its content from the data reader.
            </summary>
            <param name="dataReader">The data reader.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.SqlValueListResolverException">
            <summary>
            Represents errors that might occur during SqlValueListResolver's work. 
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.SqlValueListResolverException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.SqlValueListResolverException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.SqlValueListResolver">
            <summary>
            Represents a value editor which returns the list of values 
            retrieved from a database with some SQL SELECT statement.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IValueListResolver" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IValueListResolver" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.SqlValueListResolver.#ctor(System.Func{System.String,System.Data.Common.DbConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.SqlValueListResolver"/> class.
            </summary>
            <param name="connectionResolver">The connection resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.SqlValueListResolver.TryGetValues(Korzh.EasyQuery.ListValueEditor,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values by the value editor specified in the parameter.
            </summary>
            <param name="editor">The editor.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the list is returned successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.SqlValueListResolver.TryGetValues(Korzh.EasyQuery.Services.ListRequestOptions,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values by the value editor specified in the parameter.
            </summary>
            <param name="options">The options.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the list is returned successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.SqlValueListResolver.GetListBySql(System.String,System.String,Korzh.EasyQuery.Services.ListRequestOptions)">
            <summary>
            Executes the SQL statement, retrieve the result set and fills the list.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="sql">The SQL SELECT statement.</param>
            <param name="options">The options.</param>
            <returns>The result list as IEnumerable&lt;ListItem&gt; object.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EasyQueryManagerSqlResolver">
            <summary>
            This is an auxiliary class which implements <see cref="T:Korzh.EasyQuery.Services.IEasyQueryManagerResolver" /> interface 
            to register EasyQueryManagerSql during EasyQuery's intialization.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IEasyQueryManagerResolver" />
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EasyQueryManagerSqlResolver.GetManager(System.IServiceProvider,Korzh.EasyQuery.Services.EasyQueryOptions)">
            <summary>
            Returns an instance of EasyQueryManagerSql.
            </summary>
            <param name="services">The DI services.</param>
            <param name="options">The options.</param>
            <returns>EasyQueryManagerBase.</returns>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilderExtensionsSql">
            <summary>
            Contains the extension method for EasyQueryServicesBuilder. 
            This method is usually called during the registering of EasyQuery's services in DI.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilderExtensionsSql.UseSqlManager(Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilder)">
            <summary>
            Registers EasyQueryManagerSqlResolver in DI container.
            </summary>
            <param name="builder">The builder.</param>
            <returns>Microsoft.Extensions.DependencyInjection.EasyQueryServiceBuilder.</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilderExtensionsSql.RegisterDbGate``1(Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilder)">
            <summary>
            Registers some DbGate class.
            </summary>
            <param name="builder">The builder.</param>
            <returns>Microsoft.Extensions.DependencyInjection.EasyQueryServiceBuilder.</returns>
        </member>
    </members>
</doc>
