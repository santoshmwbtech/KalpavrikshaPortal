<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Korzh.EasyQuery</name>
    </assembly>
    <members>
        <member name="T:Korzh.EasyQuery.AggrFunction">
            <summary>
            Represents aggregate function
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFunction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.AggrFunction"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFunction.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.AggrFunction"/> class.
            </summary>
            <param name="id">The function name.</param>
            <param name="caption">The caption of the created aggregate function.</param>
            <param name="sqlExpr">The SQL expr assosiated with this function.</param>
            <param name="format">The display format of the function.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFunction.#ctor(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.AggrFunction"/> class.
            </summary>
            <param name="id">The function name.</param>
            <param name="caption">The caption of the created aggregate function.</param>
            <param name="sqlExpr">The SQL expr assosiated with this function.</param>
            <param name="format">The display format of the function.</param>
            <param name="isDefault">if set to <c>true</c> this Aggregate Function is a default one.</param>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.IsDefault">
            <summary>
            Gets a value indicating whether this function is default.
            </summary>
            <value>
              <c>true</c> if this function is a default one; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.ID">
            <summary>
            Gets the function ID (e.g. SUM or COUNT DISTINCT)
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.Caption">
            <summary>
            Gets or sets the caption of aggregate function.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.SqlExpr">
            <summary>
            Gets the function expression used in SQL expressions (e.g. SUM({arg}) or COUNT(DISTINCT {arg}) )
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.ParamCount">
            <summary>
            Gets the number of parameters which are taken by the aggregate function.
            </summary>
            <value>Number of parameters. For example: "SUM() takes one parameters (entity attribute)</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.DisplayFormat">
            <summary>
            Gets or sets the display format of aggregate function.
            </summary>
            <value>DisplayFormat string.</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.MainText">
            <summary>
            Gets the main part of function's DisplayFormat (this text will be shown as link in query columns panel)
            </summary>
            <value>The main text.</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFunction.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Korzh.EasyQuery.AggrFunction"/> is enabled.
            </summary>
            <value>
            	<see langword="true"/> if enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Korzh.EasyQuery.AggrFunctionList">
            <summary>
            Represents the list of <see cref="T:Korzh.EasyQuery.AggrFunction"/> objects
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFunctionList.FindByID(System.String)">
            <summary>
            Finds aggregate function by its ID.
            </summary>
            <param name="id">ID of the function.</param>
            <returns><see cref="T:Korzh.EasyQuery.AggrFunction"/> object if found, otherwise - null</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Column">
            <summary>
            Represents some column which will be queried.
            </summary> 
        </member>
        <member name="M:Korzh.EasyQuery.Column.#ctor(System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Column"/> class.
            </summary>
            <param name="caption">Column's caption.</param>
            <param name="sorting">Sorting direction.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Column.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Column"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Expr">
            <summary>
            Gets or sets the column expression.
            </summary>
            <value>The column expression.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Model">
            <summary>
            Gets or sets the reference to the data model where this column is defined.
            </summary>
            <value></value>
        </member>
        <member name="F:Korzh.EasyQuery.Column._caption">
            <summary>
            Column caption
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Column.sorting">
            <summary>
            Column sorting direction
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Column.parent">
            <summary>
            Parent columns storage.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Parent">
            <summary>
            Gets or sets the parent columns storage.
            </summary>
            <value>The parent storage of columns.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this column is enabled. Only enabled columns will participates in the query.
            </summary>
            <value><c>true</c> if this column is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.IsHidden">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Column"/> 
            is hidden - it will participate in the query but is not shown in the result set.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Column.IsDistinct">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Column"/> must be marked as DISTINCT in result SQL statement.
            </summary>
            <value><c>true</c> if this column must be marked as DISTINCT in result SQL statement; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Korzh.EasyQuery.Column._isDistinct">
            <summary>
            A field that indicates whether this <see cref="T:Column"/> must be marked as DISTINCT in result SQL statement.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Column.IsAggregate">
            <summary>
            Gets a value indicating whether this <see cref="T:Korzh.EasyQuery.Column"/> is aggregate.
            </summary>
            <value>
              <c>true</c> if aggregate; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.AllowSorting">
            <summary>
            Gets a value indicating whether this column can be sorted.
            </summary>
            <value><c>true</c> if this column can be sorted; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this columns marked as read only.
            </summary>
            <value>
              <c>true</c> if this is a read only column; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Index">
            <summary>
            Gets the index of column in column list.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Sorting">
            <summary>
            Gets or sets the sorting direction.
            </summary>
            <value>
            The sorting direction.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.SortIndex">
            <summary>
            Gets or sets the index of the column in the sorting list. Is used to load the column from XML.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.BaseAttr">
            <summary>
            Gets the entity attribute (EntityAttr object) this column is based on.
            </summary>
            <value>A EntityAttr object.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Column.GetHashCode">
            <summary>
            Returns hash code for column
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.RegenerateCaption">
            <summary>
            Regenerates the column caption.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Column.GetAttribute">
            <summary>
            Gets the attribute associated with this column
            </summary>
            <returns>EntityAttr object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.ExprChangeHandler(System.Object,System.EventArgs)">
            <summary>
            Expression's Change event handler.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Column.CheckForParams">
            <summary>
            Checks if the attribute associated with this column contains parameters and (if yes) - calls <see cref="M:Korzh.EasyQuery.Query.RefreshParams"/> method. 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Column.Params">
            <summary>
            The parameters associated with this column
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Column.ExprType">
            <summary>
            Gets or sets the tag (type) of the expression.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.SystemType">
            <summary>
            Gets the system type of this column.
            </summary>
            <value>The system type of the column.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Column.RecreateExpression(System.Int32)">
            <summary>
            Recreates the column expression.
            </summary>
            <param name="tag">The expression's tag.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Caption">
            <summary>
            Gets or sets the column caption.
            </summary>
            <value></value>
        </member>
        <member name="F:Korzh.EasyQuery.Column._alias">
            <summary>
            Column alias
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Column.Alias">
            <summary>
            Gets or Sets the column alias.
            </summary>
            <value>Column alias used in SQL statements</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.IsJustSorting">
            <summary>
            Gets a value indicating whether this column is just sorting one (will not be shown in query result).
            </summary>
            <value><c>true</c> if the this column is just sorting column; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.ParentQuery">
            <summary>
            Gets the parent query.
            </summary>
            <value>The parent query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Column.UserData">
            <summary>
            Gets or sets users data for the column
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Column.needAliasRegeneration">
            <summary>
            Indicates whether alias should be recreated
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Column.OnColumnChanged(System.Int32)">
            <summary>
            Raises the ColumnChanged event.
            </summary>
            <param name="part">What part of column was changed (0 - doesn't matter, 1 - expression, 2 - caption, 3 - sorting).</param>
        </member>
        <member name="M:Korzh.EasyQuery.Column.CheckDataModel">
            <summary>
            Checks the data model object. Generates an exception if Model property has null value.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Column.OnColumnChanging(System.Int32)">
            <summary>
            Called when the column is about to change.
            </summary>
            <param name="part">The part of column that is going to be changed.</param>
            <returns><c>true</c> if the change is accepted, <c>false</c> otherwise.</returns>
        </member>
        <member name="E:Korzh.EasyQuery.Column.ColumnChanged">
            <summary>
            Indicates that column was changed.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Column.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads <see cref="T:Korzh.EasyQuery.Column"/> definition from XML.
            </summary>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Column.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads column's properties from some <see cref="T:System.Collections.IDictionary"/> object. 
            It's used for deserialization from JSON
            </summary>
            <param name="colDict">An instance of <see cref="T:System.Collections.IDictionary"/> </param>
        </member>
        <member name="M:Korzh.EasyQuery.Column.SaveToJsonDict">
            <summary>
            Saves column properties into some <see cref="T:System.Collections.IDictionary"/> object. It's useful for JSON serialization
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Column.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves the column definition to XML.
            </summary>
            <param name="writer">XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Column.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads column from JSON reader. 
            Calls <see cref="M:Korzh.EasyQuery.Column.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)"/>
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads column from JSON reader (asynchronous way).
            Calls <see cref="M:Korzh.EasyQuery.Column.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)"/>
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads the property from JSON reader or skip unused.
            </summary>
            <param name="reader"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads the property from JSON reader or skip unused (asynchronous way).
            </summary>
            <param name="reader"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the column definition to JSON.
            Calls <see cref="M:Korzh.EasyQuery.Column.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)"/>.
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the column definition to JSON (asynchronous way).
            Calls <see cref="M:Korzh.EasyQuery.Column.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)"/>.
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves content of the column to JSON.
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Column.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves content of the column to JSON (asynchronous way).
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnList">
            <summary>
            Represents a list of columns.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnList"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnList.HasAggregate">
            <summary>
            Gets a value indicating whether this list has at least one aggregate column.
            </summary>
            <value>
            	<see langword="true"/> if this list has aggregate column; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnList.ContainsGhosts(Korzh.EasyQuery.Column@)">
            <summary>
            Gets a value indicating whether this instance contains columns with "ghost" attributes.
            </summary>
            <param name="column">The column that contains ghost attribute.</param>
            <returns><c>true</c> if this list contains "ghosts"; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnList.FindByAlias(System.String)">
            <summary>
            Finds the column by alias.
            </summary>
            <param name="alias">The alias.</param>
            <returns>Found Column object or null if there is no column with such alias</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnList.FindByCaption(System.String)">
            <summary>
            Finds the column by its caption.
            </summary>
            <param name="caption">The caption of necessary column.</param>
            <returns>Found Column object or null if there is no column with such caption</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnList.GetEnabledByIndex(System.Int32)">
            <summary>
            Gets the column by its index among all enabled columns.
            </summary>
            <param name="index">The index of the column among enabled columns only.</param>
            <returns>Column.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnList.FindByBaseAttrID(System.String)">
            <summary>
            Finds the column by its base attribute ID.
            </summary>
            <param name="attrID">The ID of necessary attribute.</param>
            <returns>Found Column object or null if there is no column with such ID</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnStore">
            <summary>
            Represents list of result columns.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ColumnStore.parentQuery">
            <summary>
            The reference to parent Query object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnStore.ParentQuery">
            <summary>
            Gets the parent query.
            </summary>
            <value>The parent query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnStore.SortedColumns">
            <summary>
            Gets the list of sorted columns.
            </summary>
            <value>The list of sorted columns.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.#ctor(Korzh.EasyQuery.Query,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnStore"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnStore.IsUpdating">
            <summary>
            Gets a value indicating whether this <see cref="T:Korzh.EasyQuery.ColumnList"/> is updating.
            </summary>
            <value>
            	<see langword="true"/> if updating; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnStore.IsJustSorting">
            <summary>
            Gets a value indicating whether this instance of the column store is used for "just sorting" columns.
            </summary>
            <value>
            	<c>true</c> if this instance of the column store is used for "just sorting" columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.CoreRefreshParams">
            <summary>
            Refreshes the list of query parameters by parameters associated with attributes used in query columns .
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.BeginUpdate">
            <summary>
            Turns on the "updating" state.
            Any changes occured during this state will not initiate <see cref="E:Korzh.EasyQuery.ColumnStore.ColumnsChanged"/> event 
            until <see cref="M:Korzh.EasyQuery.ColumnStore.EndUpdate"/> is called.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.EndUpdate">
            <summary>
            Turns the "updating" state off.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.IsColumnsChangeAccepted(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Column,System.Int32)">
            <summary>
            Calls ColumnsChanging event and return boolean value that indicates whether the change is accepted.
            </summary>
            <param name="what">What exactly is going to be changed.</param>
            <param name="column">Column object.</param>
            <param name="info">Index of the column which is going to be changed.</param>
            <returns><c>true</c> if the change is accepted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.OnColumnsChanging(Korzh.EasyQuery.ColumnsChangingEventArgs)">
            <summary>
            Raises the <see cref="E:ColumnsChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.ColumnsChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.OnColumnsChanged(Korzh.EasyQuery.ColumnsChangeEventArgs)">
            <summary>
            Raises the ColumnsChanged event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Korzh.EasyQuery.ColumnStore.ColumnsChanged">
            <summary>
            Occurs after column list has been changed.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.ColumnStore.ColumnsChanging">
            <summary>
            Occurs when columns list is going to be changed.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnStore.Model">
            <summary>
            Gets the DataModel object associated with this list
            </summary>
            <value>The DataModle object</value>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.Move(System.Int32,System.Int32)">
            <summary>
            Moves the specified index of the current.
            </summary>
            <param name="index">Index of the current.</param>
            <param name="newIndex">Index of the new.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.InsertItem(System.Int32,Korzh.EasyQuery.Column)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.ResyncSortingList(System.Boolean)">
            <summary>
            Resynchronizes the sorting list of columns correspondingly to their order.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the column list using <see cref="T:System.Xml.XmlReader"/> object.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.LoadFromJsonDict(System.Collections.IEnumerable)">
            <summary>
            Loads columns from IEnumerable object. Used for loading from JSON.
            </summary>
            <param name="colList">A list of IDictionary object when each object represents one column</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves the column list to XML.
            </summary>
            <param name="writer">XmlWriter object.</param>
            <param name="tagName">Name of the tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads the column list using <see cref="T:Newtonsoft.Json.JsonReader"/> object.
            </summary>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads the column list using <see cref="T:Newtonsoft.Json.JsonReader"/> object (asynchronous way).
            </summary>
            <param name="reader"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the column list using <see cref="T:Newtonsoft.Json.JsonWriter"/> object.
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnStore.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the column list using <see cref="T:Newtonsoft.Json.JsonWriter"/> object (asynchronous way). 
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.SortOrderChangedEventHandler">
            <summary>
            Represents delegate for Query.SortOrderChanged event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.SortOrderChangedEventArgs">
            <summary>
            Provides data for <see cref="E:Korzh.EasyQuery.Query.SortOrderChanged"/> event
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SortOrderChangedEventArgs.What">
            <summary>
            Gets or sets the attribute that shows what exactly was changed.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.SortOrderChangedEventArgs.Column">
            <summary>
            Gets or sets the column which was changed. Can be null in case of Total change
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.SortOrderChangedEventArgs.Info">
            <summary>
            Gets or sets the addtional information of changed column.
            This property can be used for different purposes.
            For example for ChangeType.Remove events it contains index of removed column
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.SortOrderChangedEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Column,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> class.
            </summary>
            <param name="what">What was changed.</param>
            <param name="column">Column object.</param>
            <param name="info">Index of changed column.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SortOrderChangedEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Column)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> class.
            </summary>
            <param name="what">What was changed.</param>
            <param name="column">Column object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SortOrderChangedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.SortOrderChangedEventArgs.SortOrderChanged">
            <summary>
            Occurs when the list of sorted columns was changed.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SortOrderChangedEventArgs.Default">
            <summary>
            Gets the default ConditionsChangedEventArgs object.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.SortOrderChangedEventArgs.OnSortOrderChanged(Korzh.EasyQuery.SortOrderChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SortOrderChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.SortOrderChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Korzh.EasyQuery.SortOrderChangedEventArgs.SyncColSortOrder">
            <summary>
            Gets or sets a value indicating whether the order of columns must be synchronized with their sorting order.
            </summary>
            <value><c>true</c> if the order of columns is synchronized with their sorting order; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Korzh.EasyQuery.SortedColumnList">
            <summary>
            Represents the list of sorted columns
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.#ctor(Korzh.EasyQuery.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:SortedColumnList"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="P:Korzh.EasyQuery.SortedColumnList.Updating">
            <summary>
            Gets a value indicating whether this <see cref="T:Korzh.EasyQuery.ColumnList"/> is updating.
            </summary>
            <value>
            	<see langword="true"/> if updating; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.BeginUpdate">
            <summary>
            Begins the update process.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.EndUpdate">
            <summary>
            Ends the update process.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.CoreSortOrderChanged(Korzh.EasyQuery.SortOrderChangedEventArgs)">
            <summary>
            Notify parent query about the changes in the list of sorted columns
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.SortOrderChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.Move(Korzh.EasyQuery.Column,System.Int32)">
            <summary>
            Moves the specified column.
            </summary>
            <param name="col">The Column object.</param>
            <param name="shift">The shift of current column index</param>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.Move(System.Int32,System.Int32)">
            <summary>
            Moves the specified index of the current.
            </summary>
            <param name="index">Index of the current.</param>
            <param name="newIndex">Index of the new.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.InsertItem(System.Int32,Korzh.EasyQuery.Column)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.Compare(Korzh.EasyQuery.Column,Korzh.EasyQuery.Column)">
            <summary>
            Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            Value Condition Less than zero <paramref name="x"/> is less than <paramref name="y"/>. Zero <paramref name="x"/> equals <paramref name="y"/>. Greater than zero <paramref name="x"/> is greater than <paramref name="y"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Neither <paramref name="x"/> nor <paramref name="y"/> implements the <see cref="T:System.IComparable"/> interface.-or- <paramref name="x"/> and <paramref name="y"/> are of different types and neither one can handle comparisons with the other. </exception>
        </member>
        <member name="M:Korzh.EasyQuery.SortedColumnList.Sort">
            <summary>
            Sorts the list of columns.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnsChangeEventArgs">
            <summary>
            Provides data for <see cref="E:Korzh.EasyQuery.Query.ColumnsChanged"/> event
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnsChangeEventArgs.What">
            <summary>
            Gets or sets the attribute that shows what exactly was changed.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnsChangeEventArgs.Column">
            <summary>
            Gets or sets the column which was changed. Can be null in case of Total change
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnsChangeEventArgs.Info">
            <summary>
            Gets or sets the addtional information of changed column.
            This property can be used for different purposes.
            For example for ChangeType.Remove events it contains index of removed column
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnsChangeEventArgs.Part">
            <summary>
            Gets or sets the value that indicates what part of the column was changed
            0 - we don't know, 1 - expression, 2 - caption, 3 - sorting
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnsChangeEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Column,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs" /> class.
            </summary>
            <param name="what">What was changed.</param>
            <param name="column">Column object.</param>
            <param name="info">Index of changed column.</param>
            <param name="part">The part of column which was changed.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnsChangeEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Column)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> class.
            </summary>
            <param name="what">What was changed.</param>
            <param name="column">Column object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnsChangeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnsChangeEventArgs.Default">
            <summary>
            Gets the default ConditionsChangedEventArgs object.
            </summary>
            <value></value>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnsChangingEventArgs">
            <summary>
            Provides data for <see cref="E:Korzh.EasyQuery.Query.ColumnsChanging"/> event
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ColumnsChangingEventArgs.Accepted">
            <summary>
            Gets or sets a value indicating whether the change represented by this event is accepted.
            </summary>
            <value><c>true</c> if the change is accepted; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ColumnsChangingEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Column,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ColumnsChangingEventArgs" /> class.
            </summary>
            <param name="what">What exactly is going to be changed.</param>
            <param name="column">Column object.</param>
            <param name="info">Index of the column which is going to be changed.</param>
            <param name="part">The part of column which is going to be changed.</param>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnsChangedEventHandler">
            <summary>
            Represents delegate for ColumnsChanged event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnsChangingEventHandler">
            <summary>
            Represents delegate for ColumnsChanging event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.CommonExtensions">
            <summary>
            Useful extension methods for EasyQuery's types
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.CommonExtensions.IntToDataType(System.Int32)">
            <summary>
            Returns DataType by its numeric representation.
            </summary>
            <param name="value">An integer value.</param>
            <returns>DataType.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CommonExtensions.ToInt(Korzh.EasyQuery.DataType)">
            <summary>
            Returns a numeric representation of a DataType value.
            </summary>
            <param name="dt">A DataType value.</param>
            <returns>Int32.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CommonExtensions.StrToDataType(System.String)">
            <summary>
            Returns DataType value by its string representation 
            </summary>
            <param name="typeName"></param>
        </member>
        <member name="M:Korzh.EasyQuery.CommonExtensions.IntToDataKind(System.Int32)">
            <summary>
            Returns DataKind by its numeric representation.
            </summary>
            <param name="value">An integer value.</param>
            <returns>DataKind.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CommonExtensions.ToInt(Korzh.EasyQuery.DataKind)">
            <summary>
            Returns a numeric representation of a DataKind value.
            </summary>
            <param name="dk">A DataKind value.</param>
            <returns>Int32.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.DataType">
            <summary>
            Represents the common types of the data. 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Unknown">
            <summary>Unknown type value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.String">
            <summary>String value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Byte">
            <summary>8-bit integer value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Word">
            <summary>16-bit integer value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Int32">
            <summary>32-bit integer value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Int64">
            <summary>64-bit integer value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Bool">
            <summary>Boolean value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Float">
            <summary>Floating-point numeric value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Currency">
            <summary>Money value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.BCD">
            <summary>Binary-coded decimal value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Date">
            <summary>Date value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Time">
            <summary>Time value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.DateTime">
            <summary>Date and time value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Autoinc">
            <summary>Autoincrement 32-bit integer value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Memo">
            <summary>MEMO value (text with unlimited length)</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Blob">
            <summary>BLOB value (any data with unlimited length)</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.FixedChar">
            <summary>Fixed character value</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Guid">
            <summary> The unique identifier</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Geometry">
            <summary>Any geometry data</summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataType.Geography">
            <summary>Any data that represents some geography objects</summary>
        </member>
        <member name="T:Korzh.EasyQuery.DataTypeList">
            <summary>
            Represents a list of DataType values.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataTypeList.InsertItem(System.Int32,Korzh.EasyQuery.DataType)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.DataTypeList.AddRange(System.Collections.Generic.IEnumerable{Korzh.EasyQuery.DataType})">
            <summary>
            Adds the type stored in an IEnumerable to the end of the list. 
            </summary>
            <param name="types">The list of types to add.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataTypeList.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.DataType})">
            <summary>
            Inserts the types stored in an IEnumerable object into the list starting from specified index. 
            </summary>
            <param name="index">The index.</param>
            <param name="types">The list of types to add.</param>
        </member>
        <member name="P:Korzh.EasyQuery.DataTypeList.CommaText">
            <summary>
            Gets or sets the text representation of type list delimited with the comma.
            </summary>
            <value>The text representation of type list delimited with the comma.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataTypeList.#ctor(Korzh.EasyQuery.DataType[])">
            <summary>
            Initializes a new instance of the <see cref="T:DataTypeList"/> class.
            </summary>
            <param name="typeList">The array which the list initialized by.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataTypeList.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DataTypeList"/> class.
            </summary>
            <param name="listStr">The list values represented by comma-separated string.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataTypeList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DataTypeList"/> class.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataTypeList.CommonDataTypes">
            <summary>
            The list which represents the most common data types
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataTypeList.RangeDataTypes">
            <summary>
            The list which represents all ranged data types (numeric and boolean)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataTypeList.IntegerDataTypes">
            <summary>
            The list which represents all integer-like data types (numeric and boolean)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataTypeList.StringDataTypes">
            <summary>
            The list which represents all string data types (numeric and boolean)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataTypeList.TimeDataTypes">
            <summary>
            The list which represents all string data types (numeric and boolean)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataTypeList.BoolDataTypes">
            <summary>
            The list which represents the most common data types
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ScalarExprOptions">
            <summary>
            Different options used during processing of scalar values
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ScalarExprOptions.Empty">
            <summary>
            Empty set of options
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ScalarExprOptions.CaseInsensative">
            <summary>
            We must apply Lower (or similar) function to result value to make any string comparision case-insensative
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ScalarExprOptions.Parameterized">
            <summary>
            All values will be converted into parameters
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ScalarExprOptions.Quoting">
            <summary>
            We need to consider quoting 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ScalarExprOptions.ProcessScalarMacros">
            <summary>
            For each found macro value we should run ProcessScalarMacro procedure 
            to format it properly according to the current settings
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ScalarExprOptions.Default">
            <summary>
            The default value
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.NoPathResolution">
            <summary>
            The values of this type will tell Query object how to
            resolve the situation when two tables does not have a path between them
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.NoPathResolution.ThrowException">
            <summary>
            Throw an exception
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.NoPathResolution.CartesianProduct">
            <summary>
            create SQL with Cartesian product of selected
            tables if there is no link between them;
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.NoPathResolution.FlexibleModel">
            <summary>
            shrink model automatically. When some table is
            selected - we show to the user only those tables which are linked with selected one.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.SqlSyntax">
            <summary>
            Represents types of SQL syntax.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SqlSyntax.SQL1">
            <summary> Old SQL standard also known as SQL-88</summary>
        </member>
        <member name="F:Korzh.EasyQuery.SqlSyntax.SQL2">
            <summary> More new SQL standard also known as SQL-92</summary>
        </member>
        <member name="F:Korzh.EasyQuery.SqlSyntax.Oracle">
            <summary> SQL syntax used in Oracle</summary>
        </member>
        <member name="F:Korzh.EasyQuery.SqlSyntax.EntitySQL">
            <summary> Entity SQL syntax</summary>
        </member>
        <member name="T:Korzh.EasyQuery.SortDirection">
            <summary>
            Represents sorting direction.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SortDirection.None">
            <summary>
            No sorting.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SortDirection.Ascending">
            <summary>
            Ascending order.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SortDirection.Descending">
            <summary>
            Descending order.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.DataKind">
            <summary>
            Represents expression kinds.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataKind.Scalar">
            <summary>The most simple (and most used) kind of expressions. 
            Represents one value of some type: one constant or one attribute (field).
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataKind.Const">
            The same as Scalar but represents only one constant value of some type.
        </member>
        <member name="F:Korzh.EasyQuery.DataKind.Attribute">
            The same as Scalar but represents only one attribute.
        </member>
        <member name="F:Korzh.EasyQuery.DataKind.List">
            <summary>Represents a list of scalar values. </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataKind.Query">
            <summary>Special expression kind which represents a sub query.</summary>
        </member>
        <member name="T:Korzh.EasyQuery.QueryTextFormats">
            <summary>
            Represents different formats for query text representation
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.QueryTextFormats.HtmlFormats">
            <summary>
            Represents different parameters of HTML formatting for query text representation
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.Expression">
            <summary>
            Gets or sets the expression formatting.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.Operator">
            <summary>
            Gets or sets the operator formatting.
            </summary>
            <value>The operator.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.Text">
            <summary>
            Gets or sets the text formatting.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.BoolOperatorRoot">
            <summary>
            Gets or sets the formatting of prefix root.
            </summary>
            <value>The prefix root.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.BoolOperator">
            <summary>
            Gets or sets the formatting of condition prefix.
            </summary>
            <value>The prefix.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.BracketOpen">
            <summary>
            Gets or sets the format of opening bracket.
            </summary>
            <value>Opening bracket format.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormats.BracketClose">
            <summary>
            Gets or sets the format of closing bracket.
            </summary>
            <value>Closing bracket format.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.UseMathSymbolsForOperators">
            <summary>
            Gets or sets a value indicating whether query should use mathematicak symbols for operator names in text representation.
            </summary>
            <value>
            	<c>true</c> if mathematical symbols for operators is used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.UseHtml">
            <summary>
            Gets or sets a value indicating whether Query will use HTML for text representation.
            </summary>
            <value><c>true</c> if HTML is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.HtmlFormatting">
            <summary>
            Gets the HTML formatting.
            </summary>
            <value>The HTML formatting.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.ShowEntityName">
            <summary>
            Gets or sets a value indicating whether entity attributes in textual representation of query contain entity name.
            </summary>
            <value><c>true</c> if attributes contain entity name; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.ShowRootCondition">
            <summary>
            Gets or sets a value indicating whether root condition should appear in textual representation of query.
            </summary>
            <value><c>true</c> if root condition should appear in textual representation; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryTextFormats.Default">
            <summary>
            Gets QueryTextFormats object with the default formats.
            </summary>
            <value>QueryTextFormats object with the default formats.</value>
        </member>
        <member name="T:Korzh.EasyQuery.IProgressIndicator">
            <summary>
            This interface is used to assign progress indicator for different time-consuming operations 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.IProgressIndicator.SetMinMax(System.Int32,System.Int32)">
            <summary>
            Sets the minimum and maximum values of progress indicator.
            </summary>
            <param name="min">The minimum.</param>
            <param name="max">The maximum.</param>
        </member>
        <member name="M:Korzh.EasyQuery.IProgressIndicator.SetPosition(System.Int32)">
            <summary>
            Moves the progress indicator to the specified position.
            </summary>
            <param name="pos">The number that indicates current position of progress.</param>
        </member>
        <member name="T:Korzh.EasyQuery.DisplayFormatParser">
            <summary>
            Represents a special class used for parsing operator display format values.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.DisplayFormatParser.TokenType">
            <summary>
            Represents type of the token.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DisplayFormatParser.TokenType.Text">
            <summary>
            The token contains just text.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DisplayFormatParser.TokenType.Operator">
            <summary>
            The token represents an operator.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DisplayFormatParser.TokenType.Expression">
            <summary>
            The token represents an expression.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DisplayFormatParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.DisplayFormatParser"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DisplayFormatParser.Start(System.String)">
            <summary>
            Starts the parsing of specified string.
            </summary>
            <param name="s">The source format string.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DisplayFormatParser.Next">
            <summary>
            Parse the source to the next token.
            </summary>
            <returns><see langword="true"/> if next token is found and <see langword="false"/> if we reached the end of the format string. </returns>
        </member>
        <member name="P:Korzh.EasyQuery.DisplayFormatParser.Token">
            <summary>
            Gets the token type.
            </summary>
            <value>The token type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DisplayFormatParser.ExprNum">
            <summary>
            Gets the numeric value of expression (if possible).
            </summary>
            <value>The numeric value of expression.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DisplayFormatParser.TokenText">
            <summary>
            Gets the text of the token.
            </summary>
            <value>The text of the token.</value>
        </member>
        <member name="T:Korzh.EasyQuery.NotEnoughModelInfo">
            <summary>
            Represents an exactpion that occurs on query building if the information from the data model is not enought to build a proper SQL 
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.NotEnoughModelInfo.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.NotEnoughModelInfo"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.NotEnoughModelInfo.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.NotEnoughModelInfo"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Korzh.EasyQuery.NotEnoughModelInfo.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.NotEnoughModelInfo"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Korzh.EasyQuery.QueryBuilderError">
            <summary>
            Represents any other error that occurs during the query building
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.QueryBuilderError.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryBuilderError"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryBuilderError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryBuilderError"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryBuilderError.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryBuilderError"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="T:Korzh.EasyQuery.BadJsonFormatException">
            <summary>
            Represents an exception which occurs during the reading of the model from JSON
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.BadJsonFormatException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.BadJsonFormatException"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Korzh.EasyQuery.BadJsonFormatException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.BadJsonFormatException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Korzh.EasyQuery.BadJsonFormatException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.BadJsonFormatException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Korzh.EasyQuery.JsonDict">
            <summary>
            A shorten form of Dictionary&lt;string, object&gt; type.
            It used for JSON serialization / deserialization
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.JsonDict.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.JsonDict"/> class and automatically adds a first key-value pair into it.
            </summary>
            <param name="firstKey">The first key.</param>
            <param name="firstValue">The first value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.JsonDict.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.JsonDict"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.IQueryFormats">
            <summary>
            Defines basic query formats functionality
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.IQueryFormats.CopyFrom(Korzh.EasyQuery.IQueryFormats)">
            <summary>
            Copies the formats from another formats object.
            </summary>
            <param name="source">The source formats object to copy from.</param>
        </member>
        <member name="P:Korzh.EasyQuery.IQueryFormats.UseTimezoneOffset">
            <summary>
            Gets or sets a value indicating whether query builder should use the timezone offset when generates date/time values.
            The timezone offeset is usually received from the client side.
            </summary>
            <value><c>true</c> if the timezone offset is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.IQueryFormats.UseUtcTime">
            <summary>
            Gets or sets a value indicating whether the query builder will use UTC time zone for all date/time values (like FirstDayOfYear and others).
            </summary>
            <value>
            	<see langword="true"/> whether the UTC time is used; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Korzh.EasyQuery.QueryFormats">
            <summary>
            Represents different formats of statements.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryFormats.quotedTypes">
            <summary>
            Represents list of data types that must be quoted in result SQL.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryFormats"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.CopyFrom(Korzh.EasyQuery.IQueryFormats)">
            <summary>
            Copies the formats from another formats object.
            </summary>
            <param name="source">The source formats object to copy from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.CopyFromCore(Korzh.EasyQuery.QueryFormats)">
            <summary>
            Copies all formats from some QueryFormats object.
            </summary>
            <param name="source">The source QueryFormats object.</param>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.MoneySuffix">
            <summary>
            Gets or sets the suffix for the values with "money" or "currency" types.
            </summary>
            <value>Empty string for most of database types. "M" for Entity SQL</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves formats to XML writer.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rootNodeName">Name of the root node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.SaveNodes(System.Xml.XmlWriter)">
            <summary>
            Saves the root nodes of the formats.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.SaveToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves QueryFormats to IDictionary&lt;string, object&gt; object.
            Used for serialization to JSON
            </summary>
            <param name="dict">The IDictionary&lt;string, object&gt; object to save formats to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads QueryFormats from the IDictionary&lt;string, object&gt; object.
            Used for deserialization from JSON
            </summary>
            <param name="dict">The IDictionary&lt;string, object&gt; object to load formats from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads QueryFormats from JSON.
            Calls <see cref="M:Korzh.EasyQuery.QueryFormats.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)"/> function.
            </summary>
            <param name="reader">The JSON reader.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Loads QueryFormats from JSON (asynchronous way). 
            Calls <see cref="M:Korzh.EasyQuery.QueryFormats.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)"/> function.
            </summary>
            <param name="reader">The JSON reader.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Loads a property of QueryFormats.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="propName">The property</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Loads a property of QueryFormats (asynchronous way). 
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="propName">The property</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves QueryFormats to JSON.
            Calls <see cref="M:Korzh.EasyQuery.QueryFormats.WriteContentToJson(Newtonsoft.Json.JsonWriter)"/> function.
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves QueryFormats to JSON (asynchronous way). 
            Calls <see cref="M:Korzh.EasyQuery.QueryFormats.WriteContentToJsonAsync(Newtonsoft.Json.JsonWriter)"/> function.
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.WriteContentToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the properties of QueryFormats to JSON.
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.WriteContentToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves the properties of QueryFormats to JSON (asynchronous way). 
            </summary>
            <param name="writer"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads formats from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.LoadNode(System.String,System.String)">
            <summary>
            Loads the root node of the <see cref="T:Korzh.EasyQuery.QueryFormats"/> object.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.IsQuotedType(Korzh.EasyQuery.DataType)">
            <summary>
            Determines whether the specified type must be quoted.
            </summary>
            <param name="type">The type being checked</param>
            <returns>
            	<see langword="true"/> if [is quoted type] [the specified type]; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.WildSymbol">
            <summary>
            Gets or sets the wildcard symbol used in LIKE SQL operator to match zero or more charcters(% by default).
            </summary>
            <value>The wildcard symbol for any number of characters.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.WildcardAny">
            <summary>
            Gets or sets the wild symbol used in LIKE SQL operator (% by default).
            </summary>
            <value>The wild symbol.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.WildcardSingle">
            <summary>
            Gets or sets the wildcard symbol used in LIKE SQL operator to match any single charcter (_ by default).
            </summary>
            <value>The wildcard symbol.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.EOL">
            <summary>
            Gets or sets the end-of-line symbol(s)
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryFormats.GetEolSymbol">
            <summary>
            Gets the string representation of end-of-line symbol(s)
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.QuoteBool">
            <summary>
            Gets or sets a value indicating whether currently used SQL syntax requires to quote the boolean values.
            </summary>
            <value>
            	<see langword="true"/> if boolean values should be quoted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.QuoteTime">
            <summary>
            Gets or sets a value indicating whether currently used SQL syntax requires to quote the date and time values.
            </summary>
            <value>
            	<see langword="true"/> if date and time values should be quoted; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.QuoteColumnAlias">
            <summary>
            Gets or sets a value indicating whether all columns aliases must be quotes in result SQL.
            </summary>
            <value><c>true</c> if all columns aliases must be quotes in result SQL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.OrderByStyle">
            <summary>
            Gets or sets the style of ORDER BY clause.
            </summary>
            <value>One of OrderByStyles value.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.DateFormat">
            <summary>
            Gets or sets the format of date constant values in generated SQL statements.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.TimeFormat">
            <summary>
            Gets or sets the format of time constant values used in generated SQL statements.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.DateTimeFormat">
            <summary>
            Gets or sets the format of date/time constant values in generated SQL statements.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.UseColumnAliases">
            <summary>
            Gets or sets the value that determine when column aliases must be used in result SQL.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.AlphaAlias">
            <summary>
            Gets or sets a value indicating whether column alias should have only "alpha" symbols.
            </summary>
            <value><c>true</c> if alias can contain only alpha symbols; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.FalseValue">
            <summary>
            Gets or sets the text used for "False" value in SQL expressions.
            </summary>
            <value>The text used for "False" value</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.TrueValue">
            <summary>
            Gets or sets the text used for "True" value in SQL expressions.
            </summary>
            <value>The text used for "True" value</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.EscapeSymbol">
            <summary>
            Gets or sets the escape symbol.
            </summary>
            <value>The escape symbol.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.LowerFuncName">
            <summary>
            Gets or sets the name of the LOWER function.
            </summary>
            <value>The name of the LOWER function.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.FilterMode">
            <summary>
            Gets or sets a value indicating whether we should generate the query for filter (e.g. without table names in field representations).
            </summary>
            <value><c>true</c> if we in filter mode; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.MaxIdentLen">
            <summary>
            Gets or sets a maximum length of identifiers (e.g. table or column aliases) in generated queries. 0 - means that this options is ignored
            </summary>
            <value>Maximum length of identifiers in generated queries</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.SupportPaging">
            <summary>
            Gets or sets a value indicating whether paging commands (like OFFSET/FETCH) are supported.
            </summary>
            <value><c>true</c> if paging commands are supported; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.UseUtcTime">
            <summary>
            Gets or sets a value indicating whether query builder should use UTC time when it works with date/time values.
            </summary>
            <value><c>true</c> if UTC time is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryFormats.UseTimezoneOffset">
            <summary>
            Gets or sets a value indicating whether query builder should use the timezone offset when generates date/time values.
            The timezone offeset is usually received from the client side.
            </summary>
            <value><c>true</c> if the timezone offset is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Korzh.EasyQuery.OrderByStyles">
            <summary>
            Represents the way fields appear in ORDER BY clause
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OrderByStyles.Numbers">
            <summary>
            Fields are represented by its number in SELECT clause
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OrderByStyles.Names">
            <summary>
            Fields are represented by its full name (e.g. ORDERS.SALEDATE)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OrderByStyles.Aliases">
            <summary>
            Field are represented by its alias
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EOLSymbol">
            <summary>
            Represents the symbol (or symbols) which are used to separate lines in generated SQL statements
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EOLSymbol.None">
            <summary>
            If this value is chosen the result SQL will be returna as one long string without breaking it on several lines
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EOLSymbol.CRLF">
            <summary>
            Carriage Return (\r) and Line Feed (\n) symbol combination. Usual end of line in MS Windows world.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EOLSymbol.LF">
            <summary>
            Line Feed (\n) symbol. Usual end of line in Unix world.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EOLSymbol.CR">
            <summary>
            Carriage Return (\r). Usual end of line in Mac world.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ColumnAliasesUsage">
            <summary>
            Represents the conditions when the result SQL should include column aliases.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ColumnAliasesUsage.Never">
            <summary>
            Never use column aliases
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ColumnAliasesUsage.IfNecessary">
            <summary>
            Use column aliases for calculated columns or columns with aggregate functions
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ColumnAliasesUsage.Always">
            <summary>
            Always use column aliases
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.StringExtensions">
            <summary>
            Useful extension methods for strings
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.StringExtensions.CompareToCI(System.String,System.String)">
            <summary>
            Compares two strings case-insatively .
            </summary>
            <param name="s1">First string</param>
            <param name="s2">Second string</param>
            <returns><c>true</c> Negative value if s1 &lt; s2, 0 - if sq1 == s2 and positive number if s1 &gt; s2<c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.StringExtensions.SplitBy(System.String,System.Char,System.String@,System.String@)">
            <summary>
            Split the string on 2 parts by some separator.
            </summary>
            <param name="s">The string.</param>
            <param name="sep">The separator.</param>
            <param name="key">The key (first part).</param>
            <param name="val">The value (second part).</param>
            <returns><c>true</c> if the string was splitted successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.StringExtensions.GetSecondPart(System.String,System.Char)">
            <summary>
            Gets the second part of the string divided by separator. If the separator is not included - the whole string is returned.
            </summary>
            <param name="s">The input string.</param>
            <param name="sep">The separator.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.StringExtensions.ToInt(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number to its 32-bit signed integer equivalent.
            This method does not throw an exception. Instead - it returns some pre-defined value for unsuccessful conversions.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="defValue">A default value (if conversion was unsuccessful).</param>
            <returns>A 32-bit signed integer equivalent to the number contained in s.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.StringExtensions.ToLong(System.String,System.Int64)">
            <summary>
            Converts the string representation of a number to its 64-bit signed integer equivalent.
            This method does not throw an exception. Instead - it returns some pre-defined value for unsuccessful conversions.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="defValue">A default value (if conversion was unsuccessful).</param>
            <returns>A 64-bit signed integer equivalent to the number contained in s.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.StringExtensions.RemoveSymbols(System.String,System.Char[])">
            <summary>
            Removes the characters specified in the `symbolsToRemove` parameter and returns the modified string.
            </summary>
            <param name="str">A string to remove symbols from.</param>
            <param name="symbolsToRemove">An array of symbols to remove.</param>
            <returns>The original string without specified symbols</returns>
        </member>
        <member name="T:Korzh.EasyQuery.StringTokenizer">
            <summary>
            This class allows an application to break a string into tokens.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.StringTokenizer.#ctor(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringTokenizer"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="separators">The separators.</param>
            <param name="spaces">The spaces.</param>
        </member>
        <member name="M:Korzh.EasyQuery.StringTokenizer.#ctor(System.Text.StringBuilder,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringTokenizer"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="separators">The separators.</param>
        </member>
        <member name="M:Korzh.EasyQuery.StringTokenizer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:StringTokenizer"/> class.
            </summary>
            <param name="s">The s.</param>
        </member>
        <member name="P:Korzh.EasyQuery.StringTokenizer.ProcessAIdents">
            <summary>
            Gets or sets a value indicating whether the tokenizer should recognize the identifiers placed in [] brackets.
            </summary>
            <value><c>true</c> if such identifiers should be recognized; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.StringTokenizer.TokType">
            <summary>
            Gets the current token type.
            </summary>
            <value>
            A TokenType enum value
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.StringTokenizer.LastBreak">
            <summary>
            Returns the type of the last scan stop. It can be either space or separator.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.StringTokenizer.Position">
            <summary>
            Returns current Position in the scanned string.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.StringTokenizer.TokenStart">
            <summary>
            Returns start position of the current token.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.StringTokenizer.FirstToken">
            <summary>
            Get first token.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.StringTokenizer.NextToken">
            <summary>
            Returns next token.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.StringTokenizer.FullToken">
            <summary>
            Gets the full token string including quotes, brackets, etc.
            </summary>
            <value>The full token.</value>
        </member>
        <member name="T:Korzh.EasyQuery.StringTokenizer.TokenType">
            <summary>
            Represents the types of tokens.  Used in <see cref="T:Korzh.EasyQuery.StringTokenizer"/> class
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.StringTokenizer.TokenType.Space">
            <summary>
            Space. It's not actually the type of a token but it's used for LastBreak property of <see cref="T:Korzh.EasyQuery.StringTokenizer"/> class
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.StringTokenizer.TokenType.Separator">
            <summary>
            Separator
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.StringTokenizer.TokenType.Identifier">
            <summary>
            Word
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.StringTokenizer.TokenType.CString">
            <summary>
            C-style string (some text placed in double quotes)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.StringTokenizer.TokenType.PascalString">
            <summary>
            Pascal-style string (some text placed in single quotes)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.StringTokenizer.TokenType.AIdent">
            <summary>
            Access SQL identifier (some text placed in [ ] brackets)
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.TextResources">
            <summary>
            Manages texts for all EasyQuery Controls visual objects
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.GetTexts(System.String)">
            <summary>
            Gets current <see cref="T:Korzh.Utils.TextStorage"/> object that contains textual resources for this assembly.
            </summary>
            <returns>An instance of <see cref="T:Korzh.Utils.TextStorage"/> class</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.LoadFromResources(System.Resources.ResourceManager)">
            <summary>
            Loads texts from resources into the default TextStorage.
            </summary>
            <param name="resManager">An instance of <see cref="T:System.Resources.ResourceManager"/> class.</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.LoadFromFile(System.String,Korzh.Utils.TextStorage)">
            <summary>
            Loads the resources from .properties file into the default TextStorage object
            </summary>
            <remarks>
            Each line in such file must contain the key and the value separated by "=" symbol (e.g. SHello=Hello world)
            </remarks>
            <param name="path">The path.</param>
            <param name="storage">The text storage to load file into. If null - we use the default storage</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.LoadFromFileForCulture(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Loads the resources from .properties file into the default TextStorage object. The name of the .properties file is based on the culture for current thread.
            </summary>
            <param name="baseFileName">The base file name (without extention and locale suffix.</param>
            <param name="cultureInfo">The culture info. If null - we take the current thread culture</param>
            <param name="fileExt">The extention of the file (by default its ".properties").</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads resources from a stream into the default TextStorage object
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.Get(System.String)">
            <summary>
            Gets a resource string by its code.
            </summary>
            <param name="code">The code of the string.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.Put(System.String,System.String)">
            <summary>
            Sets the value of resource string by its code.
            </summary>
            <param name="code">The code.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextResources.ReloadNativeResources(System.String)">
            <summary>
            Reloads the resources for specified storage ID. If the ID is not indicated - load the resource for default TextStorage object
            </summary>
            <param name="storageId">The storage id.</param>
        </member>
        <member name="P:Korzh.EasyQuery.License.Key">
            <summary>
            The license key
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Utils">
            <summary>
            Represents different type conversion functions and other useful procedures
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GenerateId(System.String)">
            <summary>
            Generates Id with prefix.
            </summary>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.ComposeKey(System.String,System.String)">
            <summary>
            Composes the key (for attributes, entities, etc).
            Returns "parent.key" if both parent and key are not empty/null
            </summary>
            <param name="parent">The parent.</param>
            <param name="child">The child.</param>
            <returns>System.String.</returns>
            <exception cref="T:System.ArgumentNullException">Parent and child are both null</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetCurrentCulture">
            <summary>
            Returns current culture
            </summary>
            <returns>CultureInfo object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetCurrentUICulture">
            <summary>
            Returns current UI culture
            </summary>
            <returns>CultureInfo object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.ContainsNonAscii(System.String)">
            <summary>
            Checks string for inclusion of non-ASCII symbols.
            </summary>
            <param name="s">String to check for non-ASCII symbols</param>
            <returns><c>true</c> if the string contains non-ASCII symbols; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetDataTypeBySystemType(System.Type)">
            <summary>
            Gets the type of the data type by system type.
            </summary>
            <param name="systemType">Type of the system type.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetSystemTypeByDataType(Korzh.EasyQuery.DataType)">
            <summary>
            Gets the system type by data type.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetSystemTypeByDataType(Korzh.EasyQuery.DataType,System.Type)">
            <summary>
            Gets the system type by data type.
            </summary>
            <param name="dtype">The DataType object.</param>
            <param name="defaultType">The default type (returned if dtype is unknown.</param>
            <returns>A System.Type object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetEnumValues(System.Type)">
            <summary>
            Gets all values of the enum.
            </summary>
            <param name="oEnumType">Type of the enum.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.StrToIdentifier(System.String)">
            <summary>
            Converts any string to an identifier (changes all symbols like '.' ';' '?' etc to '_')
            </summary>
            <param name="s">The source string.</param>
            <returns>The result identifier</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.DataKindByName(System.String)">
            <summary>
            Gets the DataKind value by its text representation.
            </summary>
            <param name="kindName">Text representation of DataKind value.</param>
            <returns>DataKind value.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetInternalFormatProvider">
            <summary>
            Gets the internal format provider.
            This provider defines the format used to store date/time and numeric values internally and it saved queries
            </summary>
            <value>The internal format provider.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Utils.InternalDateFormat">
            <summary>
            Gets the internal date format (yyyy-MM-dd).
            </summary>
            <value>The internal date format.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Utils.InternalTimeFormat">
            <summary>
            Gets the internal time format (HH:mm:ss).
            </summary>
            <value>The internal time format.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetDateTimeInternalFormat(Korzh.EasyQuery.DataType,System.Boolean)">
            <summary>
            Gets the format used for internal textual representation of date/time values.
            EasyQuery uses "yyyy-MM-dd" format.
            </summary>
            <param name="dataType">Type of the data. Can be Date, DateTime or Time.</param>
            <param name="shortTime">if set to <c>true</c> then we need short version of time part.</param>
            <returns>System.String.</returns>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.OldFormatToDateTime(System.String)">
            <summary>
            Convert string representation in old format to DateTime value.
            </summary>
            <param name="val">The val.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.InternalFormatToDateTime(System.String,Korzh.EasyQuery.DataType)">
            <summary>
            Convert string representation in internal format to DateTime value.
            </summary>
            <param name="val">The val.</param>
            <param name="dataType">Type of the data. Can be Date, DateTime or Time.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.DateTimeToInternalFormat(System.DateTime,Korzh.EasyQuery.DataType)">
            <summary>
            Converts DateTime value to its string representation in internal format (yyyy-MM-dd).
            </summary>
            <param name="dt">A DateTime value.</param>
            <param name="dataType">Type of the data. Can be Date, DateTime or Time.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.DateTimeToUserFormat(System.DateTime,Korzh.EasyQuery.DataType)">
            <summary>
            Converts DateTime value to its string representation in current system format.
            </summary>
            <param name="dt">A DateTime value.</param>
            <param name="dataType">Type of the data. Can be Date, DateTime or Time.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.IsStrNullOrEmpty(System.String)">
            <summary>
            Determines whether specified string is null or empty.
            </summary>
            <param name="s">A string object.</param>
            <returns>
            	<c>true</c> if string passed parameter is null or empty; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.TextEq(System.String,System.String)">
            <summary>
            Provides case-insensitive string comparision
            </summary>
            <param name="s1">First string to compare.</param>
            <param name="s2">Second string to compare.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.SafeParseInt(System.String,System.Int32)">
            <summary>
            Converts the string representation of a number to its 32-bit signed integer equivalent.
            This method does not throw an exception. Instead - it returns some pre-defined value for unsuccessful conversions.
            </summary>
            <param name="s">A string containing a number to convert.</param>
            <param name="defValue">A default value (if conversion was unsuccessful).</param>
            <returns>A 32-bit signed integer equivalent to the number contained in s.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.SafeParseBool(System.String,System.Boolean)">
            <summary>
            Converts the string representation of a boolean value.
            This method does not throw an exception. Instead - it returns some pre-defined value for unsuccessful conversions.
            </summary>
            <param name="value"></param>
            <param name="defValue">A default value (if conversion was unsuccessful).</param>
            <returns>A boolean value (true or false)</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetElementContentAsString(System.Xml.XmlReader)">
            <summary>
            Reads the content of current XML element (as string)
            </summary>
            <param name="reader"></param>
            <remarks>Instead of similar method from XmlReader class this function points on the end element tag (not past it)</remarks>
            <returns>The string object which represents the content of XML element</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.MoveToAttribute(System.Xml.XmlReader,System.String)">
            <summary>
            Moves current position of XmlReader into specified attribute.
            </summary>
            <param name="reader">The XmlReader object.</param>
            <param name="attrName">Attribute's name.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.AreCompatibleTypes(Korzh.EasyQuery.DataType,Korzh.EasyQuery.DataType)">
            <summary>
            Returns true if type1 can be converted to type2.
            </summary>
            <param name="type1">Type to convert from.</param>
            <param name="type2">Type to convert to.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.FormatDateTimeValue(System.String,System.String,Korzh.EasyQuery.DataType,System.Int32)">
            <summary>
            Converts the date/time passed in internal format 
            used in EasyQuery library (yyyy-MM-dd HH:mm:ss by default) 
            to some other date/time format
            </summary>
            <param name="val">The date/time value in internal format.</param>
            <param name="format">The format we need to get this date/time value in result.</param>
            <param name="dataType">Type of the data (DateTime, Date or Time).</param>
            <param name="timezoneOffset">The timezone offset.</param>
            <returns>A string which represents the original value in the specified format.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetSpecialDateValueEx(Korzh.EasyQuery.SpecialDateTime,System.Boolean,Korzh.EasyQuery.DataType@)">
            <summary>
            Gets the value of some special date (like Today or FirstDayOfYear) by its enum definition.
            </summary>
            <param name="sdt">The value of SpecialDateTime enum which represents necessary date/time value.</param>
            <param name="utc">if set to <c>true</c> then we need the date in UTC.</param>
            <param name="dt">The data type of the returned value (DateTime, Date or Time).</param>
            <returns>The DateTime value.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetSpecialDateValue(Korzh.EasyQuery.SpecialDateTime,System.Boolean)">
            <summary>
            Gets the value of some special date (like Today or FirstDayOfYear) by its enum definition.
            </summary>
            <param name="sdt">The value of SpecialDateTime enum which represents necessary date/time value.</param>
            <param name="utc">if set to <c>true</c> then we need the date in UTC.</param>
            <returns>The DateTime value.</returns>
        </member>
        <member name="F:Korzh.EasyQuery.Utils.MacroRegex">
            <summary>
            The Regex object which matches a macro value.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.MatchMacro(System.String,System.String@)">
            <summary>
            Matches the macro in the input string.
            Returns the name of the macro in "out" parameter if the match was successful
            </summary>
            <param name="s">The s.</param>
            <param name="macroName">Name of the macro.</param>
            <returns><c>true</c> if the matach was successful, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetSpecialDateByNameEx(System.String,System.Boolean,Korzh.EasyQuery.DataType@)">
            <summary>
            Gets the actual date value by its macro name (like "Today", "FirstDayOfMonth", etc).
            </summary>
            <param name="name">The macro name.</param>
            <param name="utc">if set to <c>true</c> the function returns an UTC date.</param>
            <param name="dt">The data type (either DateTime, Date or Time).</param>
            <returns>A DateTime value.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">name - Wrong macro name: " + name</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.GetSpecialDateByName(System.String,System.Boolean)">
            <summary>
            Gets the actual date value by its macro name (like "Today", "FirstDayOfMonth", etc).
            </summary>
            <param name="name">The macro name.</param>
            <param name="utc">if set to <c>true</c> the function returns an UTC date.</param>
            <returns>A DateTime value.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Utils.TryGetSpecialDate(System.String,System.Boolean,System.DateTime@,Korzh.EasyQuery.DataType@)">
            <summary>
            Gets the actual date value by its macro name (like "Today", "FirstDayOfMonth", etc).
            This function returns false if the macro name is not recoginized.
            </summary>
            <param name="macroName">The name of the macro.</param>
            <param name="useUtcTime">if set to <c>true</c> then we need UTC time.</param>
            <param name="dateVal">The result date/time value.</param>
            <param name="dt">The data type (DateTime, Date or Time).</param>
            <returns><c>true</c> if the macro name is correct and the function returns some date/time value in the "out" parameter, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.SpecialDateTime">
            <summary>
            Represents some predefined "special" date/time values
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.Today">
            <summary>
            Represents the current date
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.Yesterday">
            <summary>
            Represents the yesterday date
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.Tomorrow">
            <summary>
            Represents the tomorrow date
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfWeek">
            <summary>
            Represents the first day of the current week
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfNextWeek">
            <summary>
            Represents the first day of the next week
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfPrevWeek">
            <summary>
            Represents the first day of the previous week
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfMonth">
            <summary>
            Represents the first day of the current month
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfPrevMonth">
            <summary>
            Represents the first day of the previous month
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfNextMonth">
            <summary>
            Represents the first day of the next month
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.LastDayOfMonth">
            <summary>
            Represents the last day of the current month
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfYear">
            <summary>
            Represents the first day of the current year
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfNextYear">
            <summary>
            Represents the first day of the next year
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.FirstDayOfPrevYear">
            <summary>
            Represents the first day of the last year
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.Now">
            <summary>
            Represents the current time
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.HourStart">
            <summary>
            Represents zero minute and second of the current hour
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.Midnight">
            <summary>
            Represents the midnight of the current day
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.SpecialDateTime.Noon">
            <summary>
            Represents the noon of the current day
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ConditionTag">
            <summary>
            Represents a type of condition. 
            Current we have 2 possible types: a simple condition or a a group of conditions
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ConditionTag.Unknown">
            <summary>
            An unknown type of condition (just in case)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ConditionTag.Simple">
            <summary>
            A simple condition or a predicate (e.g. SomeField > SomeValue)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ConditionTag.Group">
            <summary>
            A group of conditions - several predicates connected by AND or OR
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Condition">
            <summary>
            Represents one condition in the query. 
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Condition.LinkType">
            <summary>
            Represents type of linking of conditions in group
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.LinkType.None">
            <summary>
            None of the conditions must be truth (all must be false). 
            In SQL it will look like: <code>NOT (Condition1 OR Condition2 OR ...)</code>
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.LinkType.Any">
            <summary>At least one condition must be truth. In SQL they are connected by OR operator.</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.LinkType.NotAll">
            <summary>
            Not all conditions must be truth (at least one must false). 
            In SQL it will look like: <code>NOT(Condition1 AND Condition2 AND ...) </code>
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.LinkType.All">
            <summary>All conditions must be truth, in result SQL they are connected by AND operator</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.LinkType.Auto">
            <summary>
            This the default value for AddConditionGroup method.
            It automatically sets the type of linking depending on the type of the parent
            ("Any" if the parent has "All" and vice versa)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.StrToLinkType(System.String)">
            <summary>
            Convert string representation to LinkType value.
            </summary>
            <param name="s">String that represents linking type</param>
            <returns>LinkType value that represents the string.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.LinkTypeToStr(Korzh.EasyQuery.Condition.LinkType)">
            <summary>
            Converts LinkType value to its string representation
            </summary>
            <param name="lt">The LinkType object.</param>
            <returns></returns>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.GroupTag">
            <summary>
            The tag (condition class) which represents a group of conditions
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.SimpleConditionTag">
            <summary>
            The tag (condition class) which represents a simple condition
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.#ctor(Korzh.EasyQuery.Query,Korzh.EasyQuery.ConditionTag)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Condition" /> class.
            </summary>
            <param name="query">Query this condition belongs to</param>
            <param name="tag">The type of the new condtion (Simple, Group, etc)</param>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Parent">
            <summary>
            Gets the parent <see cref="T:Korzh.EasyQuery.Condition"/> which this condition is included to.
            </summary>
            <value>A parent condition object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Query">
            <summary>
            Gets the query which this condition belongs to.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SetQuery(Korzh.EasyQuery.Query)">
            <summary>
            Sets the query.
            </summary>
            <param name="newQuery">The new query.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Operator">
            <summary>
            Gets or sets the operator used in this condition.
            </summary>
            <value>An Operator object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Expressions">
            <summary>
            Gets the list of all expressions used in condition.
            First expression in the list is base expression.
            </summary>
            <value>A ExprList object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsGroup">
            <summary>
            Gets a value indicating whether this instance is a group of conditions
            </summary>
            <value><c>true</c> if this instance is a group; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Conditions">
            <summary>
            Gets the conditions.
            </summary>
            <value>List of conditions.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Linking">
            <summary>
            Gets or sets the linking type.
            </summary>
            <value>Linking type of conditions contained in this condition group.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Id">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>The ID of condition.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Level">
            <summary>
            Gets the level of this condition in query. 
            </summary>
            <value>Iteger value that represents the level. 
            The higher value is 0 that represents the root query condition.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.Index">
            <summary>
            Gets the index in the parent's list.
            </summary>
            <value>Integer value that represents the index</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Korzh.EasyQuery.Condition"/> is enabled.
            </summary>
            <value>
            	<see langword="true"/> if enabled; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SetEnabled(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Sets the Enabled property.
            </summary>
            <param name="newValue">new value of Enabled property.</param>
            <param name="updateChildren">if set to <c>true</c> the the children will be updated accordingly.</param>
            <param name="silent">if set to <c>true</c> then Changed event is not fired.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsReadOnly">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Korzh.EasyQuery.Condition"/> is read-only.
            </summary>
            <value>
            	<see langword="true"/> if read-only; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SetReadOnly(System.Boolean,System.Boolean)">
            <summary>
            Sets the ReadOnly property.
            </summary>
            <param name="newValue">new value of ReadOnly property.</param>
            <param name="silent">if set to <c>true</c> then Changed event is not fired.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsParameterized">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Korzh.EasyQuery.Condition"/> is parameterized.
            </summary>
            <value>
            	<see langword="true"/> if parameterized; otherwise, <see langword="false"/>.
            </value>        
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsInJoin">
            <summary>
            Gets a value indicating whether this condition must be placed into JOIN clause in result SQL.
            </summary>
            <value><c>true</c> if this condition must be placed into JOIN clause in result SQL; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsHaving">
            <summary>
            Gets a value indicating whether this condition must be placed into HAVING clause in result SQL.
            </summary>
            <value><c>true</c> if this condition must be placed into HAVING clause in result SQL; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetHaving">
            <summary>
            Gets a value indicating whether this condition must be placed into HAVING clause in result SQL.
            Must be overriden in the inherited classes
            </summary>
            <returns><c>true</c> if this condition must be placed into HAVING clause in result SQL; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:Korzh.EasyQuery.Condition._isSilent">
            <summary>
            Gets a value indicating whether this query is silent - so no event will be raised on change.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.BaseAttr">
            <summary>
            Gets the base entity attribute for this condition.
            </summary>
            <value>The base attr.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetBaseAttr">
            <summary>
            Gets the base entity attribute for this condition.
            </summary>
            <returns>An EntityAttr object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.BeginUpdate">
            <summary>
            Starts the update process.
            OnConditionsChanged event of corresponding Query object is not raised while condition is in update state
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.EndUpdate">
            <summary>
            Ends the update process. 
            Raises ConditionsChange event if some modification(s) was(were) made during update process.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.Refresh">
            <summary>
            Refreshes this instance.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.Changed(Korzh.EasyQuery.Condition,Korzh.EasyQuery.ChangeType,System.Int32)">
            <summary>
            Raises ConditionsChange event in parent object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.UseDefaultValues">
            <summary>
            Gets a value indicating whether condition expressions should get default values after creation 
            </summary>
            <value>
              <c>true</c> if condition expressions get default values after creation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.FullNum">
            <summary>
            Gets the full number of condition.
            </summary>
            <value>The full number of condition.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.MoveDown">
            <summary>
            Moves the condition to one position down (taking into account the level of other conditions).
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.MoveUp">
            <summary>
            Moves the condition to one position up (taking into account the level of other conditions).
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.ShiftLevel(System.Boolean)">
            <summary>
            Shifts the row level (taking into account the level of other rows)
            </summary>
            <param name="up">The direction of shifting. if <c>true</c> - the level is increased, otherwise is decreased.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.CheckDataModel">
            <summary>
            Checks DataModel property. Generates an exception if it is null.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.CheckQuery">
            <summary>
            Checks Query property. Generates an exception if it is null.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetOldClassName">
            <summary>
            Gets the old name of the condition class (PDCT or SMPL).
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AttachExpr(Korzh.EasyQuery.EqExpression)">
            <summary>
            Attaches the handler for expression's OnContentChange event to DoExprContentChanged method
            </summary>
            <param name="expr">The expression.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.DetachExpr(Korzh.EasyQuery.EqExpression)">
            <summary>
            Detaches the handler for expression's OnContentChange event
            </summary>
            <param name="expr">The expression.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.DoExprContentChanged(System.Object,System.EventArgs)">
            <summary>
            Does the expr changed.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SetOperator(Korzh.EasyQuery.Operator)">
            <summary>
            Sets the operator.
            </summary>
            <param name="newOperator">New operator.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SetOperatorSilent(Korzh.EasyQuery.Operator)">
            <summary>
            Sets the operator in "silent" mode (no event is raised, no expression is adjusted).
            </summary>
            <param name="newOperator">The new operator.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.BaseExpr">
            <summary>
            Gets or sets the base expression of the condtion. 
            </summary>
            <remarks>
            Base expression is the first expression in condition. Usually it represents some Attribute. 
            </remarks>
            <value>An Expression object</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AdjustOperator">
            <summary>
            Adjusts the operator by base expression.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AdjustExpressions(System.Boolean)">
            <summary>
            Adjusts the expressions (all except the base) by currently selected operator.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.DefaultOperand">
            <summary>
            Gets the default operand.
            </summary>
            <value>The default operand.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetOperand(System.Int32)">
            <summary>
            Gets the condition operand based on its index. Index 0 stands for an attribute
            </summary>
            <param name="index">The index.</param>
            <returns>An instance of <see cref="T:Korzh.EasyQuery.Operand" /> class. </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.RecreateValueExpr(System.Int32)">
            <summary>
            Recreates the value expression.
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.CreateValueExpr(System.Int32)">
            <summary>
            Creates the value expression.
            </summary>
            <param name="index">The index of condition operand.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.CreateValueExprByOperand(Korzh.EasyQuery.Operand)">
            <summary>
            Creates a value expression by operand.
            </summary>
            <param name="opnd">The operaand.</param>
            <returns>An expression object which corresponds to operand passed in parameter.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SetValueExpr(System.Int32,Korzh.EasyQuery.EqExpression)">
            <summary>
            Sets the value expression. 
            </summary>
            <remarks>
            This method fills missing positions of Expressions list with empty ConstExpr values 
            in case when specified index is greater then Expression.Count.
            </remarks>
            <param name="index">Index of expression value. Starts from 1.</param>
            <param name="expr">Expression being set.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetUsedEntities">
            <summary>
            Gets the list of entities that are used in conditions of this group.
            </summary>
            <returns>IEnumerable&lt;Entity&gt;.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsRoot">
            <summary>
            Gets a value indicating whether this condition is the root condition of the query.
            </summary>
            <value><c>true</c> if this is the root condition; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.IsEmpty">
            <summary>
            Gets a value indicating whether this condition is empty (zero conditions).
            </summary>
            <value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.HasEnabled">
            <summary>
            Gets a value indicating whether this group has at least one enabled condition.
            </summary>
            <value><c>true</c> if there is an enabled condition in this group; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.Reset">
            <summary>
            Clears the condition list and resets linking type
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.FindCondByAttr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Finds the condition the by entity attribute set in the left part of this condition.
            </summary>
            <param name="attr">The EntityAttr object</param>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Condition.LinkingStr">
            <summary>
            Gets or sets the text representation of linking type.
            </summary>
            <value>Text representation of linking type. Used for loading/saving from/to XML.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.UpdateEnableStateByChildren">
            <summary>
            This procedure is called when Enable state in one of the child conditions was changed.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AddConditionGroup(Korzh.EasyQuery.Condition.LinkType)">
            <summary>
            Creates and adds a new group of conditions into the current one
            </summary>
            <param name="lnkType">The type of condition linking in the new group</param>
            <returns>New Condition object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AddPredicate(Korzh.EasyQuery.Condition.LinkType)">
            <summary>
            Creates and adds a new group of condition into the current one
            </summary>
            <param name="lnkType">Type of condition linking in the new group</param>
            <returns>New Condition object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AddSimpleCondition(System.String,System.String,System.String[])">
            <summary>
            Adds a simple condition by attribute ID, operator ID and a list of values
            </summary>
            <param name="attrId">Attribute ID</param>
            <param name="operatorId">Operator ID</param>
            <param name="values">List of values</param>
            <returns>New SimpleCondition object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AddConditionWithExpr(System.String,System.String,Korzh.EasyQuery.EqExpression[])">
            <summary>
            Adds a simple condition by the entity attribute's ID, the operator's ID and the list of values
            </summary>
            <param name="attrId">The ID of the entity attribute which goes to the left part of the new condition</param>
            <param name="operatorId">The operator's ID (like "StartsWith" or "Equal")</param>
            <param name="values">The list of values for the right part of the condition represented by EqExpression objects</param>
            <returns>New SimpleCondition object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.AddSimpleCondition(Korzh.EasyQuery.EntityAttr,Korzh.EasyQuery.Operator,Korzh.EasyQuery.EqExpression[])">
            <summary>
            Adds a simple condition by the attribute, the operator and the list of expressions
            </summary>
            <param name="attr">The entity attribute which goes to the left part of the new condition</param>
            <param name="op">The operator (like "StartsWith" or "Equal")</param>
            <param name="exprs">The array of EqExpression objects which will go to the right part of the condition</param>
            <returns>New SimpleCondition object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.ContainsGhosts(Korzh.EasyQuery.Condition@)">
            <summary>
            Determines whether this condition group contains a condition with a "ghost" attribute.
            </summary>
            <param name="outCond">The condition which contains "ghost" attribute or null.</param>
            <returns><c>true</c> if the group contains a "ghost" condition; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetOffspringCount">
            <summary>
            Gets the number of all offspings of the condition group
            </summary>
            <returns>The number of all offsprings</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetConditionGroupHeader">
            <summary>
            Gets the condition group header text.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetText(Korzh.EasyQuery.QueryTextFormats)">
            <summary>
            Returns text representation of condition
            </summary>
            <param name="formats">Different formats of query text representation.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetText">
            <summary>
            Returns text representation of condition with default formats (QueryTextFormats.Default)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetText(Korzh.EasyQuery.QueryTextFormats,System.String,System.String)">
            <summary>
            Returns text representation of condition
            </summary>
            <param name="formats">Text representation formats</param>
            <param name="levelSpace">The level space.</param>
            <param name="prefix">The prefix which will be added at the begining of condition text.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetConditionText(Korzh.EasyQuery.QueryTextFormats,System.String,System.String)">
            <summary>
            Returns text representation of the search condition
            </summary>
            <param name="formats">Text representation formats</param>
            <param name="levelSpace">The level space.</param>
            <param name="prefix">The prefix which will be added at the begining of condition text.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.GetSimpleConditionText(Korzh.EasyQuery.QueryTextFormats,System.String,System.String)">
            <summary>
            Returns text representation of thesimple condition
            </summary>
            <param name="formats">Different formats of query text representation.</param>
            <param name="levelSpace">The level space.</param>
            <param name="prefix">The prefix which will be added at the begining of condition text.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.Scan(System.Action{Korzh.EasyQuery.Condition},System.Boolean)">
            <summary>
            Scans all sub-conditions of this condition group and calls a handler for each of them
            </summary>
            <param name="conditionHandler">The handler that is called for each child condition.</param>
            <param name="processRoot">if set to <c>true</c> the handler will be called for this group itself.</param>
            <exception cref="T:System.ArgumentNullException">conditionHandler</exception>
        </member>
        <member name="F:Korzh.EasyQuery.Condition.XmlTagName">
            <summary>
            The name of the tag which used when we serialize condition to XML
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves condition object to XML writer.
            </summary>
            <param name="writer">XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.WriteContentToXml(System.Xml.XmlWriter)">
            <summary>
            Writes the content of condition to the XmlWriter object.
            </summary>
            <param name="writer">The XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the propertis of the <see cref="T:Korzh.EasyQuery.Condition"/> from the XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.LoadXmlAttributes(System.Xml.XmlReader)">
            <summary>
            Loads conditions node attributes from XML reader.
            </summary>
            <param name="reader">An XmlReader object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads condition from IDictionary. Used during loading query from JSON
            </summary>
            <param name="dictCond">An IDictionary object that representes this condition.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of the condition to JSON
            </summary>
            <param name="writer">The writer.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the content of the condition to JSON (asynchronous way). 
            </summary>
            <param name="writer">The writer.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes all condition properties to JSON
            (this method can be overriden in inherited classes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes all condition properties to JSON (asynchronous way).
            (this method can be overriden in inherited classes)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the condition from JSON
            </summary>
            <param name="reader">An instance of JsonReader</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the condition from JSON  (asynchronous way).
            </summary>
            <param name="reader">An instance of JsonReader</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property of the condition from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
        </member>
        <member name="M:Korzh.EasyQuery.Condition.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property of the condition from JSON  (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ConditionList">
            <summary>
            Represents a list of conditions.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionList.FindByAttr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Finds the condition the by entity attribute set in the left part of this condition.
            </summary>
            <param name="attr">The EntityAttr object</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.ConditionsStore">
            <summary>
            Represents a list of conditions linked to some Query object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ConditionsStore.Query">
            <summary>
            Gets the Query object.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.#ctor(Korzh.EasyQuery.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConditionsStore"/> class.
            </summary>
            <param name="parent">Parent Condition object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.GetNewID">
            <summary>
            Gets the new ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.InsertItem(System.Int32,Korzh.EasyQuery.Condition)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.OnAdded(Korzh.EasyQuery.Condition,System.Int32)">
            <summary>
            Called when [added].
            </summary>
            <param name="condition">Condition.</param>
            <param name="index">Index.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.OnRemoved(Korzh.EasyQuery.Condition)">
            <summary>
            Called on condition removal.
            </summary>
            <param name="condition">Condition.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.OnListChange">
            <summary>
            Called when condition list is changed.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.BeginUpdate">
            <summary>
            Begins the update process.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.EndUpdate">
            <summary>
            Ends the update process.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of conditions from JSON.
            </summary>
            <param name="reader">The reader/</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of conditions from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of conditions to JSON. 
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsStore.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of conditions to JSON (asynchronous way). 
            </summary>
            <param name="writer">The writer</param>
            <returns>Tasks</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ConditionExprList">
            <summary>
            Represents list of expression for SimpleCondition object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionExprList.#ctor(Korzh.EasyQuery.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleCondExprList"/> class.
            </summary>
            <param name="condition">The codition.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionExprList.SetItem(System.Int32,Korzh.EasyQuery.EqExpression)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionExprList.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionExprList.InsertItem(System.Int32,Korzh.EasyQuery.EqExpression)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="T:Korzh.EasyQuery.ConditionsChangedEventHandler">
            <summary>
            Represents delegate for Query.ConditionsChanged event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.DataModel">
            <summary>
            Represents a data model
            </summary>
            <remarks>
            DataModel class represents a model of your data.
            Usually it corresponds to some database but it is not obligatory.
            This basic implementation contains a hierarchical list of entities, their attributes and a list of operators.
            </remarks>
        </member>
        <member name="T:Korzh.EasyQuery.DataModel.Error">
            <summary>
            Exception class for data model errors
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.Error.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.DataModel.Error"/> class.
            </summary>
            <param name="message">Message.</param>
        </member>
        <member name="T:Korzh.EasyQuery.DataModel.TypeOperatorEntry">
            <summary>
            Represents one entry in TypeOperatorMap array.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.TypeOperatorEntry.Types">
            <summary>
            Gets the list of types.
            </summary>
            <value>The list of data types.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.TypeOperatorEntry.Operators">
            <summary>
            Gets the list of operators.
            </summary>
            <value>The list of operators that correspond to specified types.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.TypeOperatorEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.DataModel.TypeOperatorEntry"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.DataModel.TypeOperatorMap">
            <summary>
            Represents a map between the types and operators.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.TypeOperatorMap.IndexByType(Korzh.EasyQuery.DataType)">
            <summary>
            Returns index of the first entry that contains specified type in its Types list.
            </summary>
            <param name="type">A DataType value.</param>
            <returns>The index of found entry.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.TypeOperatorMap.FindByType(Korzh.EasyQuery.DataType)">
            <summary>
            Returns the first entry that contains specified type in its Types list.
            </summary>
            <param name="type">A DataType value.</param>
            <returns>The found entry.</returns>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.LastXmlFormatVersion">
            <summary>
            Read-only constant that represent the latest format version for data model definition XML files
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.LastJsonFormatVersion">
            <summary>
            Read-only constant that represent the latest format version of data model definition JSON files
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.formatVersionXml">
            <summary>
            Format version of data model definition XML files
            </summary>        
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.ID">
            <summary>
            Gets or sets the ID of the model.
            </summary>
            <value>
            Model's ID.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.FormatVersion">
            <summary>
            Gets the version of data model format.
            </summary>
            <value>The version of data model format.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.FormatVersionXml">
            <summary>
            Gets the version of data model XML format.
            </summary>
            <value>The version of data model XML format.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.FormatVersionJson">
            <summary>
            Gets or Sets the version of data model JSON format.
            </summary>
            <value>The version of data model JSON format.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.#cctor">
            <summary>
            Initializes the <see cref="T:Korzh.EasyQuery.DataModel"/> class.
            Registers the main value editors types.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.DataModel"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.Texts">
            <summary>
            Gets an instance of TextStorage object which holds all text resources used in this assembly
            </summary>
            <value>TextStorage class instance</value>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.description">
            <summary>
            Description of the model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel._modelName">
            <summary>
            User-defined name of the model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.Name">
            <summary>
            Gets or sets the user-defined name of the model.
            </summary>
            <value>The name of the model.</value>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.defQueryFilePath">
            <summary>
            File path for default query
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.DefQueryFilePath">
            <summary>
            Gets or sets the file path for default (blank) query used with this data model.
            </summary>
            <value>The def query file path.</value>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.customInfo">
            <summary>
            User-defined additional information about the model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.CustomInfo">
            <summary>
            Gets or sets the custom information associated with data model.
            </summary>
            <value>The custom info.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.FilePath">
            <summary>
            Gets the model file path. It is automatically assigned when you use LoadFromFile method.
            </summary>
            <value>The model file path.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.OnModelLoaded">
            <summary>
            Called when the model is loaded (from XML file or string).
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.OnModelChanged">
            <summary>
            Called after the model has been changed. Raises ModelChanged event if defined.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.Clone">
            <summary>
            Clones the model object
            </summary>
            <returns>A duplicate of original DataModel object</returns>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.ProgressIndicator">
            <summary>
            Gets or sets the progress indicator object.
            This property is used to show progress for some time consuming operations performed inside model
            </summary>
            <value>The progress indicator.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SetProgressMinMax(System.Int32,System.Int32)">
            <summary>
            Sets the minimum and maximum of progress indicator.
            </summary>
            <param name="min">The minimum value of progress indicator.</param>
            <param name="max">The maximum value of progress indicator.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SetProgress(System.Int32)">
            <summary>
            Set the progress to the specified position.
            </summary>
            <param name="pos">The position of progress.</param>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.EntityGraph">
            <summary>
            Represents the graph of entities we operate with in this model
            This property is mostly used in LINQ query bulder
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel._modelVersion">
            <summary>
            Version of the model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.ModelVersion">
            <summary>
            Gets the model version.
            </summary>
            <value>The model version.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.IncreaseModelVersion">
            <summary>
            Increases the model version.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.DataModel.ModelChanged">
            <summary>
            Occurs when the model is changed.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.AggrFunctions">
            <summary>
            List of aggregate functions.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.RefillAggrFunctionList">
            <summary>
            Refills the list of aggregate functions.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.OnAggrFuncListChanged">
            <summary>
            Raises the <see cref="E:AggrFuncListChanged"/> event.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.DataModel.AggrFuncListChanged">
            <summary>
            Occurs when the list of available aggregate functions was changed.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.entityRoot">
            <summary>
            Main entity of the model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.EntityRoot">
            <summary>
            The root entity of data model entities.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateRootEntity">
            <summary>
            Creates the root entity.
            This method can be overriden in descendant classes to retrun the object of appropriate class (e.g. DbEntity).
            </summary>
            <returns>Entity object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateEntityAttr(Korzh.EasyQuery.Entity,System.Boolean)">
            <summary>
            Creates the entity attribute. Used for creating entity attributes while building the model
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="isVirtual">if set to <c>true</c> the new attribute will be a virtual one.</param>
            <returns>EntityAttr.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateEntity(Korzh.EasyQuery.Entity)">
            <summary>
            Creates the entity.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateQuery(Korzh.EasyQuery.Query)">
            <summary>
            Creates a Query object associated with this model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SortEntities">
            <summary>
            Sorts all entities and their attributes alphabetically.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SortEntityContent(Korzh.EasyQuery.Entity)">
            <summary>
            Sorts the content of one entity alphabetically.
            This function is called by <see cref="M:Korzh.EasyQuery.DataModel.SortEntities" /> method
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateGhostAttribute(System.String)">
            <summary>
            Generates NULL (ghost) attribute with ID passed in parameter
            </summary>
            <param name="id">The ID of the ghost attribute</param>
            <returns>A special attribute which is used when we can't find a real entity attribute in the model</returns>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.IsEmpty">
            <summary>
            Gets a value indicating whether this model is empty (doesn't contain any entity or attribute) or not.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel._maxEntAttrID">
            <summary>
            Number of virtual attributes
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetNextEntityAttrID">
            <summary>
            Gets the next free number for building virtual entity attribute ID.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetDefaultUICAttribute">
            <summary>
            Returns the first attribute in the Root entity with UseInConditions set to true.
            This attribute is shown by default for new condition.
            </summary>
            <returns>An Attribute object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetDefaultUIRAttribute">
            <summary>
            Returns the first attribute in the Root entity with UseInResult set to true.
            This attribute is shown by default for new column.
            </summary>
            <returns>An Attribute object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetAttributeByID(System.String,System.Boolean)">
            <summary>
            Gets the attribute by its ID.
            </summary>
            <param name="attrID">The attribute ID.</param>
            <param name="useNullAttr">if set to <c>true</c> NullAttribute will be returned if we can not find the attribute with specified ID.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.FindEntityAttr(System.String)">
            <summary>
            Find attribute either by its ID, expression or caption.
            </summary>
            <param name="attrDef">A string that represents attribute (either ID, expression or caption).</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.FindEntity(System.String)">
            <summary>
            Finds an entity by its name.
            </summary>
            <param name="entityName">Name of the entity we are srearching for</param>
            <returns>
            An <see cref="T:Korzh.EasyQuery.Entity"/> object with specified name or null if it can't be found.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddEntity(Korzh.EasyQuery.Entity,System.String)">
            <summary>
            Adds a sub-entity to the current entity.
            </summary>
            <param name="entity">The parent entity.</param>
            <param name="entityName">The name of the new entity.</param>
            <returns>Entity.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddEntityAttr(Korzh.EasyQuery.Entity,System.String,System.String,Korzh.EasyQuery.DataType,System.Int32)">
            <summary>
            Adds a new attribute to the model.
            </summary>
            <param name="entity">The parent entity.</param>
            <param name="expression">The attribute's expression.</param>
            <param name="caption">The attribute's caption.</param>
            <param name="dataType">The type of the data.</param>
            <param name="size">The size (if necessary).</param>
            <returns>EntityAttr.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddEntityAttr(Korzh.EasyQuery.Entity,System.String,System.String,Korzh.EasyQuery.DataType,System.Boolean,System.Int32)">
            <summary>
            Adds a new attribute to the model.
            </summary>
            <param name="entity">The parent entity.</param>
            <param name="expression">The attribute's expression.</param>
            <param name="caption">The attribute's caption.</param>
            <param name="dataType">The type of the data.</param>
            <param name="isVirtual">The type of the data.</param>
            <param name="size">The size (if necessary).</param>
            <returns>EntityAttr.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetDefaultUIRAttribute(System.Boolean)">
            <summary>
            Returns the first attribute in the Root entity with UseInResult set to true and UseInSorting set to true if needUseInSorting is true.
            This attribute is shown by default for new column.
            </summary>
            <returns>An Attribute object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.PostProcessQueryExpr(Korzh.EasyQuery.QueryExpr)">
            <summary>
            Post process QueryExpr during the loading (to support the old format of XML query files)
            </summary>
            <param name="queryExpr">The QueryExpr to process</param>
            <returns>EqExpression.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.Operators">
            <summary>
            List of data model operators.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.NullOperator">
            <summary>
            Gets the null operator.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateNullOperator">
            <summary>
            Creates the null operator. U
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateOperator">
            <summary>
            Creates the operator. Used for creating objects while building the model
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.CreateOperator(System.String,System.String,System.String,System.String)">
            <summary>
            Creates the operator by overloaded constructor.  Used for creating objects while building the model 
            </summary>
            <param name="id">The id.</param>
            <param name="caption">The caption.</param>
            <param name="expr">The expr.</param>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddOperatorToSuitedAttributes(Korzh.EasyQuery.Operator)">
            <summary>
            Adds the operator to all suitable (by data type) attributes.
            </summary>
            <param name="op">The <see cref="T:Korzh.EasyQuery.Operator"/> which will be added.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddOperatorToEntity(Korzh.EasyQuery.Operator,Korzh.EasyQuery.Entity)">
            <summary>
            Adds the operator to all suitable attributes in specified entity.
            </summary>
            <param name="op">The <see cref="T:Korzh.EasyQuery.Operator"/> which will be added.</param>
            <param name="ent">The <see cref="T:Korzh.EasyQuery.Entity"/> to be processed.</param>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.AnyOperatorGroup">
            <summary>
            Gets the special group which contain any operator
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.CommonOperatorGroup">
            <summary>
            Gets the group which contains the common operators (equal, not equal, less than, more than, etc)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.StringOperatorGroup">
            <summary>
            Gets the group which contains the string operators (starts with, contains)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.TimeOperatorGroup">
            <summary>
            Gets the group which contains the date/time operators (before, after, between, etc.)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.BoolOperatorGroup">
            <summary>
            Gets the group which contains the date/time operators (before, after, between, etc.)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.OtherOperatorGroup">
            <summary>
            Gets the group which contains other operators not included in any of the previous group
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.OperatorGroups">
            <summary>
            Gets the list of all predefined operator groups
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.DefaultTextEditor">
            <summary>
            Gets the default text editor.
            </summary>
            <value>The default text editor.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.DefaultPreciseDateEditor">
            <summary>
            Gets the default "precise date" editor.
            </summary>
            <value>The default "precise date" editor.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.DefaultPreciseTimeEditor">
            <summary>
            Gets the default "precise time" editor.
            </summary>
            <value>The default "precise time" editor.</value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddDefaultEditors">
            <summary>
            Adds the default value editors.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.EnsureEditorExistance(Korzh.EasyQuery.ValueEditor)">
            <summary>
            Ensures the existance of value editor.
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddDefaultOperators">
            <summary>
            Adds the default operators into model
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AddUpdateOperator(System.String,System.String,System.String,System.String,Korzh.EasyQuery.DataKind,Korzh.EasyQuery.OperatorGroup)">
            <summary>
            Adds or update an operator.
            </summary>
            <param name="id">The operator ID.</param>
            <param name="caption">The operator's caption.</param>
            <param name="expr">The expression.</param>
            <param name="format">The operator's display format.</param>
            <param name="kind">The operator's kind.</param>
            <param name="group">The group new operator belongs to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.DeleteOperator(Korzh.EasyQuery.Operator)">
            <summary>
            Deletes the operator from the model.
            </summary>
            <param name="op">An Operator instance</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.DeleteOperatorFromEntity(Korzh.EasyQuery.Entity,Korzh.EasyQuery.Operator)">
            <summary>
            Deletes the operator from any attribute of specified entity (and all its sub-entities).
            </summary>
            <param name="ent">The Entity object.</param>
            <param name="op">The Operator object to remove.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.AssignEntityAttrID(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Assigns the default ID for entity attribute.
            </summary>
            <param name="attr">The EntityAttr object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.UpdateOperatorsTexts">
            <summary>
            Loads the text for all default operators from resources.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.UpdateOperatorTexts(Korzh.EasyQuery.Operator)">
            <summary>
            Loads the texts for one operator from resources (Texts storage actually)
            </summary>
            <param name="op">The op.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.RefreshResources">
            <summary>
            Re-loads the string values from <see cref="P:Korzh.EasyQuery.DataModel.Texts" /> list.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.useResourcesForOperators">
            <summary>
            Indicates whether resources will be used for getting caption and format of the <see cref="T:Korzh.EasyQuery.Operator"/>
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.UseResourcesForOperators">
            <summary>
            Gets or sets a value indicating whether we get the main parameters (caption and format) for default operators from resources.
            </summary>
            <value>
            	<c>true</c> if we get the main parameters (caption and format) for default operators from resources; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetDefaultOperatorsForDataType(Korzh.EasyQuery.DataType)">
            <summary>
            Returns the list of default operators for some data type
            </summary>
            <param name="dataType">A DataType value</param>
            <returns>An <see cref="T:Korzh.EasyQuery.OperatorList"/> object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.ListDefaultOperatorsForDataType(Korzh.EasyQuery.OperatorList,Korzh.EasyQuery.DataType)">
            <summary>
            Fills the list with default operators for some data type
            </summary>
            <param name="operats">An <see cref="T:Korzh.EasyQuery.OperatorList"/> object which should filled.</param>
            <param name="dataType">A DataType value.</param>
        </member>
        <member name="P:Korzh.EasyQuery.DataModel.Editors">
            <summary>
            List of data model operators.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.GetMacroValue(System.String)">
            <summary>
            Gets the value of the macro by its ID.
            </summary>
            <param name="macroId">The identifier of the macro. For example: "${{Today}}"</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.OnDocketRequest(Korzh.EasyQuery.MacroRequestEventArgs)">
            <summary>
            Raises the MacroRequest event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.MacroRequestEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Korzh.EasyQuery.DataModel.MacroRequest">
            <summary>
            This event is raised when a value for some macro is requested.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.Macros">
            <summary>
            List of macro values
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.InitModelLoading">
            <summary>
            Inits the model loading.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromFile(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML file.
            </summary>
            <param name="path">The path to an XML file which contains data model definition.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromXmlFile(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML file.
            </summary>
            <param name="path">The path to an XML file which contains data model definition.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromString(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML string.
            </summary>
            <param name="xml">The XML passed in a string object.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromXmlString(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML string.
            </summary>
            <param name="xml">The XML passed in a string object.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromStream(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML stream.
            </summary>
            <param name="stream">A Stream object which contains data model definition.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromXmlStream(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML stream.
            </summary>
            <param name="stream">A Stream object which contains data model definition.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromXmlReader(System.Xml.XmlReader,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from XML reader.
            </summary>
            <param name="reader">An XmlReader object.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadModelAtrributesFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads data model's attributes from the main XML node (DataModel)
            </summary>
            <param name="reader">An XmlReader object</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadOneModelAtrributeFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Processes one data model's attribute from the main XML node (DataModel)
            </summary>
            <param name="reader">An XmlReader object</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadValueEditorNode(Korzh.EasyQuery.ValueEditor,System.Xml.XmlReader)">
            <summary>
            Loads the value editor definition from XML.
            </summary>
            <param name="editor">A ValueEditor object.</param>
            <param name="reader">A XmlReader object.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadNode(System.Xml.XmlReader,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads the root node of the model. Can be overriden for loading additional root nodes in <see cref="T:Korzh.EasyQuery.DataModel"/>'s descendants
            </summary>
            <param name="reader">The reader.</param>
            <param name="rwOptions">The rw options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToStream(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model XML to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToXmlStream(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model XML to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToString(Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model XML specification to string object.
            </summary>
            <param name="options">Writing options (not used now).</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToXmlString(Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model XML specification to string object.
            </summary>
            <param name="options">Writing options (not used now).</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToFile(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model XML to file.
            </summary>
            <param name="path">The path.</param>
            <param name="options">Read-write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToXmlFile(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model XML to file.
            </summary>
            <param name="path">The path.</param>
            <param name="options">Read-write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves data model specification using XmlWriter.
            </summary>
            <param name="writer">A XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToXmlWriter(System.Xml.XmlWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves data model specification using XmlWriter.
            </summary>
            <param name="writer">A XmlWriter object.</param>
            <param name="options">Read-write options</param>
        </member>
        <member name="F:Korzh.EasyQuery.DataModel.DMEOptions">
            <summary>
            A dictionary that contains different Data Model Editor options associated with this model
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveAttributes(System.Xml.XmlWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the attributes of the model. Can be overriden for storing additional attributes
            </summary>
            <param name="writer">The writer.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveNodes(System.Xml.XmlWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the root nodes of the model. Can be overriden for storing additional nodes
            </summary>
            <param name="writer">The writer.</param>
            <param name="options">The options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveCustomInfoNode(System.Xml.XmlWriter)">
            <summary>
            Saves the custom info node.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonDict">
            <summary>
            Saves the model into Dictionary object. Useful for JSON serialization.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonFile(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the data model to a file in JSON format.
            </summary>
            <param name="filePath">The path to the result file</param>
            <param name="options">Different read/write options</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonFileAsync(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the data model to a file in JSON format (asynchronous way). 
            </summary> 
            <param name="filePath">The path to the result file</param>
            <param name="options">Different read/write options</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonStream(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the data model to a stream in JSON format.
            </summary>
            <param name="stream">The stream to save the model to</param>
            <param name="options">Different read/write options</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonStreamAsync(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the data model to a stream in JSON format (asynchronous way).
            </summary>
            <param name="stream">The stream to save the model to</param>
            <param name="options">Different read/write options</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonString(Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the model to a string in JSON format.
            </summary>
            <param name="options">Different read/write options.</param>
            <returns>System.String</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonStringAsync(Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the model to a string in JSON format (asynchronous way).
            </summary>
            <param name="options">Different read/write options.</param>
            <returns>Task&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.SaveToJsonStringForClientAsync">
            <summary>
            Saves the model to a string in JSON format, suitable for the client-side
            </summary>
            <returns>Task&lt;System.String&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromJsonStream(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from JSON stream.
            </summary>
            <param name="stream">A Stream object which contains data model definition.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromJsonStreamAsync(System.IO.Stream,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads data model from JSON stream (asynchronous way).
            </summary>
            <param name="stream">A Stream object which contains data model definition.</param>
            <param name="options">Different read/write options. See <see cref="T:Korzh.EasyQuery.ModelReadWriteOptions"/> for details.</param>
            <return>Task</return>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromJsonFile(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the model to a JSON file.
            </summary>
            <param name="path"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromJsonFileAsync(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Saves the model to a JSON file (asynchronous way).
            </summary>
            <param name="path"></param>
            <param name="options"></param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromJsonString(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads the model from a string in JSON format.
            </summary>
            <param name="json">A string in JSON format.</param>
            <param name="options">Different read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.LoadFromJsonStringAsync(System.String,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Loads the model from a string in JSON format (asynchronous way).
            </summary>
            <param name="json">A string in JSON format.</param>
            <param name="options">Different read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the data model to JSON using JsonWriter.
            </summary>
            <param name="writer">An instance of JsonWriter class.</param>
            <param name="options">Read-write options</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the data model to JSON using JsonWriter (asynchronous way).
            </summary>
            <param name="writer">An instance of JsonWriter class.</param>
            <param name="options">Read-write options</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.WriteContentToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the main content of the model to JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The read/write options.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.WriteContentToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the main content of the model to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.ReadFromJson(Newtonsoft.Json.JsonReader,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Reads the content of the model from the specified JsonReader.
            </summary>
            <param name="reader">The reader</param>
            <param name="options">Some read/write options.</param>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.ReadFromJsonAsync(Newtonsoft.Json.JsonReader,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Reads the content of the model from the specified JsonReader (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="options">Some read/write options.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.ReadOneModelPropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one model property from JSON.
            </summary>
            <param name="reader">The reader.</param>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DataModel.ReadOneModelPropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one model property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader.</param>
            <param name="propName">Name of the property.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ModelReadWriteOptions">
            <summary>
            Represents different options used during data model loading or saving 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.DbInfo">
            <summary>Tables, links and other DB specific info will be saved/loaded</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.Operators">
            <summary>Include operators when saving or loading the model</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.Editors">
            <summary>The value editors will be saved/loaded</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.Entities">
            <summary>The entities and their attributes will be saved/loaded</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.AggrFunctions">
            <summary>If set - we need to save or load the list of aggregate functions</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.Description">
            <summary>The model's description will be saved/loaded</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.DefQueryPath">
            <summary>The path to the default query path will be saved/loaded</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.DMEOptions">
            <summary> Data Model Editor options will be saved together with the data model</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.DbParams">
            <summary>DB connection settings will be saved</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.CustomInfo">
            <summary>Whether we need to save or load the model's custom info </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.ClientSide">
            <summary>
            Using this option means that we are going to create data model's representation for the client-side code.
            Warning: Don't inlcude this option directly, it's for internal use only. Use ClientSideContent instead
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.ClientSideContent">
            <summary>
            Represents the default set of options for serializing a JSON representation of the model for the client-side (without all DB-related info)
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.KeepCurrent">
            <summary>If this option is set - then the previous model will not be cleared before the loading of the new one</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ModelReadWriteOptions.All">
            <summary>All data model parts will be loaded/saved </summary>
        </member>
        <member name="T:Korzh.EasyQuery.MacroRequestEventArgs">
            <summary>
            Provides data for <see cref="E:Korzh.EasyQuery.DataModel.MacroRequest"/> event
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.MacroRequestEventArgs.MacroId">
            <summary>
            Macro ID
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.MacroRequestEventArgs.Value">
            <summary>
            Value of this macro
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.MacroRequestEventArgs.DataType">
            <summary>
            Macro data type
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.MacroRequestEventArgs.#ctor(Korzh.EasyQuery.IMacroValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.MacroRequestEventArgs" /> class.
            </summary>
            <param name="val">Macro Value.</param>
        </member>
        <member name="T:Korzh.EasyQuery.AggrFuncListChangedEventHandler">
            <summary>
            Represents delegate for DataModel.AggrFuncListChanged event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.MacroRequestEventHandler">
            <summary>
            Represents delegate for MacroRequest event
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Entity">
            <summary>
            Represents one entity
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.#ctor(Korzh.EasyQuery.Entity)">
            <summary>Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Entity"/> class.</summary>
            <param name="parent">The parent entity.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Parent">
            <summary>
            Gets the parent entity.
            </summary>
            <value>The parent entity.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Name">
            <summary>
            Gets or sets the name of the entity.
            </summary>
            <value>Entity name</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.ObjType">
            <summary>
            Gets or sets the type of the entity.
            </summary>
            <value>The type of the entity.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.DbSetName">
            <summary>
            Gets or sets the name of the DbSet associated with entity
            </summary>
            <value>The name of the associated column.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.TypeName">
            <summary>
            Gets or sets the path for building query for complex types
            </summary>
            <value>The complex type path.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Index">
            <summary>
            Gets or sets the index of Entity
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.UseInConditions">
            <summary>
            Gets or sets a value indicating whether the attribute can be used in query conditions.
            </summary>
            <value>
            	<see langword="true"/> if attribute can be used in query conditions; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.UseInResult">
            <summary>
            Gets or sets a value indicating whether the attribute can be used in result columns (SELECT clause).
            </summary>
            <value>
            	<see langword="true"/> if attribute can be used in result columns; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.UseInSorting">
            <summary>
            Gets or sets a value indicating whether the attribute can be used in sorting.
            </summary>
            <value><c>true</c> if attribute can be used in sorting; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.Hide">
            <summary>
            Hides this entity (turns off UseInConditions, UseInResult and UseInSorting)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.Show">
            <summary>
            Shows this entity (turns on UseInConditions, UseInResult and UseInSorting)
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this entity has no attributes and all its subentities don't have attributes; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.IsRoot">
            <summary>
            Gets a value indicating whether this entity is a root entity.
            </summary>
            <value>
              <c>true</c> if this instance is root; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.SubEntities">
            <summary>
            List of sub entities that belong to this entity.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Attributes">
            <summary>
            List of Attributes that belong to this entity.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.OnModelAssignment">
            <summary>
            Called when the entity is inserted into model.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.GetFullName(System.String)">
            <summary>
            Gets the full name.
            </summary>
            <value>The full name.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Entity.UserData">
            <summary>
            Gets or sets the user data object associated with entity.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.GetFirstLeaf">
            <summary>
            Gets the first attribute in all attributes and sub-entities of the current entity.
            </summary>
            <returns>An Attribute object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.FindAttribute(Korzh.EasyQuery.EntityAttrProp,System.String)">
            <summary>
            Finds the attribute by its ID.
            </summary>
            <param name="what">Attribute property (ID, Caption or SqlName) that we use to compare with searched value.</param>
            <param name="val">Value of entityAttr property used for searching </param>
            <returns>
            An Attribute object with specified ID or null if such object cannot be found.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.FindSubEntity(System.String)">
            <summary>
            Finds a sub-entity in current entity by its name.
            </summary>
            <param name="entityName">Name of sub-entity we are srearching for</param>
            <returns>
            An Entity object with specified name or null if it cannot be found.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.DeleteSubEntities(System.String[])">
            <summary>
            Deletes the sub-entities specified by name(s) passed in method's parameter(s).
            </summary>
            <param name="namesToDelete">The names of the entities to delete.</param>
            <returns>The amount of deleted entities</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.DeleteSubEntities(System.Func{Korzh.EasyQuery.Entity,System.Boolean})">
            <summary>
            Deletes the sub-entities.
            </summary>
            <param name="entityToDeleteFilter">The "filter" function that returns <c>true</c> if the entity should be removed</param>
            <returns>The amount of deleted entities</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.Scan(System.Action{Korzh.EasyQuery.Entity},System.Action{Korzh.EasyQuery.EntityAttr},System.Boolean)">
            <summary>
            Scans all child entities and attributes (including this one one) calls entityHandler and attrHanlder delegates (correspondingly) for each of them
            </summary>
            <param name="entityHandler">The delegate which will be called for each entity.</param>
            <param name="attrHandler">The delegate which will be called for each attribute</param>
            <param name="processRoot">Indicates whether we need to call delegates for this entity as well.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves the entity to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.SaveAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves the entity attributes.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.SaveNodes(System.Xml.XmlWriter)">
            <summary>
            Saves the entity nodes.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads entity from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.LoadNodes(System.Xml.XmlReader)">
            <summary>
            Loads the root nodes of the entity.
            </summary>
            <param name="reader">The XmlReader object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.LoadAttribute(System.String,System.String)">
            <summary>
            Loads the attribute of the entity.
            </summary>
            <param name="propname">The propname.</param>
            <param name="propvalue">The propvalue.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the entity to JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the entity to JSON (asynchronious way)
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes entity's properties to JSON
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes entity's properties to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>Reads the entity content from JSON.</summary>
            <param name="reader">The reader.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>Reads the entity content from JSON (asynchronous way).</summary>
            <param name="reader">The reader.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.ReadOnePropertyFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one entity property from JSON or skips unused.
            </summary>
            <param name="reader">The reader.</param>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Entity.ReadOnePropertyFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one entity property from JSON (asynchronous way) or skips unused.
            </summary>
            <param name="reader">The reader.</param>
            <param name="propName">Name of the property.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.RootEntity">
            <summary>
            Represents root entity in the model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.RootEntity.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.RootEntity.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:RootEntity"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="T:Korzh.EasyQuery.EntityList">
            <summary>
            Represents list of entities
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityList.SortByName">
            <summary>
            Sorts all items in this list by their names.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityList.Reorder">
            <summary>
            Reorders entity attributes by index in increase order.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EntityStore">
            <summary>
            Represents storage of entities
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.#ctor(Korzh.EasyQuery.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:EntityStore"/> class.
            </summary>
            <param name="parentEntity">The parent entity.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityStore.Model">
            <summary>Gets the model.</summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.InsertItem(System.Int32,Korzh.EasyQuery.Entity)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.OnEntityInsertion(Korzh.EasyQuery.Entity,System.Int32)">
            <summary>
            Called on entity's insertion.
            </summary>
            <param name="entity">The entity.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the list of entities to JSON.
            </summary>
            <param name="writer">An instance of JsonWriter class.</param>
            <param name="rwOptions">Different read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the list of entities to JSON (asynchronous way).
            </summary>
            <param name="writer">An instance of JsonWriter class.</param>
            <param name="rwOptions">Different read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>Reads the list of entities from JSON.</summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>Reads the list of entities from JSON (asynchronous way).</summary>
            <param name="reader">The reader.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.EntAttrKind">
            <summary>
            Attribute kind enumeration (Data or Virtual).
            </summary>
            
        </member>
        <member name="F:Korzh.EasyQuery.EntAttrKind.Data">
            <summary>
            an attribute that represents some field in a database table
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EntAttrKind.Virtual">
            <summary>
            Calculated attribute
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EntityAttrProp">
            <summary>
            Represents attribute property used in FindAttribute methods
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EntityAttrProp.ID">
            <summary>
            Attribute ID
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EntityAttrProp.Caption">
            <summary>
            Attribute caption
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EntityAttrProp.Expression">
            <summary>
            Some expression (should be defined in descendants). Same as ID for <see cref="T:Korzh.EasyQuery.Entity"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EntityAttr">
            <summary>
            Represents one entity attribute of data model.
            </summary>
            <remarks>
            Usually Attribute object represents some field in database table 
            but it also can represent more complicated attributes.
            For the user who works with query builder entity attribute - 
            is something that he(she) understand well and can operate with.
            For example: "name of the company" or "payment method" 
            but not the "payment method internal id" which is stored in database.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.ID">
            <summary>
            Gets or sets the ID.
            </summary>
            <value>ID string.</value>
            <remarks>
            ID represents internal entityAttr attribute id which is not shown to user 
            but is used for storing data model in external files.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.IsNullable">
            <summary>Gets or sets a value indicating whether this attribute is nullable.</summary>
            <value>
              <c>true</c> if this instance is nullable; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.PropInfo">
            <summary>
            Gets or sets the property information.
            </summary>
            <value>The property information.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.PropName">
            <summary>
            Gets or sets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.ColumnName">
            <summary>
            Gets or sets the name of the column associated with property (in EntityFramework context definition).
            </summary>
            <value>The name of the associated column.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Index">
            <summary>
            Gets or sets the index of EntityAttr
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EntityAttr.expr">
            <summary>
            Attribute expression
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.LookupAttr">
            <summary>
            Gets the lookup attribute.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.CheckModel">
            <summary>
            Checks the Model property and raises an exception if it's null.
            </summary>
            <exception cref="T:Korzh.EasyQuery.DataModel.Error">
            Entity is not specified for attribute:  + {attribute ID}
            or
            Model is not specified for entity:  + {entity ID}
            </exception>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Entity">
            <summary>
            Gets or sets the entity.
            </summary>
            <value>The entity.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.OnModelAssignment">
            <summary>
            Called when model is assigned.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.IsAggregate">
            <summary>
            Gets or sets a value indicating whether this attribute represents some aggregate column.
            </summary>
            <value>
            	<c>true</c> if this attribute represents some aggregate column; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.HasSubQuery">
            <summary>
            Gets or sets a value indicating whether this attribute includes a sub-query in its expression.
            </summary>
            <value><c>true</c> if this attribute includes a sub-query in its expression; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.UseInConditions">
            <summary>
            Gets or sets a value indicating whether the attribute can be used in query conditions.
            </summary>
            <value>
            	<see langword="true"/> if attribute can be used in query conditions; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.UseInResult">
            <summary>
            Gets or sets a value indicating whether the attribute can be used in result columns (SELECT clause).
            </summary>
            <value>
            	<see langword="true"/> if attribute can be used in result columns; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.UseInSorting">
            <summary>
            Gets or sets a value indicating whether the attribute can be used in sorting.
            </summary>
            <value><c>true</c> if attribute can be used in sorting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Caption">
            <summary>
            Gets or sets the entityAttr attribute caption.
            </summary>
            <value>Caption text</value>
            <remarks> Caption is the public representation of entityAttr.
            It must have clear and understandable name. 
            Example: "Company name" is a good caption 
            but "CName" - is bad.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Description">
            <summary>
            Gets or sets the description of entity attribute.
            </summary>
            <value>The description of entity attribute.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.IsVirtual">
            <summary>
            Indicates if this attribute is a virtual (calculate) one.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Kind">
            <summary>
            Gets or sets the attribute kind.
            </summary>
            <value>EntAttrKind value. Can be EntAttrKind.Data or EndKind.Virtual</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.StrToEntAttrKind(System.String)">
            <summary>
            Converts string representation of attribute kind to EntAttrKind value.
            </summary>
            <param name="s">String representation of attribute kind.</param>
            <returns>EntAttrKind value.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Attribute"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.#ctor(Korzh.EasyQuery.Entity,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EntityAttr" /> class.
            </summary>
            <param name="parentEntity">The parent entity.</param>
            <param name="isVirtual">if set to <c>true</c> the created attribute will be virtual (calculated).</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.DataType">
            <summary>
            Gets or sets the type of data represented by attribute.
            </summary>
            <value>DataType value.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Size">
            <summary>
            Gets or sets the size of data represented by attribute.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Expr">
            <summary>
            Gets or sets the attribute expression.
            </summary>
            <value>Text that represents attribute expression. 
            Can be simply field name for EntAttrKind.Data attributes or 
            more complicated SQL expression composed of several fields, operators and functions.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.ProcessVirtualExpr">
            <summary>
            Scans attribute's expression for new parameters, tables, etc
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.FullExpr">
            <summary>
            Gets the full expression of entity attribute.
            </summary>
            <value>
            The full expression.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.GetDataAttrFullExpr">
            <summary>
            Gets full expression of the entity attribute.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.CustomFunc">
            <summary>
            Gets or sets the custom function.
            </summary>
            <value>
            The custom function.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.UserData">
            <summary>
            Gets or sets the user data object assosiated with attribute.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Operations">
            <summary>
            Gets the list of operators which can be applied for this attribute.
            </summary>
            <value>An <see cref="T:Korzh.EasyQuery.OperatorList"/> object.</value>
        </member>
        <member name="F:Korzh.EasyQuery.EntityAttr._defaultOperator">
            <summary>
            The default operator
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.GetDefaultOperator">
            <summary>
            Gets the default operator (usually it is first operator in Operations list).
            </summary>
            <returns>A Operator object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.SetDefaultOperator(Korzh.EasyQuery.Operator)">
            <summary>
            Sets the default operator.
            </summary>
            <param name="op">The operator.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.FillOperatorsWithDefaults(Korzh.EasyQuery.DataModel)">
            <summary>
            Fills the operators list with default operators depending of attribute type.
            </summary>
            <param name="model">The data model.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.DefaultEditor">
            <summary>
            Gets or sets the default value editor.
            </summary>
            <value>The default value editor. null value represent AUTO value editor.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Editors">
            <summary>
            Gets the editors map.
            </summary>
            <value>The editors map for current attribute.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.GetValueEditor(Korzh.EasyQuery.Operator,System.Int32)">
            <summary>
            Gets the most suitable value editor for this attribute and operator.
            </summary>
            <param name="op">The operator used with this attribute.</param>
            <param name="operandIndex">Index of the operand.</param>
            <returns>
            A <see cref="T:Korzh.EasyQuery.ValueEditor" /> object
            </returns>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.Params">
            <summary>
            The parameters associated with this entity attribute
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttr.IsGhost">
            <summary>
            Gets a value indicating whether this is a "ghost attribute" - an attribute which was not found in the model.
            </summary>
            <value><c>true</c> if this instance is a "ghost attribute"; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.HasParams">
            <summary>
            Determines whether this attribute has parameters in its expression.
            </summary>
            <returns><c>true</c> if this attribute has parameters; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.ExtractParams">
            <summary>
            Parse attribute's expression and extract all parameters (like @Param1) used there.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.CompareWithExpr(System.String)">
            <summary>
            Compares attribute's expression with the one passed in the parameter.
            </summary>
            <param name="expr">The expression definition to compare with</param>
            <returns><c>true</c> if our attribute's expression is equal to the one passed in the parameter, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads attribute from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.LoadNodes(System.Xml.XmlReader)">
            <summary>
            Loads the sub-nodes of entity attribute's node.
            </summary>
            <param name="reader">An instance of XmlReader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.LoadAttribute(System.String,System.String)">
            <summary>
            Loads the attribute.
            </summary>
            <param name="propname">The propname.</param>
            <param name="propvalue">The propvalue.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves <see cref="T:Korzh.EasyQuery.EntityAttr"/> to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.SaveXmlAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves the attributes to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.SaveXmlNodes(System.Xml.XmlWriter)">
            <summary>
            Saves the nodes to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.SaveToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves attribute properties to Dictionary object (used for serialization to JSON).
            </summary>
            <param name="dict">A IDictionary&lt;string,object&gt; object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.CopyFrom(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Copies all attribute's properties from another entity attribute
            </summary>
            <param name="attr">An EntityAttr object to copy from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.System#IComparable{Korzh#EasyQuery#EntityAttr}#CompareTo(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Compares the current instance with another EntityAttr object 
            and returns an integer that indicates whether the current instance precedes, 
            follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <param name="attr">The entity attribute.</param>
            <returns>An integer that indicates whether the current instance precedes, 
            follows, or occurs in the same position in the sort order as the other object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.AddParamsTo(Korzh.EasyQuery.QueryParamList)">
            <summary>
            Adds all query parameters used in this attribute to the list passed via paramList.
            </summary>
            <param name="paramList">The list where to add the attribute's parameters to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes attribute's content to JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The model's read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes attribute's content to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The model's read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes attribute properties to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Some read/write options</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes attribute properties to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Some read/write options</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the attribute content from JSON.
            </summary>
            <param name="reader">A JsonReader.</param>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException">
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the attribute content from JSON (asynchronous way).
            </summary>
            <param name="reader">A JsonReader.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException">
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.ReadPropertyFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one attribute's property from JSON.
            </summary>
            <param name="reader">A JsonReader.</param>
            <param name="propName">Name of the property.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttr.ReadPropertyFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one attribute's property from JSON (asynchronous way).
            </summary>
            <param name="reader">A JsonReader.</param>
            <param name="propName">Name of the property.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.EditorsMap">
            <summary>
            Represents editors map - the list which defines what editor will be used for a particular data type and operator.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EditorsMap.AddEditor(Korzh.EasyQuery.ValueEditor)">
            <summary>
            Adds the editor with empty list of operators
            </summary>
            <param name="editor">The editor.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EditorsMap.FindEditor(Korzh.EasyQuery.Operator,Korzh.EasyQuery.DataType)">
            <summary>
            Finds the editor by operator and data type.
            </summary>
            <param name="op">The operator.</param>
            <param name="type">The data type.</param>
            <returns>Found value editor or null if there is no any suitable editor.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ValueEditorEntry">
            <summary>
            Represents map between operators and value editors.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditorEntry.Operators">
            <summary>
            Gets the list of operators the value editor can be used with.
            </summary>
            <value>The list of oparators.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditorEntry.Type">
            <summary>
            Gets the data type the value editor can be used with.
            </summary>
            <value>The data type the value editor can be used with.</value>
            <remarks> Default value is Unknown which means that specified editor can be used for any data type.</remarks>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditorEntry.Editor">
            <summary>
            Gets or sets the value editor.
            </summary>
            <value>
            The value editor which is used with specified date type and operators.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorEntry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ValueEditorEntry"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EntityAttrList">
            <summary>
            Represents list of entity attributes
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrList.SortByCaption">
            <summary>
            Orders list of attributes by their captions.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrList.Reorder">
            <summary>
            Reorders entity attributes by index in increase order.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EntityAttrStore">
            <summary>
            Represents entity attributes storage associated with a particular entity.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrStore.#ctor(Korzh.EasyQuery.Entity)">
            <summary>
            Initializes a new instance of the <see cref="T:EntityAttrStore"/> class.
            </summary>
            <param name="entity">The entity.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrStore.Model">
            <summary>Gets the DataModel object this entity attribute belongs to</summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrStore.InsertItem(System.Int32,Korzh.EasyQuery.EntityAttr)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrStore.OnEntityAttrInsertion(Korzh.EasyQuery.EntityAttr,System.Int32)">
            <summary>
            Called when some attribute is inserted to the list.
            </summary>
            <param name="entityAttr">The attribute.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>Reads the list of entity attributes from JSON.</summary>
            <param name="reader">An instance of JsonReader.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>Reads the list of entity attributes from JSON (asynchronous way).</summary>
            <param name="reader">An instance of JsonReader.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ListValueEditorAttribute">
            <summary>
            Assigns a "List" value editor for an entity member.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EqListValueEditorAttribute">
            <summary>
            Assigns a "List" value editor for an entity member.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqListValueEditorAttribute.Id">
            <summary>
            Gets or sets the ID of list value editor
            It might be necessary to preserve the same value editor's ID between consequent HTTP requests.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqListValueEditorAttribute.ListName">
            <summary>
            Gets the name of the list.
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqListValueEditorAttribute.SQL">
            <summary>
            Gets or sets the SQL
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EqListValueEditorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EqListValueEditorAttribute"/> class.
            </summary>
            <param name="listName">
            Name of the list. 
            If not defined - then query panel will show the list of all possible values for this property. 
            </param>
        </member>
        <member name="P:Korzh.EasyQuery.EqListValueEditorAttribute.LookupDisplayProperty">
            <summary>
            Gets or sets the name of the property in the lookup entity from which we get the textual values to show to the users.
            </summary>
            <value>The "display" property in the lookup entity.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqListValueEditorAttribute.LookupDisplayOrder">
            <summary>
            Gets or sets the order of the lookup values.
            </summary>
            <value>The order of the lookup values.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EqListValueEditorAttribute.ProcessEntityAttr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Adds necessary value editor into the entity attribute passed in parameter.
            </summary>
            <param name="attr">The attribute.</param>
        </member>
        <member name="T:Korzh.EasyQuery.EqEntityAttribute">
            <summary>
            Provides a general-purpose attribute that lets you specify different options for entity classes.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttribute.DisplayName">
            <summary>
            Gets the display name of entity.
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttribute.UseInResult">
            <summary>
            Gets or sets a value indicating whether this entity can be used in result
            </summary>
            <value><c>true</c> if corresponding entity can be used in result; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttribute.UseInConditions">
            <summary>
            Gets or sets a value indicating whether this entity can be used in conditions
            </summary>
            <value><c>true</c> if corresponding entity can be used in conditions; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttribute.UseInSorting">
            <summary>
            Gets or sets a value indicating whether this entity can be used in sorting panel
            </summary>
            <value><c>true</c> if corresponding entity can be used in sorting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttribute.Index">
            <summary>
            Gets or sets the index for Entity
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this entity should be ignored during the model loading
            </summary>
            <value><c>true</c> if corresponding entity should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EqEntityAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EntityAttribute"/> class.
            </summary>
            <param name="include">
            Indicates if the associated entity should be included to the data model.
            If false - it will be ignored (the same as setting Ignore = true)
            </param>
        </member>
        <member name="M:Korzh.EasyQuery.EqEntityAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EntityAttribute"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EntityAttribute">
            <summary>
            Provides a general-purpose attribute that lets you specify localizable strings for entity classes.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EqEntityAttrAttribute">
            <summary>
            Provides a general-purpose attribute that lets you specify different options for entity attribute classes.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttrAttribute.DisplayName">
            <summary>
            Gets the display name of entity.
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttrAttribute.UseInResult">
            <summary>
            Gets or sets a value indicating whether this entity attribute can be used in result
            </summary>
            <value><c>true</c> if corresponding entity attribute can be used in result; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttrAttribute.Index">
            <summary>
            Gets or sets the index for EntityAttr
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttrAttribute.UseInConditions">
            <summary>
            Gets or sets a value indicating whether this entity attribute can be used in conditions
            </summary>
            <value><c>true</c> if corresponding entity attribute can be used in conditions; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttrAttribute.UseInSorting">
            <summary>
            Gets or sets a value indicating whether this entity attribute can be used in sorting panel
            </summary>
            <value><c>true</c> if corresponding entity attribute can be used in sorting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqEntityAttrAttribute.Ignore">
            <summary>
            Gets or sets a value indicating whether this entity attribute should be ignored during the model loading
            </summary>
            <value><c>true</c> if corresponding entity attribute should be ignored; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EqEntityAttrAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EntityAttribute"/> class.
            </summary>
            <param name="include">
            Indicates if the associated entity attribute should be included to the data model.
            If false - it will be ignored (the same as setting Ignore = true)
            </param>
        </member>
        <member name="M:Korzh.EasyQuery.EqEntityAttrAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EntityAttribute"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.AggrFuncExpr">
            <summary>
            Represents an expression which is a result of applying some functions to other expressions
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.AggrFuncExpr.ArgStore">
            <summary>
            Represents the list of aggregate function arguments
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.ArgStore.#ctor(Korzh.EasyQuery.AggrFuncExpr)">
            <summary>
            Initializes a new instance of the <see cref="T:ArgStore"/> class.
            </summary>
            <param name="aggrFuncExpr">The aggr func expr.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.ArgStore.SetItem(System.Int32,Korzh.EasyQuery.EqExpression)">
            <summary>
            Replaces the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to replace.</param>
            <param name="item">The new value for the element at the specified index. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.ArgStore.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is equal to or greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.ArgStore.InsertItem(System.Int32,Korzh.EasyQuery.EqExpression)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="index"/> is less than zero.
            -or-
            <paramref name="index"/> is greater than <see cref="P:System.Collections.ObjectModel.Collection`1.Count"/>.
            </exception>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.#ctor(Korzh.EasyQuery.DataModel,System.String,Korzh.EasyQuery.EqExpression)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.AggrFuncExpr"/> class.
            </summary>
            <param name="model">DataModel object.</param>
            <param name="funcID">ID of the aggregate function.</param>
            <param name="argExpr">Expression used in function argument</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.AggrFuncExpr"/> class.
            </summary>
            <param name="model">DataModel object.</param>
        </member>
        <member name="F:Korzh.EasyQuery.AggrFuncExpr.function">
            <summary>
            The function of <see cref="T:Korzh.EasyQuery.AggrFuncExpr"/>
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Function">
            <summary>
            Gets or sets the function.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Argument">
            <summary>
            Gets or sets the main argument.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>An Attribute object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>The type of expression data</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.CustomFunc">
            <summary>
            Gets the custom func for expression if defined
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Distinct">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:AggrFuncExpr"/> has "DISTINCT" attribute.
            </summary>
            <value><c>true</c> if distinct; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.IsAggregate">
            <summary>
            gets a value indicating whether this expression is aggregate.
            </summary>
            <value><c>true</c> if this instance is aggregate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Value">
            <summary>
            Gets or sets the expression value. 
            </summary>
            <value>Expression value. It is equal to ID of the attribute that represented by the expression. </value>
        </member>
        <member name="P:Korzh.EasyQuery.AggrFuncExpr.Text">
            <summary>
            Gets the expression text. 
            </summary>
            <value>
            The expression text
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.SetContentSilent(System.String,System.String)">
            <summary>
            Sets the content of the expression silently (without calling ContentChanged event).
            </summary>
            <param name="val">The value.</param>
            <param name="txt">The text.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.AssignExpr(Korzh.EasyQuery.EqExpression)">
            <summary>
            Assigns some expression to this one.
            For AggrFuncExpr class this method assigns the Expression object passed in parameter to Argument property
            </summary>
            <param name="expr">An <see cref="T:Korzh.EasyQuery.EqExpression"/> object</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads expression from XML.
            </summary>
            <param name="reader">XmlReader object positioned on the expression node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves expression to XML writer.
            </summary>
            <param name="writer">The XmlWriter object.</param>
            <param name="tagName">Name of the XML tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads expression from IDictionary object (used when we load query from JSON).
            </summary>
            <param name="dict">IDictionary object which contains all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.SaveToJsonDictCore(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            This is an abstract method which should be overridden in descendant classes.
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes one property to JSON.
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes one property to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.AggrFuncExpr.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ConstExpr">
            <summary>
            Represents a constant expression (like: 423 or "Master card").
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.DataType,Korzh.EasyQuery.DataKind,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstExpr"/> class.
            </summary>
            <param name="model">The DataModel associated with this expression</param>
            <param name="dataType">The type of new expression.</param>
            <param name="aKind">The expression kind.</param>
            <param name="val">Constant value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.DataType,Korzh.EasyQuery.DataKind)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstExpr"/> class.
            </summary>
            <param name="model">The DataModel associated with this expression</param>
            <param name="dataType">The type of new expression.</param>
            <param name="dataKind">The expression kind.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstExpr"/> class.
            </summary>
            <param name="model">The DataModel associated with this expression</param>
            <param name="dataType">The type of expression.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.DataType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstExpr"/> class.
            </summary>
            <param name="model">The DataModel associated with this expression</param>
            <param name="dataType">The type of expression.</param>
            <param name="val">Constant value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.#ctor(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstExpr"/> class.
            </summary>
            <param name="model">The DataModel associated with this expression</param>
            <param name="val">Constant value.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ConstExpr.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ConstExpr.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>The type of expression data</value>
        </member>
        <member name="P:Korzh.EasyQuery.ConstExpr.Kind">
            <summary>
            Gets the expression kind.
            </summary>
            <value>The expression kind</value>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads expression from XML.
            </summary>
            <param name="reader">XmlReader object positioned on the expression node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads expression from IDictionary object (used when we load query from JSON).
            </summary>
            <param name="dict">IDictionary object which contains all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.SaveToJsonDictCore(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            This is an abstract method which should be overridden in descendant classes.
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves expression to XML writer.
            </summary>
            <param name="writer">The XmlWriter object.</param>
            <param name="tagName">Name of the XML tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes one property to JSON.
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes one property to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstExpr.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.EntityAttrExpr">
            <summary>
            An EqExpression descendant that represents an entity attribute.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.EntityAttr)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EntityAttrExpr"/> class.
            </summary>
            <param name="model">The DataModel assiated with this expression.</param>
            <param name="attr">An EntityAttr object.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>An Attribute object.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.SetAttribute(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Sets the entity attribute.
            </summary>
            <param name="attr">An instance of <see cref="T:EntityAttr"/> class.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.IsAggregate">
            <summary>
            Gets a value indicating whether this expression is aggregate.
            </summary>
            <value><c>true</c> if this instance is aggregate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.IsParentExpr">
            <summary>
            Gets a value indicating whether this instance is a parent expression.
            </summary>
            <value>
            	<c>true</c> if this instance is parent expr; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.CustomFunc">
            <summary>
            Gets the custom func for expression if defined
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.DataType">
            <summary>
            Gets the type of the expression.
            </summary>
            <value>DataType value that represents expression type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.Kind">
            <summary>
            Gets the expression kind.
            </summary>
            <value>The expression kind</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.Value">
            <summary>
            Gets or sets the expression value. 
            </summary>
            <value>Expression value. It is equal to ID of the attribute that represented by the expression. </value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.SetContentSilent(System.String,System.String)">
            <summary>
            Sets the content of the expression silently (without calling ContentChanged event).
            </summary>
            <param name="val">New value.</param>
            <param name="txt">New text.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.TextFormat">
            <summary>
            Gets or sets the format of the text representation for this type of expression.
            </summary>
            <value>The format of the text representation.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityAttrExpr.Text">
            <summary>
            Gets the expression text. For this type it returns entity name + attribute caption.
            </summary>
            <value>
            The expression text.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.AssignExpr(Korzh.EasyQuery.EqExpression)">
            <summary>
            Assigns some expression to this one.
            This method just does nothing in the base class but can perform some actions in Expression descendants.
            </summary>
            <param name="expr">An <see cref="T:Korzh.EasyQuery.EqExpression"/> object</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads expression from XML.
            </summary>
            <param name="reader">XmlReader object positioned on the expression node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves the expression to XML writer.
            </summary>
            <param name="writer">A XmlWriter object.</param>
            <param name="tagName">Name of the XML tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads expression from IDictionary object (used when we load query from JSON).
            </summary>
            <param name="dict">IDictionary object which contains all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.SaveToJsonDictCore(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            This is an abstract method which should be overridden in descendant classes.
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves propeerties of the expression (asynchronous way). to JSON writer.
            </summary>
            <param name="writer">The JSON writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Saves propeerties of the expression (asynchronous way). to JSON writer.
            </summary>
            <param name="writer">The JSON writer.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property of the expression. or skips unused from the JSON reader.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="propName">The property name.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityAttrExpr.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one property of the expression (asynchronous way). or skips unused from the JSON reader.
            </summary>
            <param name="reader">The JSON reader.</param>
            <param name="propName">The property name.</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ParentEntityAttrExpr">
            <summary>
            Represents parent entity attribute expression
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ParentEntityAttrExpr.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.EntityAttr)">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ParentEntityAttrExpr.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ParentEntityAttrExpr.IsParentExpr">
            <summary>
            Gets a value indicating whether this instance is a parent expression.
            </summary>
            <value>
            	<c>true</c> if this instance is parent expr; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Korzh.EasyQuery.ExprTag">
            <summary>
            Contains several constant definitions for expressions tag
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ExprTag.Unknown">
            <summary>Unknown expression type</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ExprTag.Constant">
            <summary>Constant expression</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ExprTag.EntityAttribute">
            <summary>Entity attribute expression</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ExprTag.ParentEntityAttribute">
            <summary>Parent entity attribute expression</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ExprTag.AggregateFunction">
            <summary>Aggregate function expression</summary>
        </member>
        <member name="F:Korzh.EasyQuery.ExprTag.Query">
            <summary>Query expression</summary>
        </member>
        <member name="M:Korzh.EasyQuery.ExprTag.TagToOldClassName(System.Int32)">
            <summary>
            Converts the expression's tag value to the name of old expression class (like "CONST" or "ENTATTR").
            </summary>
            <param name="tag">The tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ExprTag.OldClassNameToTag(System.String)">
            <summary>
            Converts old class name to tag.
            </summary>
            <param name="className">Name of the class (a string like ENTATTR).</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.EqExpression">
            <summary>
            Represents common expression object.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.RegisterCreator(Korzh.EasyQuery.IExpressionCreator)">
            <summary>
            Registers new type of expression. 
            </summary>
            <param name="creator">Expression creator interface.</param>
            <returns>Returns true if registration succeed. Otherwise - false.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.Create(Korzh.EasyQuery.DataModel,System.Int32)">
            <summary>
            Creates the expression instance of specified type.
            </summary>
            <param name="model">A reference to DataModel object (can be null if not used)</param>
            <param name="tag">Expression's tag.</param>
            <returns>
            New created Expression object if type is recognized. Otherwise - null.
            </returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.CreateByClassName(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Creates the expression instance of specified class (type) name.
            </summary>
            <param name="model">A reference to DataModel object (can be null if not used)</param>
            <param name="className">The name of the old expression class (type).</param>
            <returns>EqExpression.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EqExpression"/> class.
            </summary>
            <param name="model">The DataModel associated with this expression.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.TagToOldClassName(System.Int32)">
            <summary>
            Converts the expression's tag value to the name of old expression class (like "CONST" or "ENTATTR").
            </summary>
            <param name="tag">The tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The DataModel object associated with this expression.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>The type of expression data</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.SystemType">
            <summary>
            Gets the system type for this expreesion (it's used in LINQ query builder)
            </summary>
            <value>The system type</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Kind">
            <summary>
            Gets the expression kind.
            </summary>
            <value>The expression kind</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Value">
            <summary>
            Gets or sets the value of expression.
            </summary>
            <value>The expression value.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.CustomFunc">
            <summary>
            Gets the custom func for expression if defined
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EqExpression._text">
            <summary>
            This field contains expression's text
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Text">
            <summary>
            Gets or sets the expression text used for visual representation.
            </summary>
            <value>The text of visual representation of expression. Usually is equal to Value.</value>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.SetContent(System.String,System.String)">
            <summary>
            Sets the content of the expression (both its value and text).
            </summary>
            <param name="val">The value.</param>
            <param name="txt">The text.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.SetContentSilent(System.String,System.String)">
            <summary>
            Sets the content of the expression silently (without calling ContentChanged event).
            </summary>
            <param name="val">New value.</param>
            <param name="txt">New text.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Hint">
            <summary>
            Gets or sets the expression hint.
            </summary>
            <value>The expression hint.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>An Attribute object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.IsAggregate">
            <summary>
            Gets a value indicating whether this expression is aggregate.
            </summary>
            <value><c>true</c> if this instance is aggregate; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EqExpression.XmlTagName">
            <summary>
            Gets the name of the XML tag used for representation of Expression (an all its descendants) object in XML files.
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads expression from XML.
            </summary>
            <param name="reader">XmlReader object positioned on the expression node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads expression from dictionary object (used when we load query from JSON).
            </summary>
            <param name="dict">IDictionary object which contains all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.SaveToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.SaveToJsonDictCore(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            This is an abstract method which should be overridden in descendant classes.
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves expression to XML writer.
            </summary>
            <param name="writer">An XmlWriter object.</param>
            <param name="xmlTagName">Name of the XML tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves to XML writer.
            </summary>
            <param name="writer">An XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.WriteXmlTagStart(System.Xml.XmlWriter)">
            <summary>
            Writes the expression XML tag start.
            </summary>
            <param name="writer">XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.WriteXmlTagStart(System.Xml.XmlWriter,System.String)">
            <summary>
            Writes the expression XML tag start.
            </summary>
            <param name="writer">XmlWriter object.</param>
            <param name="tagName">Name of the tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.OnContentChange(System.EventArgs)">
            <summary>
            Raises the ContentChange event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.AssignExpr(Korzh.EasyQuery.EqExpression)">
            <summary>
            Assigns some expression to this one.
            This method just does nothing in the base class but can perform some actions in Expression descendants.
            </summary>
            <param name="expr">An <see cref="T:Korzh.EasyQuery.EqExpression"/> object</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.ContentChanged">
            <summary>
            Invoke ContentChange event
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.EqExpression.ContentChange">
            <summary>
            This event is raised after expression was changed
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Write the content of the expression to JSON 
            </summary>
            <param name="writer">A instance of JsonWriter </param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Write the content of the expression to JSON  (asynchronous way).
            </summary>
            <param name="writer">A instance of JsonWriter </param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes all experssion properties to JSON. 
            This method must be overriden in the descendant classes
            </summary>
            <param name="writer">A JsonWriter</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes all experssion properties to JSON (asynchronous way). 
            This method must be overriden in the descendant classes
            </summary>
            <param name="writer">A JsonWriter</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.ReadFromJson(Korzh.EasyQuery.DataModel,Newtonsoft.Json.JsonReader)">
            <summary>
            Reads one expression from JSON.
            This static function recognizes the expression type and creates an instance of appropriate class.
            </summary>
            <param name="model">The model</param>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.ReadFromJsonAsync(Korzh.EasyQuery.DataModel,Newtonsoft.Json.JsonReader)">
            <summary>
            Reads one expression from JSON.(asynchronous way).
            This static function recognizes the expression type and creates an instance of appropriate class.
            </summary>
            <param name="model">The model</param>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one expression property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpression.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one expression property from JSON  (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ExprList">
            <summary>
            Represents list of expression objects.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ExprList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ExprList"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EqExpressionException">
            <summary>
            Represents errors that occur during expressions processing
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.EqExpressionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EqExpressionException"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EqExpressionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EqExpressionException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.IExpressionCreator">
            <summary>
            Represents special interface used for definition new (custom) types of expression
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.IExpressionCreator.Create(Korzh.EasyQuery.DataModel,System.Int32)">
            <summary>
            Creates an instance of Expression.
            </summary>
            <returns>Expression object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.IExpressionCreator.CreateByClassName(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Creates an instance of Expression by its old class name
            </summary>
            <returns>Expression object.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.QueryExpr">
            <summary>
            Represents a sub-query expression
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryExpr"/> class.
            </summary>
            <param name="model">A DataModel object.</param>
        </member>
        <member name="P:Korzh.EasyQuery.QueryExpr.Tag">
            <summary>
            Get the expression's tag - a special identifier that is used to distinguish the type of the expression .
            </summary>
            <value>Expression's tag.</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.TagToOldClassName(System.Int32)">
            <summary>
            Converts the expression's tag value to the name of old expression class (like "CONST" or "ENTATTR").
            </summary>
            <param name="tag">The tag.</param>
            <returns>System.String.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.QueryExpr.Kind">
            <summary>
            Gets the expression kind.
            </summary>
            <value>The expression kind</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryExpr.DataType">
            <summary>
            Gets or sets the data type.
            </summary>
            <value>The type of expression data</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryExpr.IsPlainSql">
            <summary>
            Gets a value indicating whether this instance contains a plain SQL statement.
            </summary>
            <value><c>true</c> if this instance is plain SQL; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.CreateQuery">
            <summary>
            Creates a new query object.
            </summary>
            <returns>Query.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.QueryExpr.Query">
            <summary>
            Gets or sets the query.
            </summary>
            <value>The query.</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads expression from <see cref="T:System.Xml.XmlReader"/> object.
            </summary>
            <param name="reader"><see cref="T:System.Xml.XmlReader"/> object positioned on the expression node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves expression to <see cref="T:System.Xml.XmlWriter"/> object.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> object.</param>
            <param name="tagName">Name of the XML tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads expression from IDictionary object (used when we load query from JSON).
            </summary>
            <param name="dict">IDictionary object which contains all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.SaveToJsonDictCore(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves expression's properties to dictionary (used to serialize expression into JSON)
            This is an abstract method which should be overridden in descendant classes.
            </summary>
            <param name="dict">IDictionary object which will contain all expression properties.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.WritePropertiesToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes expression properties to JSON.
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes expression properties to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads the expression properties from JSON
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryExpr.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads the expression properties from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.IMacroValue">
            <summary>
            Represents one macro value.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.IMacroValue.ID">
            <summary>
            Gets the macro ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Korzh.EasyQuery.IMacroValue.Count">
            <summary>
            Gets the count of values returned by this macro
            </summary>
            <value>The count of values returned by this macro.</value>
        </member>
        <member name="M:Korzh.EasyQuery.IMacroValue.GetValue(System.Int32)">
            <summary>
            Gets the value by its index.
            </summary>
            <param name="index">The index of value.</param>
            <returns>The value</returns>
        </member>
        <member name="P:Korzh.EasyQuery.IMacroValue.Value">
            <summary>
            Returns the first value in list.
            It is useful for macros which hold only single value
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.IMacroValue.DataType">
            <summary>
            Macro data type
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.SimpleMacroValue">
            <summary>
            Represents one macro value.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SimpleMacroValue.ID">
            <summary>
            Gets the macro ID.
            </summary>
            <value>The ID.</value>
        </member>
        <member name="P:Korzh.EasyQuery.SimpleMacroValue.Count">
            <summary>
            Gets the count of values returned by this macro
            </summary>
            <value>The count of values returned by this macro.</value>
        </member>
        <member name="M:Korzh.EasyQuery.SimpleMacroValue.GetValue(System.Int32)">
            <summary>
            Gets the value by its index.
            </summary>
            <param name="index">The index of value.</param>
            <returns>The value</returns>
        </member>
        <member name="P:Korzh.EasyQuery.SimpleMacroValue.Value">
            <summary>
            Returns the first value in list.
            It is useful for macros which hold only single value
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SimpleMacroValue.DataType">
            <summary>
            Gets or sets macro data type
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.SimpleMacroValue.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.SimpleMacroValue"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Korzh.EasyQuery.MacroList">
            <summary>
            Represents a list of <see cref="T:Korzh.EasyQuery.IMacroValue"/> objects
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.MacroList.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ExprList"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ObjectGraph`1">
            <summary>
            Represents a graph structure. Each node in graph - is an object of type T.
            </summary>
            <typeparam name="T">Any type.</typeparam>
        </member>
        <member name="P:Korzh.EasyQuery.ObjectGraph`1.Root">
            <summary>
            Gets or sets the root of the graph.
            </summary>
            <value>The root.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ObjectGraph`1.Parent">
            <summary>
            Gets the graph parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.LCA(`0,`0,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Calculates Lowest Common Ancestor for 2 vertices
            </summary>
            <param name="vertex1">First vertex.</param>
            <param name="vertex2">Second vertex</param>
            <param name="usedVertices">The list of used vertices.</param>
            <returns>T.</returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.AddVertex(`0)">
            <summary>
            Adds the vertex (node) into the graph.
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.RemoveVertex(`0)">
            <summary>
            Removes the vertex (node) from the graph.
            </summary>
            <param name="vertex">The vertex.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.AddEdge(`0,`0)">
            <summary>
            Adds the edge (a connection between two nodes)
            </summary>
            <param name="vertexFrom">The first vertex in node</param>
            <param name="vertexTo">The second vertex in node.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.ContainsVertex(`0)">
            <summary>
            Determines whether this graph contains the specified vertex.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns><c>true</c> if the graph contains specified vertex; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.ObjectGraph`1.Vertices">
            <summary>
            Gets the list of all vertices.
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.BreadthFirstSearch(`0)">
            <summary>
            Breadthes-first search in the graph for specified vertex.
            </summary>
            <param name="vertex">The vertex.</param>
            <returns>IDictionary&lt;T, T&gt; object which contains pairs node-parent that we got during the search.</returns>
            <exception cref="T:System.ArgumentNullException">The vertex to start search from.</exception>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectGraph`1.Clear">
            <summary>
            Clears the graph.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ObjectModelType">
            <summary>
            Represents a vertex of the entity graph defined in <see cref="P:Korzh.EasyQuery.Linq.Graph"/>. 
            Used in <see cref="M:Korzh.EasyQuery.DataModel.LoadFromContext(System.Type)"/> method
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectModelType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ObjectModelType"/> class.
            </summary>
            <param name="type">The type.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ObjectModelType.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectModelType.Equals(Korzh.EasyQuery.ObjectModelType)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectModelType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The object to compare with the current object.</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ObjectModelType.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.EdgeInfo">
            <summary>
            Represents edges for entity graph defined in some <see cref="T:Korzh.EasyQuery.ObjectGraph`1"/> object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.EdgeInfo.OuterType">
            <summary>
            Gets or sets the outer vertex (in graph) of the edge.
            </summary>
            <value>The outer vertex of the edge.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EdgeInfo.InnerType">
            <summary>
            Gets or sets the inner vertex of the edge.
            </summary>
            <value>The inner vertex of the edge.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EdgeInfo.OuterProperty">
            <summary>
            Gets or sets the property in outer vertex.
            </summary>
            <value>The property the property in outer vertex.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EdgeInfo.InnerProperty">
            <summary>
            Gets or sets the property in inner vertex.
            </summary>
            <value>The the property in inner vertex.</value>
        </member>
        <member name="T:Korzh.EasyQuery.EntityGraph">
            <summary>
            Represents the entity graph created during the loading of the model from some context type 
            Implements the <see cref="T:Korzh.EasyQuery.ObjectGraph`1" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.ObjectGraph`1" />
        </member>
        <member name="M:Korzh.EasyQuery.EntityGraph.GetCollectionName(System.Type)">
            <summary>
            Used to get the name of the collection in context
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityGraph.SetCollectionName(System.Type,System.String)">
            <summary>
            Sets the name of the collection.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityGraph.GetNavigationPropertyName(System.Type,System.Type)">
            <summary>
            Gets the name of the navigation property.
            </summary>
            <param name="from">The type which the requested navigation property belongs to.</param>
            <param name="to">The type that references the requested property </param>
            <returns>The name of the property.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.EntityGraph.SetNavigationPropertyName(System.Type,System.Type,System.String)">
            <summary>
            Sets the name of the navigation property.
            </summary>
            <param name="from">The type which the requested navigation property belongs to.</param>
            <param name="to">The type that references the requested property </param>
            <param name="name">The name.</param>
        </member>
        <member name="P:Korzh.EasyQuery.EntityGraph.ContextType">
            <summary>
            Gets or sets the type of the context.
            </summary>
            <value>The type of the context.</value>
        </member>
        <member name="P:Korzh.EasyQuery.EntityGraph.IsEmpty">
            <summary>
            Returns <see langword="true"/> if this graph is empty; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EntityGraph.UpdateEntityJoinInfo(System.Type,System.Type,System.String,System.String)">
            <summary>
            Updates the information about some edge (join) in the entity graph.
            This method adds new edge if it's not defined yet or update the existing one.
            </summary>
            <param name="outerType">Outer vertex.</param>
            <param name="innerType">Inner vertex.</param>
            <param name="outerPropertyName">Name of the property in outer vertex.</param>
            <param name="innerPropertyName">Name of the property in inner vertex.</param>
        </member>
        <member name="M:Korzh.EasyQuery.EntityGraph.GetEdgeInfo(Korzh.EasyQuery.ObjectModelType,Korzh.EasyQuery.ObjectModelType)">
            <summary>
            Gets the information about some edge in entity graph (see <see cref="T:Korzh.EasyQuery.EntityGraph"/> for details).
            </summary>
            <param name="t1">The first vertex of graph edge.</param>
            <param name="t2">The second vertex of graph edge.</param>
            <returns>EdgeInfo.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Operator">
            <summary>
            Represents a logical expression or "predicate". For example: "less than", "is equal to", "starts with".
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Operator"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.Operands">
            <summary>
            Gets the operands for this operator.
            </summary>
            <remarks>
            If this list is empty - then all operands have the same type defined in <see cref="P:DefaultOperand"/>.
            </remarks>
            <value>
            The list of operands.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.DefaultOperand">
            <summary>
            Gets the defaults settings of operator operands. 
            </summary>
            <value>An Operand object with default settings.</value>
            <remarks>Unknown type means that operands have the same type as base condition expression.</remarks>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.GetOperand(System.Int32)">
            <summary>
            Gets the operand of current operator by its index.
            </summary>
            <param name="operandIndex">Index of the operand. Zero-based. Usually operand #0 is some entity attribute</param>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.IsRange">
            <summary>
            Gets or sets a value indicating whether this operator requires range values so first value must be less than the second one.
            </summary>
            <value>
            	<c>true</c> if this operator needs range values; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.#ctor(Korzh.EasyQuery.DataModel,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Operator" /> class with specified parameters.
            </summary>
            <param name="model">The model.</param>
            <param name="id">Operator ID.</param>
            <param name="aCaption">Operator caption.</param>
            <param name="aExpr">Operator expression.</param>
            <param name="aDisplayFormat">Operator display format.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.CalcParamCount">
            <summary>
            Calculates the count of the parameters.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.ID">
            <summary>
            Gets or sets the operator ID.
            </summary>
            <value>Text value that represents the ID e.g. "StartsWith"</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.Caption">
            <summary>
            Gets or sets the operator caption.
            </summary>
            <value>Text value that represents operator caption e.g. "is equal to"</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.DisplayFormat">
            <summary>
            Gets or sets the display format of operator.
            </summary>
            <value>DisplayFormat string.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.MainText">
            <summary>
            Gets the main part of operator's DisplayFormat (this text will be shown as link in query panel)
            </summary>
            <value>The main text.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.ParamCount">
            <summary>
            Gets the number of parameters which are taken by the operator.
            </summary>
            <value>Number of parameters. For example: "is equal to" takes two parameters (field and constant) and "is null" only one (field)</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.Expr">
            <summary>
            Gets or sets the operator expression.
            </summary>
            <value>Text that represetns operator expression</value>
            <remarks>Operator expression  is used during SQL statements creation. 
            It specify the final representation of some condition in SQL. 
            Usually it looks like the following: {expr1}{op}{expr2}</remarks>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.ConstValueFormat">
            <summary>
            Gets or sets the format of constant values. This property is used to process LIKE and similar operators
            </summary>
            <value>The format of constant values.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.MathSymbol">
            <summary>
            Gets the math symbol which represents operator.
            </summary>
            <value>The math symbol whic represents operator.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.IsCondition">
            <summary>
            Gets or sets a value indicating whether this operator instance represents custom condition.
            </summary>
            <value>
            	<c>true</c> if this instance is custom condition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.Group">
            <summary>
            Gets or sets the group which this operator belongs to.
            </summary>
            <value>An <see cref="T:Korzh.EasyQuery.OperatorGroup"/> object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.AppliedTypes">
            <summary>
            Gets the list of applied types for this operator.
            </summary>
            <value>The list of applied types for this operator</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.ValueKind">
            <summary>
            Gets or sets the kind of the right-side value accepted of operator.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.CaseInsensitive">
            <summary>
            Gets or sets a value indicating whether the operator is case insensative.
            </summary>
            <value><c>true</c> if operator is case insensative; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operator.DefaultEditor">
            <summary>
            Gets or sets the default value editor for operator.
            </summary>
            <value>The default value editor. null value represent AUTO value editor.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.SaveAttributes(System.Xml.XmlWriter)">
            <summary>
            Saves the attributes.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.SaveNodes(System.Xml.XmlWriter)">
            <summary>
            Saves the nodes.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.LoadNodes(System.Xml.XmlReader)">
            <summary>
            Loads the nodes.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.LoadAttribute(System.String,System.String)">
            <summary>
            Loads the attribute.
            </summary>
            <param name="propname">The propname.</param>
            <param name="propvalue">The propvalue.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.SaveToJsonDict">
            <summary>
            Saves to dictionary object (for serialization to JSON).
            </summary>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads operator's content from the JSON (asynchronous way).
            </summary>
            <param name="reader">An instance of JsonReader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads operator's content from the JSON (asynchronous way).
            </summary>
            <param name="reader">An instance of JsonReader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes operator's content to JSON.
            </summary>
            <param name="writer">The writer</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operator.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes operator's content to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.OperatorList">
            <summary>
            Represents list of operators.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorList.IndexByID(System.String)">
            <summary>
            Find operator list index by ID.
            </summary>
            <param name="OpID">ID of operator.</param>
            <returns>Operator index in the list or -1 if operator with specified ID was not found</returns>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorList.FindByID(System.String)">
            <summary>
            Finds the operator by ID.
            </summary>
            <param name="OpID">ID of operator.</param>
            <returns>Operator object or null if operator with specified ID was not found.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorList.AddByIDs(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Adds opereators by theirs IDs stored in comma-delimited string.
            </summary>
            <param name="model">The model.</param>
            <param name="ids">The ids.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorList.RemoveByIDs(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Removes opereators by theirs IDs stored in comma-delimited string.
            </summary>
            <param name="model">The DataModel object.</param>
            <param name="ids">The IDs of operators which should be removed.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorList.CopyFrom(Korzh.EasyQuery.OperatorList)">
            <summary>
            Copies operators from another list.
            </summary>
            <param name="operators">An OperatorList object to copy from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorList.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Korzh.EasyQuery.OperatorStore">
            <summary>
            This class represents the list of operators associated with a particular DataModel
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorStore.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.OperatorStore"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorStore.RemoveItem(System.Int32)">
            <summary>
            Removes the item.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorStore.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes all operator's properties to JSON.
            </summary>
            <param name="writer">A JsonWriter object to save operator's content to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorStore.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes all operator's properties to JSON (asynchronous way).
            </summary>
            <param name="writer">A JsonWriter object to save operator's content to.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorStore.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads all operator's properties from JSON.
            </summary>
            <param name="reader">The reader</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorStore.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads all operator's properties from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.OperatorGroupKind">
            <summary>
            Represents different groups of operators
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OperatorGroupKind.Custom">
            <summary>Custom group (all operators are listed directly) </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OperatorGroupKind.Common">
            <summary>The most common operators (like "equals", "less than", etc.) </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OperatorGroupKind.String">
            <summary>String operators (like "starts with", "contains", etc.) </summary>
        </member>
        <member name="F:Korzh.EasyQuery.OperatorGroupKind.DateTime">
            <summary>Date/time operators</summary>
        </member>
        <member name="F:Korzh.EasyQuery.OperatorGroupKind.Boolean">
            <summary>Boolean operators ("is true", "is not true") </summary>
        </member>
        <member name="T:Korzh.EasyQuery.OperatorGroup">
            <summary>
            Represents a group of operators
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.OperatorGroup.Name">
            <summary>
            Gets or sets the name of the group.
            </summary>
            <value>The name of the group.</value>
        </member>
        <member name="P:Korzh.EasyQuery.OperatorGroup.AppliedTypes">
            <summary>
            Gets the list of applied types for this operator.
            </summary>
            <value>The list of applied types for this operator</value>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorGroup.#ctor(System.String,Korzh.EasyQuery.DataType[])">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorGroup"/> class.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="appliedTypes">The applied types.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorGroup.#ctor(System.String,Korzh.EasyQuery.DataTypeList)">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorGroup"/> class.
            </summary>
            <param name="groupName">Name of the group.</param>
            <param name="appliedTypes">The applied types.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorGroup.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Korzh.EasyQuery.OperatorGroupList">
            <summary>
            Represents list of operator groups
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorGroupList.#ctor(Korzh.EasyQuery.OperatorGroup[])">
            <summary>
            Initializes a new instance of the <see cref="T:OperatorGroupList"/> class.
            </summary>
            <param name="groups">The groups.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperatorGroupList.FindByName(System.String)">
            <summary>
            Finds the OperatorGroup by its name.
            </summary>
            <param name="groupName">Name of the group.</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.Operand">
            <summary>
            Represents one operand in some operator's expression
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.DataType,Korzh.EasyQuery.DataKind,Korzh.EasyQuery.ValueEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Operand" /> class.
            </summary>
            <param name="model">The model.</param>
            <param name="dataType">Type of the operand.</param>
            <param name="kind">Operand's kind (Scalar, List, etc).</param>
            <param name="editor">Value editor. An instance of <see cref="T:Korzh.EasyQuery.ValueEditor" /> class.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.#ctor(Korzh.EasyQuery.Operand)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Operand" /> class by existing <see cref="T:Korzh.EasyQuery.Operand" />.
            </summary>
            <param name="source">The source <see cref="T:Korzh.EasyQuery.Operand" />.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Operand" /> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.Name">
            <summary>
            Gets or sets the name of operand.
            </summary>
            <value>The name of operand.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.DataType">
            <summary>
            Gets or sets the type of the data.
            </summary>
            <value>
            The type of the operand
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.Kind">
            <summary>
            Gets or sets the kind of operand (scalar, list, etc)
            </summary>
            <value>
            An instance of <see cref="T:Korzh.EasyQuery.DataKind"/> enumeration. 
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.Editor">
            <summary>
            Gets or sets the value editor associated with this operand.
            </summary>
            <value>
            An instance of <see cref="T:Korzh.EasyQuery.ValueEditor"/> class
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.DefaultValue">
            <summary>
            Gets or sets the default value for this operand.
            </summary>
            <value>The default operand value.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.DefaultText">
            <summary>
            Gets the text for default operand value.
            </summary>
            <value>The text for default operand value.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes operand's content to JSON.
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes operand's content to JSON (asynchronous way).
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads all operand's properties from JSON.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads all operand's properties from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves operand content to to XML writer.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads operand properties from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Operand.Model">
            <summary>
            Gets or sets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.LoadNodes(System.Xml.XmlReader)">
            <summary>
            Loads the nodes.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.SaveToJsonDict">
            <summary>
            Saves to dictionary object (for serialization to JSON)
            </summary>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="F:Korzh.EasyQuery.Operand.index">
            <summary>
            The index of operand (starts from 1)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Operand.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.OperandList">
            <summary>
            Represents list of operands.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.OperandList"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Korzh.EasyQuery.OperandList.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads operand list form XML.
            </summary>
            <param name="reader">An <see cref="T:System.Xml.XmlReader"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves operand list to XML.
            </summary>
            <param name="writer">An <see cref="T:System.Xml.XmlWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of operands from JSON.
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of operands from JSON (asynchronous way).
            </summary>
            <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of operands to JSON.
            </summary>
            /// <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of operands to JSON (asynchronous way).
            </summary>
            <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter"/> object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.OperandList.InsertItem(System.Int32,Korzh.EasyQuery.Operand)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Query">
            <summary>
            Represents internal query structure. 
            </summary>
            <remarks>
            Query class is an invisible "engine" of EasyQuery library. It perform the following main three tasks: 
            <list type="bullet">
            <item>
            <description>Stores internal query structure;</description>
            </item>
            <item>
            <description>Saves/loads queries into external file or XML string;</description>
            </item>
            <item>
            <description>Builds some statement based on current query structure.</description>
            </item>
            </list>
             Query class uses information about data model through its Model property.
             QueryPanel component uses Query class to visualize query structure stored in it and provides 
             user interface for modifications of the current query.
            </remarks>
        </member>
        <member name="T:Korzh.EasyQuery.Query.Error">
            <summary>
            Query exception class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.Error.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Query.Error"/> class.
            </summary>
            <param name="msg">MSG.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.#cctor">
            <summary>
            Initializes the <see cref="T:Korzh.EasyQuery.Query"/> class.
            Registers the main conditions types.
            </summary> 
        </member>
        <member name="M:Korzh.EasyQuery.Query.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Query" /> class.
            </summary>
            <param name="model">A DataModel object this query is associated with.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Query.ExtraData">
            <summary>
            Conatains user-defined extra data for the current query.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.InnerData">
            <summary>
            Conatains some internal data (lie facets) associated with the current query.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.#ctor(Korzh.EasyQuery.DataModel,Korzh.EasyQuery.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Query" /> class.
            </summary>
            <param name="model">A DataModel object this query is associated with.</param>
            <param name="parentQuery">The parent query (in case we are creating a sub-query)</param>
        </member>
        <member name="P:Korzh.EasyQuery.Query.SyncColSortOrder">
            <summary>
            Gets or sets a value indicating whether the order of columns must be synchronized with their sorting order.
            </summary>
            <value><c>true</c> if the order of columns is synchronized with their sorting order; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.OnSortOrderChanged(Korzh.EasyQuery.SortOrderChangedEventArgs)">
            <summary>
            Raises the <see cref="E:SortOrderChanged"/> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.SortOrderChangedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Korzh.EasyQuery.Query.SortOrderChanged">
            <summary>
            Occurs when the list of sorted columns was changed.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.Query.ColumnsChanging">
            <summary>
            This event is raised before the list of query columns or a particular column is going to be changed.
            For example some column will be added or deleted.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.OnColumnsChanging(Korzh.EasyQuery.ColumnsChangingEventArgs)">
            <summary>
            Raises the <see cref="E:ColumnsChanging" /> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.ColumnsChangingEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Korzh.EasyQuery.Query.ColumnsChanged">
            <summary>
            This event is raised when the list of query result columns or a particular column was changed.
            For example some column was added or some was deleted.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.OnColumnsChanged(Korzh.EasyQuery.ColumnsChangeEventArgs)">
            <summary>
            Raises the ColumnsChanged event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.ColumnsChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="F:Korzh.EasyQuery.Query._rootGroup">
            <summary>
            The root condition of the query
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Query.serializationQueryXml">
            <summary>
            Serialized query
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Query.sortedColumns">
            <summary>
            List of sorted columns
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.SortedColumns">
            <summary>
            Gets the list of sorted columns.
            </summary>
            <value>The sorted columns.</value>
        </member>
        <member name="F:Korzh.EasyQuery.Query.justSortedColumns">
            <summary>
            List of just sorted coumns
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.JustSortedColumns">
            <summary>
            Gets the list of "just sorted" columns (the columns which will occur only in ORDER BY clause)
            </summary>
            <value>The ColumnStore object which represents the list of "just sorted" columns.</value>
        </member>
        <member name="F:Korzh.EasyQuery.Query.columns">
            <summary>
            List of all query columns
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Columns">
            <summary>
            Gets the columns.
            </summary>
            <value>List of result columns used in query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Parent">
            <summary>
            Gets the parent query.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.GetParentQueryRootEntity">
            <summary>
            Gets the entities from parent query.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Query.ExtraColumns">
            <summary>
            Gets or sets the extra columns.
            </summary>
            <value>
            The extra columns.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Texts">
            <summary>
            Gets an instance of TextStorage object which holds all text resources used in this assembly
            </summary>
            <value>TextStorage class instance</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateColumn(Korzh.EasyQuery.EqExpression,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates an empty column.
            If `expr` and `caption` parameters are not used they must be set later (to make the new object a proper column)
            </summary>
            <param name="expr">The expression this column is based on.</param>
            <param name="caption">The column's caption.</param>
            <param name="sortDirection">The sorting direction (None by default).</param>
            <returns>Column.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateColumnCore">
            <summary>
            Creates the column object. Can be overridden in descendant classes
            </summary>
            <returns>Column.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSimpleColumn(Korzh.EasyQuery.EntityAttr,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates a column by EntityAttr object.
            </summary>
            <param name="attr">The entity attribute.</param>
            <param name="caption">The caption.</param>
            <param name="sorting">The sorting direction (None by default).</param>
            <returns>Column.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSimpleColumn(System.String,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates a simple column.
            </summary>
            <param name="attrId">The attribute identifier. It can be attribute's ID, SQL expression (like TableName.FieldName) or attribute's caption.</param>
            <param name="caption">The caption for new column.</param>
            <param name="sorting">The sorting for new column.</param>
            <returns>Column.</returns>
            <exception cref="T:Korzh.EasyQuery.Query.Error">Can't find attribute ' + attrId + '</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateColumn(System.String,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates a simple column
            </summary>
            <param name="attrId">The attribute's ID.</param>
            <param name="caption">The caption.</param>
            <param name="sorting">The sorting.</param>
            <returns>Column.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateAggregateColumn(System.String,System.String,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates an aggregate column.
            </summary>
            <param name="attrId">The attribute identifier. It can be attribute's ID, SQL expression (like TableName.FieldName) or attribute's caption.</param>
            <param name="funcId">The aggregate function ID (like "SUM" or "COUNT").</param>
            <param name="caption">The caption for new column.</param>
            <param name="sorting">The sorting for new column.</param>
            <returns>Column.</returns>
            <exception cref="T:Korzh.EasyQuery.Query.Error">Can't find attribute ' + attrId + '</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreatePredicate">
            <summary>
            Creates a new condition group.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateConditionGroup">
            <summary>
            Creates a new condition group.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSilentConditionGroup">
            <summary>
            Creates a new "silent" condition gropu.
            Here "silent" means neither this group nor its conditions will raise ConditionsChanged event in associated query
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateRootCondition">
            <summary>
            Creates the root condition.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.UseDefaultNumericValues">
            <summary>
            Indicates whether we need to set the default values for numeric expressions in conditions.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSimpleCondition">
            <summary>
            Creates a simple condition.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSimpleCondition(System.String,System.String,System.String[])">
            <summary>
            Creates a simple condition with indicated attribute, operator and values.
            </summary>
            <param name="attrId">The ID of attribute used in the left part of condition.</param>
            <param name="operatorId">The ID of operator (like "Equals" or "StartsWith").</param>
            <param name="values">The values for the right part of condition.</param>
            <returns>New instance of <see cref="T:Korzh.EasyQuery.Condition"/> type.</returns>
            <exception cref="T:Korzh.EasyQuery.Query.Error">
            Can't find attribute ' + attrId + '
            or
            Can't find operator ' + operatorId + '
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSimpleCondition(System.String,System.String,Korzh.EasyQuery.EqExpression[])">
            <summary>
            Creates a simple condition with indicated attribute, operator and values.
            </summary>
            <param name="attrId">The ID of the entity attribute used in the left part of the condition.</param>
            <param name="operatorId">The ID of operator (like "Equal" or "StartsWith").</param>
            <param name="values">The list of values for the right part of the condition.</param>
            <returns>New instance of <see cref="T:Korzh.EasyQuery.Condition"/> type.</returns>
            <exception cref="T:Korzh.EasyQuery.Query.Error">
            Can't find attribute ' + attrId + '
            or
            Can't find operator ' + operatorId + '
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSimpleCondition(Korzh.EasyQuery.EntityAttr,Korzh.EasyQuery.Operator,Korzh.EasyQuery.EqExpression[])">
            <summary>
            Creates a simple condition with indicated attribute, operator and values.
            </summary>
            <param name="attr">The attribute used in the left part of condition.</param>
            <param name="op">The operator.</param>
            <param name="exprs">The values for the right part of condition passed as array of expressions (see <see cref="T:Korzh.EasyQuery.Expression"/> class). </param>
            <returns>New instance of <see cref="T:Korzh.EasyQuery.Condition"/> type.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateEntityAttrExpr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Creates an entity attribute expression.
            </summary>
            <param name="attr">The entity attribute (an instance of EntityAttr class).</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateEntityAttrExpr(System.String)">
            <summary>
            Creates an entity attribute expression by attribute's ID.
            </summary>
            <param name="attrId">The ID of desired entity attribute.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateParentEntityAttrExpr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Creates a parent entity attribute expression.
            </summary>
            <param name="attr">The attribute we need to create a parent expression for.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateAggrFuncExpr(System.String,Korzh.EasyQuery.EqExpression)">
            <summary>
            Creates an aggregate function expression.
            </summary>
            <param name="funcID">The func ID.</param>
            <param name="argumentExpr">The expr which represents function's argument.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateQueryExpr">
            <summary>
            Creates a sub-query expression.
            </summary>
            <returns>An EqExpression object that represents a sub-query expression</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateSubQuery">
            <summary>
            Creates the subquery.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Root">
            <summary>
            Gets the root condition of the query.
            </summary>
            <value>The root condition of the query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.ExtraConditions">
            <summary>
            Gets the list of extra conditions for this query.
            These conditions are not visible to end-users but included into result SQL statement as all others (defined in <see cref="P:Korzh.EasyQuery.Query.Root"/> condition group).
            </summary>
            <value>The list of extra conditions.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.IsEmpty">
            <summary>
            Gets a value indicating whether this query is empty (no columns and no conditions are defined).
            </summary>
            <value><c>true</c> if this query is empty; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CheckModelObject(Korzh.EasyQuery.DataModel)">
            <summary>
            Checks if model object has appropriate type and raise exception if not
            </summary>
            <param name="model">An object of DataModel type (or one of its descendants)</param>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Model">
            <summary>
            Gets or sets the data model used in this query.
            </summary>
            <value>The data model used in this query.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SetModel(Korzh.EasyQuery.DataModel)">
            <summary>
            Sets the data model and performs some initialization procedures.
            </summary>
            <param name="newModel">The new model.</param>
        </member>
        <member name="E:Korzh.EasyQuery.Query.ModelChanged">
            <summary>
            Occurs after the model has been changed.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.GetConditionsText(Korzh.EasyQuery.QueryTextFormats)">
            <summary>
            Returns human-readable text that represents current query conditions
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.AddConditionGroup(Korzh.EasyQuery.Condition,System.Int32)">
            <summary>
            Creates a new condition group and adds it into the query.
            </summary>
            <param name="parent">The parent condition group.</param>
            <param name="index">The index of the new condition inside the parent one.</param>
            <returns>New created Condition object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.AddSimpleColumn(System.String,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates a new column by attribute's ID and adds it into query.
            </summary>
            <param name="attrId">The attribute identifier. It can be attribute's ID, SQL expression (like TableName.FieldName) or attribute's caption.</param>
            <param name="caption">The caption for new column.</param>
            <param name="sorting">The sorting for new column.</param>
            <returns>Column.</returns>
            <exception cref="T:Korzh.EasyQuery.Query.Error">Can't find attribute ' + attrId + '</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.AddAggregateColumn(System.String,System.String,System.String,Korzh.EasyQuery.SortDirection)">
            <summary>
            Creates a new aggregate column by attribute's ID and aggregate function nameand.
            </summary>
            <param name="attrId">The attribute identifier. It can be attribute's ID, SQL expression (like TableName.FieldName) or attribute's caption.</param>
            <param name="funcId">The aggregate function ID.</param>
            <param name="caption">The caption for new column.</param>
            <param name="sorting">The sorting for new column.</param>
            <returns>Column.</returns>
            <exception cref="T:Korzh.EasyQuery.Query.Error">Can't find attribute ' + attrId + '</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.GetOneValueForAttr(Korzh.EasyQuery.EntityAttr)">
            <summary>
            Gets the one value set in some query condition for indicated entity attribute
            </summary>
            <param name="attr">The attr.</param>
            <returns></returns>
        </member>
        <member name="F:Korzh.EasyQuery.Query.queryName">
            <summary>
            User-defined name of the query
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Name">
            <summary>
            Gets or sets the name of the query.
            </summary>
            <value>The name of the query.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.ID">
            <summary>
            Gets or sets the ID of this query.
            </summary>
            <value>Query ID.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.GetFormats">
            <summary>
            Gets query formats (an instance of <see cref="T:Korzh.EasyQuery.QueryFormats"/> class).
            </summary>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CreateFormats">
            <summary>
            Creates an instance of QueryFormats (or its descendant).
            </summary>
            <returns>The object of <see cref="T:Korzh.EasyQuery.QueryFormats"/> class.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Query.Formats">
            <summary>
            Gets or sets the formats 
            </summary>       
        </member>
        <member name="P:Korzh.EasyQuery.Query.Description">
            <summary>
            Gets or sets the query description.
            </summary>
            <value>The query description.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.StoreModelPath">
            <summary>
            Gets or sets a value indicating whether this Query object should store the path 
            to corresponding data model and restore it during query loading.
            </summary>
            <value>
            <c>true</c> if we need to store model path with query definition;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.StoreOptions">
            <summary>
            Gets or sets a value indicating whether this Query object should store the options 
            and restore them during query loading.
            </summary>
            <value>
            <c>true</c> if we need to store options with query definition; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.FilePath">
            <summary>
            Gets the query file path. It is automatically assigned when you use LoadFromFile method.
            </summary>
            <value>The query file path.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Query.TimezoneOffset">
            <summary>
            Timezone offset (in minutes) for all dates used in the query
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Query.LocaleId">
            <summary>
            Gets or sets the locale identifier.
            </summary>
            <value>The locale identifier.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CoreClear">
            <summary>
            Clears all query content. Can be overriden in derived classes.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.Clear">
            <summary>
            Clears the query conditions and result columns.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.BeginUpdate">
            <summary>
            Turns on the "updating" state.
            Any changes occured during this state will not initiate any "changed" event 
            (like <see cref="E:Korzh.EasyQuery.Query.ColumnsChanged"/> or <see cref="E:Korzh.EasyQuery.Query.ConditionsChanged"/>) until <see cref="M:Korzh.EasyQuery.Query.EndUpdate"/> is called.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.EndUpdate">
            <summary>
            Turns the "updating" state off.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.ResyncSortingList(System.Boolean)">
            <summary>
            Resynchronizes the sorting list of columns correspondingly to their order.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.OnConditionsChanged(Korzh.EasyQuery.ConditionsChangeEventArgs)">
            <summary>
            Raises the ConditionsChanged event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.ConditionsChangeEventArgs" /> instance containing the event data.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.OnSubQueryConditionsChanged(Korzh.EasyQuery.ConditionsChangeEventArgs)">
            <summary>
            Raises the <see cref="E:SubQueryConditionsChanged" /> event.
            </summary>
            <param name="e">The <see cref="T:Korzh.EasyQuery.ConditionsChangeEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Korzh.EasyQuery.Query.ConditionsChanged">
            <summary>
            This event is raised when list of query conditions or a particular condition was changed.
            For example some condition was added or some - was deleted.
            </summary>
        </member>
        <member name="E:Korzh.EasyQuery.Query.SubQueryConditionsChanged">
            <summary>
            This event is raised when list of subquery conditions or a particular condition was changed.
            For example some condition was added or some - was deleted.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CheckDataModel">
            <summary>
            Checks the data model object. Generates an exception if Model property has null value.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.Validate">
            <summary>
            Validates this query instance.
            This method throws an exception if query has "ghost" attributes
            </summary>
            <exception cref="T:Korzh.EasyQuery.Query.Error">
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.CleanUp">
            <summary>
            Clean up this query instance.
            This method removes columns and conditions with "ghost" attributes or operators
            </summary>
            <exception cref="T:Korzh.EasyQuery.Query.Error">
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Query.NewModel">
            <summary>
            Creates new model object of appropriate type.
            </summary>
            <returns>New data model.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Query.ModelResolver">
            <summary>
            Gets or sets the model resolver - a functions which allows to get model by its ID.
            </summary>
            <value>The model resolver.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Query.ResolveDataModel(System.String)">
            <summary>
            Resolves the data model by its ID
            </summary>
            <param name="modelId">The model identifier.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromStream(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from XML stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="options">Read options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromXmlStream(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from XML stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="options">Read options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromFile(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from file.
            </summary>
            <param name="path">The path.</param>
            <param name="options">Read options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromXmlFile(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from XML file.
            </summary>
            <param name="path">The path.</param>
            <param name="options">Read options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromString(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from XML string.
            </summary>
            <param name="xml">The XML.</param>
            <param name="options">Read options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromXmlString(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from XML string.
            </summary>
            <param name="xml">The XML.</param>
            <param name="options">Read options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromXmlReader(System.Xml.XmlReader,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from XML reader.
            </summary>
            <param name="reader">The reader.</param>
            <param name="options">Different options which allows you to specify which part of query we should load.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadNode(System.Xml.XmlReader,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads the root node.
            </summary>
            <param name="reader">The reader.</param>
            <param name="rwOptions">Different options which allows you to specify which part of query we should load.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToXmlWriter(System.Xml.XmlWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to XML using XML writer.
            </summary>
            <param name="writer">XmlWriter object.</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveNodes(System.Xml.XmlWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves the root nodes.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">The rw options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToStream(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query XML to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToXmlStream(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query XML to stream.
            </summary>
            <param name="stream">The stream.</param>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToString(Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to string containing the XML.
            </summary>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToXmlString(Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to string containing the XML.
            </summary>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToFile(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to XML file.
            </summary>
            <param name="path">Path to XML file.</param>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToXmlFile(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to XML file.
            </summary>
            <param name="path">Path to XML file.</param>
            <param name="options">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads query from some <see cref="T:System.Collections.IDictionary"/> object. Useful for JSON serialization
            </summary>
            <param name="dict">An instance of <see cref="T:System.Collections.IDictionary"/> </param>\
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonDict(Korzh.EasyQuery.JsonDict,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from some <see cref="T:System.Collections.IDictionary"/> object. Useful for JSON serialization
            </summary>
            <param name="dict">An instance of <see cref="T:System.Collections.IDictionary"/> </param>
            <param name="rwOptions">Different options which allows you to specify which part of query should be loaded.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonDict">
            <summary>
            Saves query into some <see cref="T:System.Collections.IDictionary"/> object. Useful for JSON serialization
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonFile(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to a file in JSON format.
            </summary>
            <param name="filePath">The path to file</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonFileAsync(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to a file in JSON format (asynchronous way).
            </summary>
            <param name="filePath">The path to file</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonStream(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to a stream in JSON format.
            </summary>
            <param name="stream"></param>
            <param name="rwOptions"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonStreamAsync(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to a stream in JSON format (asynchronous way). 
            </summary>
            <param name="stream">The stream</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonObject(Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonObjectAsync(Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to <see cref="T:Newtonsoft.Json.Linq.JObject"/> (asynchronous way). 
            </summary>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonString(Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to string containing the JSON.
            </summary>
            <param name="rwOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.SaveToJsonStringAsync(Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to string containing the JSON (asynchronous way). 
            </summary>
            <param name="rwOptions"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves query to JSON using JSON writer. 
            Calls <see cref="M:Korzh.EasyQuery.Query.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)"/> function.
            </summary>
            <param name="writer"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
             Saves query to JSON using JSON writer (asynchronous way). 
             Calls <see cref="M:Korzh.EasyQuery.Query.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)"/> function.
            </summary>
            <param name="writer"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves content of the query to JSON.
            </summary>
            <param name="writer"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Saves content of the query to JSON (asynchronous way). 
            </summary>
            <param name="writer"></param>
            <param name="rwOptions"></param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonFile(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads the query's content from a JSON file.
            </summary>
            <param name="fileName">The name of the JSON file.</param>
            <param name="rwOptions">Different read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonFileAsync(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads the query's content from a JSON file (asynchronous way). 
            </summary>
            <param name="fileName">The name of the JSON file.</param>
            <param name="rwOptions">Different read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonStream(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from stream containing the JSON 
            </summary>
            <param name="stream">The stream</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonStreamAsync(System.IO.Stream,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from stream containing the JSON (asynchronous way). 
            </summary>
            <param name="stream">The stream</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonObject(Newtonsoft.Json.Linq.JObject,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from <see cref="T:Newtonsoft.Json.Linq.JObject"/>.
            </summary>
            <param name="jObject">The jObject.</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonObjectAsync(Newtonsoft.Json.Linq.JObject,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from <see cref="T:Newtonsoft.Json.Linq.JObject"/> (asynchronous way). 
            </summary>
            <param name="jObject">The jObject.</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonString(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from string containing the JSON.
            </summary>
            <param name="json">The JSON string</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.LoadFromJsonStringAsync(System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from string containing the JSON (asynchronous way).
            </summary>
            <param name="json">The JSON string</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.ReadFromJson(Newtonsoft.Json.JsonReader,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from JSON reader. 
            Calls See <see cref="M:Korzh.EasyQuery.Query.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String,Korzh.EasyQuery.QueryReadWriteOptions)"/> function.
            </summary>
            <param name="reader">The JSON reader</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.ReadFromJsonAsync(Newtonsoft.Json.JsonReader,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Loads query from JSON reader. 
            Calls See <see cref="M:Korzh.EasyQuery.Query.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String,Korzh.EasyQuery.QueryReadWriteOptions)"/> function.
            </summary>
            <param name="reader">The JSON reader</param>
            <param name="rwOptions">Different read-write options. See <see cref="T:Korzh.EasyQuery.QueryReadWriteOptions"/> for details</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Reads the property from JSON reader or skip unused.
            </summary>
            <param name="reader">The JSON reader</param>
            <param name="propName">The property name</param>
            <param name="rwOptions">The property name</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Query.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String,Korzh.EasyQuery.QueryReadWriteOptions)">
            <summary>
            Reads the property from JSON reader or skip unused.
            </summary>
            <param name="reader">The JSON reader</param>
            <param name="propName">The property name</param>
            <param name="rwOptions">The property name</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.QueryReadWriteOptions">
            <summary>
            Represents different options used during query loading or saving 
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.All">
            <summary>
            All query parts will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.Conditions">
            <summary>
            Only conditions will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.Columns">
            <summary>
            Only columns will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.Description">
            <summary>
            Only query description will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.Content">
            <summary>
            Conditions and columns and query description will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.Options">
            <summary>
            Only query options will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.Formats">
            <summary>
            Only query formats will be loaded/saved
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.ClientSide">
            <summary>
            Using this option means that we are going to create query's representation for the client-side scripts.
            Warning: Don't inlcude this option directly, it's for internal use only. Use ClientSideContent instead
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.QueryReadWriteOptions.ClientSideContent">
            <summary>
            Represents the default set of options for serializing a JSON representation of the query for the client-side (without all DB-related info)
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ChangeType">
            <summary>
            Represents type of change that occured
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ChangeType.Total">
            <summary>
            Total change
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ChangeType.Addition">
            <summary>
            New item was added
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ChangeType.Removal">
            <summary>
            Some item was removed
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.ChangeType.Update">
            <summary>
            Some item was changed
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ConditionsChangeEventArgs">
            <summary>
            Provides data for <see cref="E:Korzh.EasyQuery.Query.ConditionsChanged"/> event
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ConditionsChangeEventArgs.What">
            <summary>
            Gets or sets the attribute that shows what exactly was changed.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ConditionsChangeEventArgs.Condition">
            <summary>
            Gets or sets the condition which was changed. Can be null in case of Total change
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ConditionsChangeEventArgs.Info">
            <summary>
            Gets or sets the addtional information of changed condition.
            This property can be used for different purposes.
            For example for ChangeType.Remove events it contains index of removed condition
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsChangeEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Condition,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConditionsChangeEventArgs"/> class.
            </summary>
            <param name="what">What was changed.</param>
            <param name="condition">Condition object.</param>
            <param name="info">Index of changed condition.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsChangeEventArgs.#ctor(Korzh.EasyQuery.ChangeType,Korzh.EasyQuery.Condition)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConditionsChangeEventArgs"/> class.
            </summary>
            <param name="what">What was changed.</param>
            <param name="condition">Condition object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConditionsChangeEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConditionsChangeEventArgs"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ConditionsChangeEventArgs.Default">
            <summary>
            Gets the default ConditionsChangedEventArgs object.
            </summary>
            <value></value>
        </member>
        <member name="T:Korzh.EasyQuery.BaseQueryBuilder">
            <summary>
            Base class for all query builder classes.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.BaseQueryBuilder.Query">
            <summary>
            Gets the query object associated with the builder.
            </summary>
            <value>The query reprensented by an instance of a descendant of <see cref="T:Korzh.EasyQuery.Query"/> class (like DbQuery). </value>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.#ctor(Korzh.EasyQuery.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.BaseQueryBuilder"/> class.
            </summary>
            <param name="query">The query object. See <see cref="P:Korzh.EasyQuery.BaseQueryBuilder.Query"/> property for more information.</param>
        </member>
        <member name="F:Korzh.EasyQuery.BaseQueryBuilder._needParamsReset">
            <summary>
            Indicates whethere we need to reset the list of paramers on query build.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.BaseQueryBuilder.QueryParams">
            <summary>
            Gets the list of query parameters (for parameterized queries)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.SetExtraParams(Korzh.EasyQuery.QueryParamList)">
            <summary>
            Sets the list of extra parameters (mainly for sub-queries)
            </summary>
            <param name="extraParams">
            The list of query parameters (will be filled during the query building.
            It's null by default. In this case the list will be taken from the DbQuery object 
            passed in the first parameter
            </param>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.ResetParamsIfNeeded">
            <summary>
            Reset the list of parameters if its necessary
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.CreateFormats">
            <summary>
            Creates <see cref="T:Korzh.EasyQuery.QueryFormats"/> object compatible with this type of query builder.
            Should be overriden in descendant classes
            </summary>
            <returns></returns>
        </member>
        <member name="P:Korzh.EasyQuery.BaseQueryBuilder.Formats">
            <summary>
            Gets the formats of the result query statement.
            This is a structure which allows you to set different formatting option of generated SQL (or other query language) statements.
            For more information please read <see cref="T:Korzh.EasyQuery.QueryFormats"/> reference.
            </summary>
            <value>The formats.</value>
        </member>
        <member name="P:Korzh.EasyQuery.BaseQueryBuilder.Korzh#EasyQuery#IQueryBuilder#Formats">
            <summary>
            Gets the query formats.
            </summary>
            <value>The formats.</value>
        </member>
        <member name="P:Korzh.EasyQuery.BaseQueryBuilder.Model">
            <summary>
            Gets the model. An instance of <see cref="T:Korzh.EasyQuery.DataModel"/> class or one of its descendants (for example DbModel)
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.GetResult">
            <summary>
            Gets the result object.
            It could be some SQL statement or and an IQueryable object created by LINQ query builder.
            </summary>
            <returns>QueryBuilderResult.</returns>
            <value>The result object.</value>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.CreateResult">
            <summary>
            Creates the result object.
            </summary>
            <returns>QueryBuilderResult.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.BaseQueryBuilder.ResultType">
            <summary>
            Gets the the result type.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="F:Korzh.EasyQuery.BaseQueryBuilder._isParamMode">
            <summary>
            This property indicated whethere generated SQL should include parameters instead of real values.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.BaseQueryBuilder.condFieldName">
            <summary>
            The name of the field in currently processing condition (used for generation of parameter names)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.ProcessMacros(Korzh.EasyQuery.Condition,System.Text.StringBuilder,Korzh.EasyQuery.DataType,Korzh.EasyQuery.ScalarExprOptions)">
            <summary>
            Processes the macro values (both user-defined and default)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.ProcessDefaultMacros(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Processes the default macros such as ${{Today}}, ${{True}} and others.
            </summary>
            <param name="sb">The sb.</param>
            <param name="quoting">if set to <c>true</c> the all macro values must be taken in quotes.</param>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.ProcessScalarValue(Korzh.EasyQuery.Condition,System.String,Korzh.EasyQuery.DataType,Korzh.EasyQuery.ScalarExprOptions)">
            <summary>
            Processes the scalar value and returns SQL (or other query language) expression.
            </summary>
            <param name="cnd">The condition we calculate this scalar value in.</param>
            <param name="value">The original value.</param>
            <param name="dataType">The data type.</param>
            <param name="exprOptions">Different options.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.CalcScalarExpr(Korzh.EasyQuery.Condition,System.String,Korzh.EasyQuery.DataType,Korzh.EasyQuery.ScalarExprOptions)">
            <summary>
            Calculates the scalar value and returns SQL (or other query language) expression.
            This function replaces all macros with their real values first and then call <see cref="M:Korzh.EasyQuery.BaseQueryBuilder.ProcessScalarValue(Korzh.EasyQuery.Condition,System.String,Korzh.EasyQuery.DataType,Korzh.EasyQuery.ScalarExprOptions)"/> method to get the result.
            </summary>
            <param name="cnd">The condition object</param>
            <param name="value">The value.</param>
            <param name="dataType">Type of the data.</param>
            <param name="exprOptions">The expr options.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.BaseQueryBuilder.GetParamExpr(System.String)">
            <summary>
            Gets the parameter expression.
            </summary>
            <param name="id">The identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.IQueryBuilder">
            <summary>
            Interface IQueryBuilder - represents general-purpose query builder  
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.IQueryBuilder.Query">
            <summary>
            Gets the query this builder is defined for
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Korzh.EasyQuery.IQueryBuilder.Formats">
            <summary>
            Gets the builder formats.
            </summary>
            <value>The formats.</value>
        </member>
        <member name="P:Korzh.EasyQuery.IQueryBuilder.ResultType">
            <summary>
            Gets the the result type.
            </summary>
            <value>The type of the result.</value>
        </member>
        <member name="M:Korzh.EasyQuery.IQueryBuilder.GetResult">
            <summary>
            Gets the result object.
            It could be some SQL statement or and an IQueryable object created by LINQ query builder.
            </summary>
            <value>The result object.</value>
        </member>
        <member name="T:Korzh.EasyQuery.QueryBuilderResult">
            <summary>
            Represents the result of query builder's work.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.QueryBuilderResult.Params">
            <summary>
            Gets the list of parameters used in generated SQL statement.
            </summary>
            <remarks>
            This list is filled by data only in case if query was built with <see cref="M:Korzh.EasyQuery.Db.SqlQueryBuilder.BuildParamSQL"/> method.
            </remarks>
            <value>The <see cref="T:Korzh.EasyQuery.QueryParamList"/> object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryBuilderResult.Statement">
            <summary>
            Gets the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <value>The statement.</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryBuilderResult.GetStatement">
            <summary>
            Returns the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryBuilderResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryBuilderResult"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryBuilderResult.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.QueryBuilderResult.Empty">
            <summary>
            Gets an empty query builder result.
            </summary>
            <value>The empty query builder result.</value>
        </member>
        <member name="T:Korzh.EasyQuery.EmptyQueryBuilderResult">
            <summary>
            Represents a trivial implementation of QueryBuilderResult abstract class which always returns empty statement
            </summary>
            <seealso cref="T:Korzh.EasyQuery.QueryBuilderResult" />
        </member>
        <member name="M:Korzh.EasyQuery.EmptyQueryBuilderResult.GetStatement">
            <summary>
            Returns the statement (SQL, filter expression, etc - depending on the concrete QueryBuilderResult type).
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ODataQueryBuilder">
            <summary>
            Builds OData expressions
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ODataQueryBuilder.#ctor(Korzh.EasyQuery.Query,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ODataQueryBuilder"/> class.
            </summary>
            <param name="query">The query.</param>
            <param name="optionsDict">Different options (usually got from JSON object).</param>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilder.Query">
            <summary>
            Gets the query this builder is defined for
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilder.ResultType">
            <summary>
            Gets the type of result object (string by default)
            </summary>
            <value>The result type.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ODataQueryBuilder.GetResult">
            <summary>
            Gets the result object.
            In this case it represents an ODATA filtering expression.
            </summary>
            <returns>QueryBuilderResult.</returns>
            <value>The result object.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilder.Formats">
            <summary>
            Gets the builder formats.
            </summary>
            <value>The formats.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilder.UseUtcTime">
            <summary>
            Gets or sets a value indicating whether the query builder will use UTC time zone for all date/time values (like FirstDayOfYear and others).
            </summary>
            <value>
            	<see langword="true"/> whether the UTC time is used; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.ODataQueryBuilder.Build">
            <summary>
            Builds the query and returns the OData string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ODataQueryBuilder.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilder.CanBuild">
            <summary>
            Determines whether there is enough information to build the query
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.ODataStatement">
            <summary>
            Represents the result of ODataQueryBuilder's work.
            Implements the <see cref="T:Korzh.EasyQuery.QueryBuilderResult" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.QueryBuilderResult" />
        </member>
        <member name="P:Korzh.EasyQuery.ODataStatement.ODataQuery">
            <summary>
            Gets or sets the ODATA query.
            </summary>
            <value>The o data query.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ODataStatement.GetStatement">
            <summary>
            Returns the ODATA query statement.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ODataQueryBuilderFormats">
            <summary>
            Represents different formats which control ODataQueryBuilder behaviour.
            This class is empty for now.
            </summary>
            <seealso cref="T:Korzh.EasyQuery.IQueryFormats" />
        </member>
        <member name="M:Korzh.EasyQuery.ODataQueryBuilderFormats.CopyFrom(Korzh.EasyQuery.IQueryFormats)">
            <summary>
            Copies the formats from another formats object.
            </summary>
            <param name="source">The source formats object to copy from.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilderFormats.UseTimezoneOffset">
            <summary>
            Gets or sets a value indicating whether query builder should use the timezone offset when generates date/time values.
            The timezone offeset is usually received from the client side.
            </summary>
            <value><c>true</c> if the timezone offset is used; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ODataQueryBuilderFormats.UseUtcTime">
            <summary>
            Gets or sets a value indicating whether the query builder will use UTC time zone for all date/time values (like FirstDayOfYear and others).
            </summary>
            <value>
            	<see langword="true"/> whether the UTC time is used; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:Korzh.EasyQuery.QueryParam">
            <summary>
            Represents one parameter in parametrized query statement
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.Id">
            <summary>
            Parameter ID
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.Caption">
            <summary>
            Gets or sets the caption.
            </summary>
            <value>The caption.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.DataType">
            <summary>
            Type of the parameter
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.Value">
            <summary>
            Parameter value
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.EditorId">
            <summary>
            Gets or sets the default value editor for this parameter
            </summary>
            <value>The default value editor. null value represent AUTO value editor.</value>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.IsGenerated">
            <summary>
            Gets a value indicating whether this parameter is generated.
            </summary>
            <value><c>true</c> if this instance is generated; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryParam"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.#ctor(Korzh.EasyQuery.QueryParam)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.QueryParam"/> class by another QueryParam object.
            </summary>
            <param name="src">The source object</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.#ctor(System.String,Korzh.EasyQuery.DataType,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:QueryParam" /> class.
            </summary>
            <param name="id">The parameter ID.</param>
            <param name="dataType">Type of the parameter.</param>
            <param name="value">The parameter value.</param>
            <param name="generated">if set to <c>true</c> then this parameter was generated automatically during query building.</param>
        </member>
        <member name="P:Korzh.EasyQuery.QueryParam.ValueAsObject">
            <summary>
            Returns the value of parameter as object (according to <see cref="P:DataType"/>).
            </summary>
            <value>The value as object.</value>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads parameter's properties from XML.
            </summary>
            <param name="reader">The XML reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.CoreReadXmlAttribute(System.String,System.String)">
            <summary>
            Read one attribute of XML element.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrValue">The attribute's value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves the parameter to XML.
            </summary>
            <param name="writer">The XML writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.SaveToJsonDict(Korzh.EasyQuery.DataModel)">
            <summary>
            Saves query parameter's properties to Dictionary object (used JSON serialization).
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.LoadFromJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Loads parameter's properties from some <see cref="T:System.Collections.IDictionary"/> object. 
            It's used for deserialization from JSON
            </summary>
            <param name="paramDict">An instance of <see cref="T:System.Collections.IDictionary"/> </param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParam.CopyFrom(Korzh.EasyQuery.QueryParam)">
            <summary>
            Copies all properties of query parameter to another parameter.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.QueryParamList">
            <summary>
            Represents simple list of <see cref="T:Korzh.EasyQuery.QueryParam"/> objects.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.ResetParamIdGenerator">
            <summary>
            Resets the parameter identifier generator.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.GenNextParamId(System.String,System.String@)">
            <summary>
            Generates the next parameter identifier.
            </summary>
            <param name="paramIdBase">The base of the parameter ID (usually - a field name).</param>
            <param name="suffix">The suffix which was added to the base ID</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.ExtractFromExpr(System.String)">
            <summary>
            Extracts parameters from expression.
            </summary>
            <param name="expr">The expression.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.ClearGeneratedParams">
            <summary>
            Clears the list of generated parameters.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.IndexById(System.String)">
            <summary>
            Returns index of parameter by its ID.
            </summary>
            <param name="paramId">The parameter ID.</param>
            <returns>Parameter index inside the list</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.FindById(System.String)">
            <summary>
            Finds parameter by its ID.
            </summary>
            <param name="paramId">The parameter ID.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.InsertItem(System.Int32,Korzh.EasyQuery.QueryParam)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1" /> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads paramter list from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.LoadFromJsonDict(System.Collections.IEnumerable)">
            <summary>
            Loads parameter list from some <see cref="T:System.Collections.IEnumerable"/> object. Useful for JSON deserialization
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.SaveToJsonDict(Korzh.EasyQuery.DataModel)">
            <summary>
            Saves parameter list into some <see cref="T:System.Collections.IEnumerable"/> object. Useful for JSON serialization
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.CopyFrom(Korzh.EasyQuery.QueryParamList,System.Boolean)">
            <summary>
            Copies all parameters from some other parameter list
            </summary>
            <param name="prms">The list of the parameters to copy from</param>
            <param name="clearFirst">Indicates whether we need to clear the list first</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.WriteToJson(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of query parameters to JSON.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.WriteToJsonAsync(Newtonsoft.Json.JsonWriter)">
            <summary>
            Writes the list of query parameters to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of query parameters from JSON.
            </summary>
            <param name="reader">The reader.</param>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.QueryParamList.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of query parameters from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyQueryManager">
            <summary>
            Provides basic functionality for managing different EasyQuery operations and to process the AJAX requests from EasyQuery JavaScript widgets.
            This class is abstract and it implements only the most common features.
            The descendants of this class provides more concrete implementation of the model loading and query generation 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.#ctor(System.IServiceProvider,Korzh.EasyQuery.Services.EasyQueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EasyQueryManager" /> class.
            </summary>
            <param name="services">The services.</param>
            <param name="options">Different options of EasyQueryService.</param>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EasyQueryManager.Services">
            <summary>
            A reference to the <see cref="T:System.IServiceProvider"/> object which allows you to access the DI container
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.CachingService">
            <summary>
            Get or sets a caching service
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.SaveQueryOnSync">
            <summary>
            Gets or sets a value indicating whether query will be stored on QuerySync method.
            </summary>
            <value><c>true</c> if query should be stored on QuerySync; otherwise, <c>false</c>. Default is <c>false</c></value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.StoreModelInCache">
            <summary>
            Gets or sets a value indicating whether data model will be stored in Session between requests.
            </summary>
            <value><c>true</c> if data model should be stored in session; otherwise, <c>false</c>. Default is <c>true</c></value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.StoreQueryInCache">
            <summary>
            Gets or sets a value indicating whether current query will be stored in Session between requests.
            </summary>
            <value><c>true</c> if query should be stored in session; otherwise, <c>false</c>. Default is <c>false</c></value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.QueryRecordCount">
            <summary>
            Gets or sets a value indicating whether the service should send one more query to get the total number of records for the main query (when the Paging is enabed).
            </summary>
            <value><c>true</c> if the total number of records in the result set must be calculated at all cost; otherwise, <c>false</c>. Default is <c>false</c></value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.ModelLoader">
            <summary>
            Gets or sets the model loader - an implementation of <see cref="T:Korzh.EasyQuery.Services.IModelLoader"/> inteface.
            </summary>
            <value>The model loader.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.QueryStore">
            <summary>
            Gets or sets the query store - an object which covers all saving/loading operations for queries.
            </summary>
            <value>The query store.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.ModelTuner">
            <summary>
            Gets or sets the model tuner - a function which allows you to make some changes in the model after its loading.
            </summary>
            <value>The model tuner.</value>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EasyQueryManager.PreExecuteTuners">
            <summary>
            The list of tuners which are called before the query execution
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.ValueListResolvers">
            <summary>
            Gets the list of "value list" resolvers.
            </summary>
            <value>The value list resolvers.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.RegisterExporter(System.String,Korzh.EasyQuery.Services.IDataExporter)">
            <summary>
            Registers ResultSet exporter for current format.
            </summary>
            <param name="format">Current format.</param>
            <param name="exporter">The exporter.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.UserId">
            <summary>
            Gets or sets the user ID.
            This value is used to build the path to the folder where model and query files are stored.
            By default it's App_Data/{UserId}/ and App_Data/{UserId}/Queries
            </summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.ClientOptions">
            <summary>
            Gets a JSON object which contains all the options received from the client-side.
            </summary>
            <value>The client-side options.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.ClientData">
            <summary>
            Gets a JSON object which contains all the data received from the client-side.
            </summary>
            <value>The client-side data.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.AddValueListResolver(Korzh.EasyQuery.Services.IValueListResolver)">
            <summary>
            Adds the value list resolver to the internal list of list resolvers 
            which will be used during GetList request processing
            </summary>
            <param name="valueListResolver">The value list resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateQueryFormatsCore">
            <summary>
            Creates a QueryFormats object. 
            The derived classes can override this method to return an object of DbQueryFormats or any other inherited class.
            </summary>
            <returns>An instance of QueryFormats or inherited class.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateModelCore(System.String)">
            <summary>
            Creates the new DataModel object
            </summary>
            <returns>DataModel instance</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateQuery(System.String)">
            <summary>
            Creates new Query object.
            </summary>
            <returns>Query instance.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateQueryAsync(System.String)">
            <summary>
            Creates new Query object.
            </summary>
            <returns>Query instance.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateQueryIfNotExists(System.String)">
            <summary>
            Creates the query if it does not exist.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>Query.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateQueryIfNotExistsAsync(System.String)">
            <summary>
            Creates the query if it does not exist.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>Task&lt;Query&gt;</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CheckModel">
            <summary>
            Checks if the current Model is not null and throws an exception otherwise.
            </summary>
            <exception cref="T:System.Data.NoNullAllowedException">Model is not defined</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CheckQuery">
            <summary>
            Checks if the current Query is not null and throws an exception otherwise.
            </summary>
            <exception cref="T:System.Data.NoNullAllowedException">Model is not defined</exception>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.QueryFormats">
            <summary>
            Gets or sets the default query formats that defines different aspects of the generated query syntax 
            (the quotes, the type of joins in SQL, etc).
            </summary>
            <value>The formats.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.TuneBuilder(Korzh.EasyQuery.IQueryBuilder)">
            <summary>
            Allows to tune the formats of the query builder. The default implementation calls all builder tuners defined in _builderTuners list.
            You can override this function in your sub-class to implement some custom behavior.
            </summary>
            <param name="builder">The query builder to tune.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.CreateQueryCore(Korzh.EasyQuery.DataModel)">
            <summary>
            Creates new Query object.
            </summary>
            <returns>Query instance.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetValueFromCache(System.String)">
            <summary>
            Gets some string value from session by its key.
            </summary>
            <param name="key">The key.</param>
            <returns>String object</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.SaveValueInCache(System.String,System.String)">
            <summary>
            Stores some string value in cache.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.LoadModelFromCache(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Loads DataModel from cache by ID (name)
            </summary>
            <param name="model">DataModel object to load</param>
            <param name="modelId">Model's ID</param>
            <returns><c>true</c> if model is loaded successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.SaveModelInCache(Korzh.EasyQuery.DataModel)">
            <summary>
            Saves model into cache
            </summary>
            <param name="model">DataModel object</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.LoadQueryFromCache(Korzh.EasyQuery.Query,System.String)">
            <summary>
            Loads Query from cache by ID
            </summary>
            <param name="query">Query object</param>
            <param name="queryId">Query's ID</param>
            <returns><c>true</c> if query has been successfully loaded from cache, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.SaveQueryInCache(Korzh.EasyQuery.Query)">
            <summary>
            Saves query into cache
            </summary>
            <param name="query">Query object</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.DefaultModelId">
            <summary>
            Gets or sets the default name of the model.
            This model will loaded automatically if the name was not indicated explicitly 
            </summary>
            <value>The default name of the model.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.Model">
            <summary>
            Gets the current model. 
            The value of this property is set on the first call of GetModel method.
            </summary>
            <value>The model.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.Query">
            <summary>
            Gets the current query.
            The value of this property is set on the first call of GetQuery method.
            </summary>
            <value>The query.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetModel(System.String)">
            <summary>
            Gets the DbModel object by ID. 
            </summary>
            <param name="modelId">ID of the model. If null - current model stored in session is loaded</param>
            <returns>DbModel.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetModelAsync(System.String)">
            <summary>
            Gets the DbModel object by ID. 
            </summary>
            <param name="modelId">ID of the model. If null - current model stored in session is loaded</param>
            <returns>DbModel.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetModelCore(System.String)">
            <summary>
            The basic implementation of the GetModel action which can be overidden in the derived classes.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>A DataModel object if the requested model was found or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetModelCoreAsync(System.String)">
            <summary>
            The basic implementation of the GetModel action which can be overidden in the derived classes.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>A DataModel object if the requested model was found or <c>null</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.TryLoadModel(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Tries to load the model from the storage.
            </summary>
            <param name="model">The model.</param>
            <param name="modelId">The model identifier.</param>
            <returns><c>true</c> if the model was found and loaded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.TryLoadModelAsync(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Tries to load the model from the storage.
            </summary>
            <param name="model">The model.</param>
            <param name="modelId">The model identifier.</param>
            <returns><c>true</c> if the model was found and loaded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryBuilder(Korzh.EasyQuery.Query,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Gets the registered query builder.
            </summary>
            <param name="query">The query.</param>
            <param name="options">Any additional options passed as a JObject instance</param>
            <returns>IQueryBuilder.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryBuilderCore(Korzh.EasyQuery.Query,Newtonsoft.Json.Linq.JObject)">
            <summary>
            
            </summary>
            <param name="query"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQuery(System.String,System.String)">
            <summary>
            Gets the Query object by name.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The ID of the query. 
            If null - the query stored in session is loaded (if StoreQueryInSession==true).
            </param>
            <returns>DbQuery.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryAsync(System.String,System.String)">
            <summary>
            Gets the Query object by name.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The ID of the query. 
            If null - the query stored in session is loaded (if StoreQueryInSession==true).
            </param>
            <returns>Task&lt;Query&gt;</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryCore(System.String,System.String)">
            <summary>
            The basic implementation of the GetQuery action which can be overidden in the derived classes.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns>A Query object if the requested query was found or <c>null</c> otherwise.</returns>
            <exception cref="T:Korzh.EasyQuery.Services.EasyQueryManagerException">Model not found</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryCoreAsync(System.String,System.String)">
            <summary>
            The basic implementation of the GetQuery action which can be overidden in the derived classes.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns>A Query object if the requested query was found or <c>null</c> otherwise.</returns>
            <exception cref="T:Korzh.EasyQuery.Services.EasyQueryManagerException">Model not found</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.TryLoadQuery(Korzh.EasyQuery.Query,System.String)">
            <summary>
            Tries to load the query.
            </summary>
            <param name="query">The query.</param>
            <param name="queryId">The query identifier.</param>
            <returns><c>true</c> if the query was found and loaded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.TryLoadQueryAsync(Korzh.EasyQuery.Query,System.String)">
            <summary>
            Tries to load the query.
            </summary>
            <param name="query">The query.</param>
            <param name="queryId">The query identifier.</param>
            <returns><c>true</c> if the query was found and loaded, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.LoadQueryWithOptionsFromJson(System.String,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Loads the query with any additional options from JSON.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="jobject">A JObject which holds the request content.</param>
            <returns>Query.</returns>
            <exception cref="T:System.ArgumentNullException">jobject</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.SyncQuery">
            <summary>
            Synchronizes the query.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.SyncQueryCore">
            <summary>
            Synchronizes the query. This is the default implementation which can be ovverride in derived classes.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryList(System.String)">
            <summary>
            Gets the list of available queries.
            </summary>
            <param name="modelId">The ID of the model.</param>
            <returns>IEnumerable&lt;ListItem&gt; - a list of ListItem objects where each of them represents one query (its ID and name).</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryListAsync(System.String)">
            <summary>
            Gets the list of available queries.
            </summary>
            <param name="modelId">The ID of the model.</param>
            <returns>Task&lt;IEnumerable&lt;ListItem&gt;&gt; - a list of ListItem objects where each of them represents one query (its ID and name).</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryListCoreAsync(System.String)">
            <summary>
            Basic implementation of <see cref="M:Korzh.EasyQuery.Services.EasyQueryManager.GetQueryList(System.String)"/> method.
            This method just calls corresponding function of the QueryStore. Can be overriden in derived classes.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>Task&lt;IEnumerable&lt;QueryListItem&gt;&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GenerateQueryId(System.String)">
            <summary>
            Generates the query identifier.
            </summary>
            <param name="name">The name of the query (can be used during ID generation).</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.InitQueryAsync">
            <summary>
            Initializes the new query and saves it to the storage (if SaveNewQueryToStore is turned on).
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.InitQueryCoreAsync">
            <summary>
            Initializes the new query. Does nothing in the base class. Can be overriden in the derived classes.
            </summary>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.SaveQueryToStoreAsync">
            <summary>
            Saves the current query to the query store.
            </summary>
            <returns><c>true</c> if the query is saved successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.RemoveQuery(System.String,System.String)">
            <summary>
            Removes the query. This method uses the functionality provided by the current query store.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns><c>true</c> if the query is removed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.RemoveQueryAsync(System.String,System.String)">
            <summary>
            Removes the query. This method uses the functionality provided by the current query store.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns><c>true</c> if the query is removed successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.BuildQuery(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Builds SQL statement by the DbQuery object. This methods calls QueryBuilder delegate to build SQL.
            </summary>
            <param name="options">A dynamic object which contains different options or any other additional parameters of SQL generation</param>
            <param name="addPaging">if set to <c>true</c> then we need to add paging commands to generated SQL.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.ExecuteQuery(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Executes the query and returns an object which implments IEqResultSet interface.
            </summary>
            <param name="options">Any additional options passed as JObject instance.</param>
            <returns>IEqResultSet.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.ExecuteQueryCore(Newtonsoft.Json.Linq.JObject)">
            <summary>
            The actual implemenation of ExecuteQuery function. 
            This method is overridden in EasyQueryManagerBase descendants like EasyQueryManagerSql or EasyQueryManagerLinq.
            </summary>
            <param name="options">Any additional options passed as JObject.</param>
            <returns>IEqResultSet.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetContentTypeByExportFormat(System.String)">
            <summary>
            Gets the content type by export format.
            </summary>
            <param name="format">The format of exporting (like "csv" or "excel-html").</param>
            <returns>A string which represents the MIME content type (e.g. "application/json" or "text/plain")</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.ExportQueryResultAsync(System.String,System.IO.TextWriter)">
            <summary>
            Executes the query and exports the result to a specified format.
            To run this operation we need to register an appropriate exporter first.
            </summary>
            <param name="format">The format of exporting data (e.g "csv").</param>
            <param name="writer">The writer where to save the exported data.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.Services.EasyQueryManagerException">Can't find exporter for format type: " + format</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetDataExportSettings(System.String)">
            <summary>
            Gets the data export settings.
            </summary>
            <param name="format">The exporting format (not used in the current implementation).</param>
            <returns>IDataExportSettings.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetDataReader(Newtonsoft.Json.Linq.JObject,System.Boolean)">
            <summary>
            Gets the data reader by query. This function is called from ExecuteQuery or ExportQueryResult.
            </summary>
            <param name="options">Any additional options passed as JObject instance.</param>
            <param name="addPaging">if set to <c>true</c> we need to add paging to the generated query.</param>
            <returns>IDataReader.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.JsonToListRequestOptions(System.String)">
            <summary>
            Converts JsonDict object to ListRequestOptions
            </summary>
            <param name="optionsJson">A JSON representation of the list request options</param>
            <returns>Returns new ListRequestOptions</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetValueList(System.String,System.String)">
            <summary>Returns custom list of values by editorId. This method is usually called by GetList action of EasyQueryController.</summary>
            <param name="modelId">The ID of the data model</param>
            <param name="editorId">The ID of the value editor we need to return the list for</param>
            <returns>IEnumerable&lt;ListItem&gt; - the list of values. Each item contains ID and Text.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetValueListAsync(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Returns custom list of values by editorId. This method is usually called by GetList action of EasyQueryController.</summary>
            <param name="modelId">The ID of the data model</param>
            <param name="editorId">The ID of the value editor we need to return the list for</param>
            <param name="options">The options.</param>
            <returns>IEnumerable&lt;ListItem&gt; - the list of values. Each item contains ID and Text.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetListCore(Korzh.EasyQuery.Services.ListRequestOptions)">
            <summary>
            The basic implemenation of GetList action handler. Can be overrided in the derived classes.
            </summary>
            <param name="options">The options which define the list (model, editor, etc).</param>
            <returns>IEnumerable&lt;ListItem&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.GetListCoreAsync(Korzh.EasyQuery.Services.ListRequestOptions)">
            <summary>
            The basic implemenation of GetList action handler. Can be overrided in the derived classes.
            </summary>
            <param name="options">The options which define the list (model, editor, etc).</param>
            <returns>Task&lt;IEnumerable&lt;ListItem&gt;&gt;.</returns>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.Paging">
            <summary>
            Contains different pagination settings.
            </summary>
            <value>The pagination options.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.Chunk">
            <summary>
            Holds different pagination settings.
            </summary>
            <value>The pagination options.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.Meta">
            <summary>
            Defines some meta-data collected on query processing/execution (like like Total Number of Records).
            </summary>
            <value>The meta data.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryManager.SaveNewQueryToStore">
            <summary>
            Determines whether the manager should save a new query into the storage right after the creation.
            </summary>
            <value>The save new query to store.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.ReadRequestContentFromTextReaderAsync(System.String,System.IO.TextReader)">
            <summary>
            Loads all reaquest's data (like query, options, etc) from the text reader.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="reader">The text reader.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.ReadRequestContentFromJsonAsync(System.String,Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the client-side request from a JsonReader object.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="reader">The JsonReader object.</param>
            <returns>Task.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManager.ReadOneRequestPropertyAsync(System.String,Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Read one property from a request's JSON object.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="reader">An instance of JsonReader.</param>
            <param name="propName">The name of the property.</param>
            <returns>Task.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyQueryManagerException">
            <summary>
            Represents errors that occur during EasyQueryManager's work.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EasyQueryManagerException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ExecuteQueryOptions">
            <summary>
            Represents different options of ExecuteQuery operation.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ExecuteQueryOptions.Page">
            <summary>
            Gets or sets the page number (if the pagination is turned on).
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ExecuteQueryOptions.PageSize">
            <summary>
            Gets or sets the page size (if the pagination is turned on).
            </summary>
            <value>The page.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyQueryManagerBase">
            <summary>
            Provides basic functionality for managing different EasyQuery operations and to process the AJAX requests from EasyQuery JavaScript widgets.
            This class is abstract and it implements only the most common features.
            The descendants of this class provides more concrete implementation of the model loading and query generation 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryManagerBase.#ctor(System.IServiceProvider,Korzh.EasyQuery.Services.EasyQueryOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EasyQueryManagerBase" /> class.
            </summary>
            <param name="services">The services.</param>
            <param name="options">Different options of EasyQueryService.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EasyQueryOptions">
            <summary>
            Contains various options used in EasyQueryMiddleware, EasyQueryManager and other classes.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.DefaultModelId">
            <summary>
            Gets or sets the default model identifier.
            This option is used with FileModelLoader (when no other model loader is defined)  if the client side scripts don't pass any particular model ID in requests
            </summary>
            <value>The default model identifier.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.Endpoint">
            <summary>
            Gets or sets the endpoint of EasyQuery middleware. 
            This will be the base part of all URLs where all EasyQuery requests are sent to.  
            The default value is `/api/easyquery`, so the request to get the data model by its ID will have the following URL: `/api/easyquery/models/{modelId}`
            </summary>
            <value>The path to EasyQuery endpoint.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.StoreModelInCache">
            <summary>
            Gets or sets the value indicating whether we need to store the model in cache (which is defined separately).
            </summary>
            <value><c>true</c> if the model is stored in cache; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.StoreQueryInCache">
            <summary>
            Gets or sets the value indicating whether we need to store the query in cache (which is defined separately).
            </summary>
            <value><c>true</c> if the model is stored in cache; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.BuildWithParameters">
            <summary>
            Gets or sets the value indicating whether the query will be built with parameters instead of injected values
            </summary>
            <value><c>true</c> if the result query statement will contain parameters; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.BuildQueryOnSync">
            <summary>
            Gets or sets the value indicating whether we need to build query on every SyncQuery request and attach the statement to the response.
            </summary>
            <value><c>true</c> if the query will be built on each SyncQuery request; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.SaveQueryOnSync">
            <summary>
            Gets or sets the value indicating whether the query will be saved to the store (defined by UseQueryStore method) on each SyncQuery request.
            </summary>
            <value><c>true</c> if the query must be saved to store on each SyncQuery request; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ReturnQueryOnSave">
            <summary>
            Gets or sets the value indicating whether the query will returned back to the client when handling the "SaveQuery" request.
            You might want to set this option to <c>true</c> if the query can be changing when is saved to the storage (e.g. we assign some itnernal ID for it).\
            and you want to let the client know about those changes.
            </summary>
            <value><c>true</c> if the query must be returned to the client on "SaveQuery" request; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.SaveNewQuery">
            <summary>
            Gets or sets the value indicating whether the new query must be saved to the store (defined by UseQueryStore method) before return it as a response on NewQuery request.
            </summary>
            <value><c>true</c> if the new query must be saved to storage; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.QueryRecordCount">
            <summary>
            Gets or sets a value indicating whether the service should send one more query to get the total number of records for the main query (when the Paging is enabed).
            </summary>
            <value><c>true</c> if the total number of records in the result set must be calculated at all cost; otherwise, <c>false</c>. Default is <c>false</c></value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ManagerResolver">
            <summary>
            Gets the resolver which creates an instance of EasyQuery Manager (a descendant of EasyQueryManagerBase class).
            This class defines all basic operations with the models and queries: creating, loading, saving, query building itself.
            </summary>
            <value>The resolver which creates and returns an instance of EasyQueryManagerBase class.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ModelLoaderResolver">
            <summary>
            Gets the model loader resolver - a function which creates and returns an instance of IModelLoader interface.
            </summary>
            <value>The model loader resolver.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.QueryStoreResolver">
            <summary>
            Gets the query store resolver - a function which creates and returns an object which implements IQueryStore interface
            </summary>
            <value>The query store resolver.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ConnectionResolver">
            <summary>
            Gets the connection resolver - a function which creates and returns the database connection (or the context collection in case LINQ manager).
            </summary>
            <value>The connection resolver.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.CachingServiceResolver">
            <summary>
            Gets the caching service resolver
            </summary>
            <value>The caching service resolver.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ValueListResolvers">
            <summary>
            Gets the collection of value list resolvers. Each value list resolver can process one special case of the lists.
            For example SqlValueListResolver returns the list of values by SQL statement (like list of countries or list of some categories).
            </summary>
            <value>The list of value list resolvers.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddValueListResolver(System.Func{System.String,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}})">
            <summary>
            Adds the custom value list resolver defined by a function passed in the parameter. 
            The function takes the list name and returns the list of values or null (so, the list can't be resolved for this name) .
            </summary>
            <param name="resolver">The function which defines a custom value list resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddValueListResolver(System.Func{Korzh.EasyQuery.Services.ListRequestOptions,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}})">
            <summary>
            Adds the custom value list resolver defined by a function passed in the parameter. 
            The function takes the list name and returns the list of values or null (so, the list can't be resolved for this name) .
            </summary>
            <param name="resolver">The function which defines a custom value list resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddPreExecuteTuner(Korzh.EasyQuery.Services.IEasyQueryManagerTuner)">
            <summary>
            Adds the tuner which is called before the query execution.
            </summary>
            <param name="tuner">The tuner.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddDataExportTuner(Korzh.EasyQuery.Services.IDataExportTuner)">
            <summary>
            Adds the tuner which is called before the exporting result. 
            </summary>
            <param name="tuner">An object that implements <see cref="T:Korzh.EasyQuery.Services.IDataExportTuner"/> interface.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddDataExportTuner(System.Func{Korzh.EasyQuery.Services.EasyQueryManager,Korzh.EasyQuery.Services.IDataExportSettings,System.Boolean})">
            <summary>
            Adds the data export tuner.
            </summary>
            <param name="tunerFunc">The tuner function. Gets a reference to the manager and exporting settings. 
            Returns <c>false</c> if it's necessary to stop the tuning (other tuners will not be called). Otherwise - <c>true</c>
            </param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.AuthProviderResolver">
            <summary>
            Gets the authentication provider resolver 
            - a function that (most possibly) creates and returns an instance of 
            <see cref="T:Korzh.EasyQuery.Services.IEqAuthProvider"/> interface.
            </summary>
            <value>The authentication provider resolver.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.Paging">
            <summary>
            Gets the paging settings.
            </summary>
            <value>The paging settings.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ConnectionString">
            <summary>
            Gets or sets the connection string to a database. 
            Usually this property is used together with UseDbConnection and UseDbConnectionModelLoader extension methods to avoid defining the connection string separately in each of these methods' parameters.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ModelTuner">
            <summary>
            Gets the model tuner - an action which is called after the model loading and allows to "tune" your model before sending it to the client-side.
            </summary>
            <value>The model tuner.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.DbCommandTuner">
            <summary>
            Gets or sets the tune for database commands. Here you can set, for example, the timeout of your DB requests.
            </summary>
            <value>The database command tuner.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.ManagerTuner">
            <summary>
            Gets or sets the tune for EasyQuery Manager.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.BuilderTuners">
            <summary>
            Gets the list of the builder tuners.
            Each tuner - is a function which allows to modify some options of the current query builder
            </summary>
            <value>The builder tuners.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddBuilderTuner(System.Action{Korzh.EasyQuery.IQueryBuilder})">
            <summary>
            Adds the builder tuner. <seealso cref="P:Korzh.EasyQuery.Services.EasyQueryOptions.BuilderTuners"/>
            </summary>
            <param name="builderTuner">The builder tuner.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyQueryOptions.QueryFormats">
            <summary>
            Gets the query formats.
            </summary>
            <value>The query formats.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.SetFormats(Korzh.EasyQuery.IQueryFormats)">
            <summary>
            Sets the formats of the query builder (an instance of <see cref="P:Korzh.EasyQuery.Services.EasyQueryOptions.QueryFormats"/> class).
            </summary>
            <param name="formats">The formats.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.#ctor(System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EasyQueryOptions"/> class.
            </summary>
            <param name="services">The DI services.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseManager(Korzh.EasyQuery.Services.ManagerResolverFunc)">
            <summary>
            Defines the function which creates and returns an instance of EasyQuery manager. 
            The manager defines all basic operations with the models and queries: creating, loading, saving and query building itself.
            </summary>
            <param name="managerResolver">The manager resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseManager``1">
            <summary>
            Defines the function which creates and returns an instance of EasyQuery manager. 
            The manager defines all basic operations with the models and queries: creating, loading, saving and query building itself.
            </summary>
            <typeparam name="TEQManager"></typeparam>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseModelLoader(System.Func{System.IServiceProvider,Korzh.EasyQuery.Services.IModelLoader})">
            <summary>
            Defines the functions which returns the model loader - an instance of IModelLoader interface
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseQueryStore(System.Func{System.IServiceProvider,Korzh.EasyQuery.Services.IQueryStore})">
            <summary>
             Defines the functions which returns the query store - an instance of IQueryStore interface
            </summary>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseConnection(System.Func{System.IServiceProvider,System.String,System.Object})">
            <summary>
            Defines the functions which returns the connection by DI services and model ID
            </summary>
            <param name="connectionResolver">The connection resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseCaching(System.Func{System.IServiceProvider,Korzh.EasyQuery.Services.IEqCachingService})">
            <summary>
            Defines the functions which returns the caching service by DI services
            </summary>
            <param name="cachingServiceResolver"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseAuthProvider(System.Func{System.IServiceProvider,Korzh.EasyQuery.Services.IEqAuthProvider})">
            <summary>
            Adds the authentication provider resolver - a function which returns an object with <see cref="T:Korzh.EasyQuery.Services.IEqAuthProvider"/> interface.
            </summary>
            <param name="authProviderResolver">The authentication provider resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UsePaging(System.Int64)">
            <summary>
            Turns on the paging and sets the page size.
            </summary>
            <param name="pageSize">The size of the page.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseModelTuner(System.Action{Korzh.EasyQuery.DataModel})">
            <summary>
            Defines the model tuner. See more about the model tuner in <see cref="P:Korzh.EasyQuery.Services.EasyQueryOptions.ModelTuner"/> property description
            </summary>
            <param name="tuner">The model tuner.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.UseManagerTuner(System.Action{Korzh.EasyQuery.Services.EasyQueryManager})">
            <summary>
            Defines the namager tuner. See more about the model tuner in <see cref="P:Korzh.EasyQuery.Services.EasyQueryOptions.ManagerTuner"/> property description
            </summary>
            <param name="tuner"></param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyQueryOptions.AddFileExtensionResolver(System.Func{System.String,System.String})">
            <summary>
            Adds a function that returns the file extension by content type.
            </summary>
            <param name="fileExtensionResolver">The file extension resolver.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IEasyQueryManagerResolver">
            <summary>
            Interface IEasyQueryManagerResolver
            Contains only one function: GetManager which returns an instance of EasyQueryManagerBase descendant (like EasyQueryManagerSql or EasyQueryManagerLinq)
            by DI services and options (an instance of <see cref="T:Korzh.EasyQuery.Services.EasyQueryOptions"/> object)
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IEasyQueryManagerResolver.GetManager(System.IServiceProvider,Korzh.EasyQuery.Services.EasyQueryOptions)">
            <summary>
            Gets the EasyQuery manager.
            </summary>
            <param name="services">The DI services.</param>
            <param name="options">The options.</param>
            <returns>EasyQueryManagerBase.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ManagerResolverFunc">
            <summary>
            Delegate ManagerResolverFunc
            </summary>
            <param name="services">The services.</param>
            <param name="options">The options.</param>
            <returns>EasyQueryManagerBase.</returns>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EasyResultSet.IsDataFillStarted">
            <summary>
            Indicates whether the data filling process has started already.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyResultSet.Cols">
            <summary>
            Gets the columns.
            </summary>
            <value>The list of the columns.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyResultSet.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The list of the rows.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyResultSet.#ctor(Korzh.EasyQuery.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.GdtResultSet"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EasyResultSet.AddColumn(System.String,System.String,System.Type,System.Int32)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnId">The column identifier.</param>
            <param name="title">The title.</param>
            <param name="columnType">Type of the column.</param>
            <param name="index">This index of the column in the original result set</param>
            <exception cref="T:Korzh.EasyQuery.Services.EqResultSetError">Can't add more columns since data filling has already started.</exception>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyResultSet.RecordCount">
            <summary>
            Gets or sets the record count.
            </summary>
            <value>The record count.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.EasyResultSet.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
            <value>The column count.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IEqAuthProvider">
            <summary>
            Defines the functions necessary to check the authorization status of the current user 
            over EasyQuery actions 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IEqAuthProvider.IsAuthorizedAsync(Korzh.EasyQuery.Services.EasyQueryManager,System.String)">
            <summary>
            Determines whether the current user can get access to the the specified action.
            </summary>
            <param name="eqManager">The current EasyQueryManager.</param>
            <param name="action">The action as a string constant. 
            The full list of actions is listed in <see cref="T:Korzh.EasyQuery.Services.EqAction"/> class</param>
            <returns>Task&lt;System.Boolean&gt;. 
            <c>true</c> if the current user is authorized. Otherwise - <c>false</c> </returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EqTrivialAuthProvider">
            <summary>
            Represents a trivial implementation of <see cref="T:Korzh.EasyQuery.Services.IEqAuthProvider" />
            which authorize any user for any action
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqTrivialAuthProvider.IsAuthorizedAsync(Korzh.EasyQuery.Services.EasyQueryManager,System.String)">
            <summary>
            Determines whether the current user can get access to the the specified action.
            </summary>
            <param name="eqManager">The current EasyQueryManager.</param>
            <param name="action">The action as a string constant.
            The full list of actions is listed in <see cref="T:Korzh.EasyQuery.Services.EqAction" /> class</param>
            <returns>Task&lt;System.Boolean&gt;.
            true if the current user is authorized. Otherwise - false</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EqAction">
            <summary>
            Defines the constant strings for all possible actions
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.GetModel">
            <summary>GetModel action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.GetQuery">
            <summary>GetQuery action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.GetQueryList">
            <summary>GetQueryList action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.NewQuery">
            <summary>NewQuery action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.SaveQuery">
            <summary>SaveQuery action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.RemoveQuery">
            <summary>RemoveQuery action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.SyncQuery">
            <summary>SyncQuery action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.ExecuteQuery">
            <summary>ExecuteQuery action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.GetValueList">
            <summary>GetValueList action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.ExportResult">
            <summary>ExportResult action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.GetLicenseKey">
            <summary>GetLicenseKey action</summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.GetQueryFile">
            <summary>GetQueryFile action </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.EqAction.UploadQueryFile">
            <summary>UploadQueryFile action </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ListItem">
            <summary>
            Represents one item in lists returned as response for GetValueList request
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListItem.id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListItem.text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListItem.items">
            <summary>
            Gets or sets the list of sub-items for the current item.
            </summary>
            <value>The list of the sub-items.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListItem.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.ListItem"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="text">The text.</param>
            <param name="items">The items.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.ListItem"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="text">The text.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.ListItem"/> class.
            </summary>
            <param name="idAndText">The id and text.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ListItemComparer">
            <summary>
            Represents the comparer for two ListItem objects
            Implements the <see cref="T:System.Collections.Generic.IEqualityComparer`1" />
            </summary>
            <seealso cref="T:System.Collections.Generic.IEqualityComparer`1" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListItemComparer.Equals(Korzh.EasyQuery.Services.ListItem,Korzh.EasyQuery.Services.ListItem)">
            <summary>
            Determines whether the specified objects are equal.
            </summary>
            <param name="x">The first object of type T to compare.</param>
            <param name="y">The second object of type T to compare.</param>
            <returns>true if the specified objects are equal; otherwise, false.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListItemComparer.GetHashCode(Korzh.EasyQuery.Services.ListItem)">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> for which a hash code is to be returned.</param>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.QueryListItem">
            <summary>
            Represents one item in the list of queries (usually returned for GetQueries request)
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.QueryListItem.id">
            <summary>
            Gets or sets the query ID.
            </summary>
            <value>The query ID.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.QueryListItem.name">
            <summary>
            Gets or sets the query name.
            </summary>
            <value>The query name.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.QueryListItem.text">
            <summary>
            Gets the query name.
            </summary>
            <value>The query name.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.QueryListItem.description">
            <summary>
            Gets or sets the query description.
            </summary>
            <value>The query description.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.QueryListItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.QueryListItem"/> class.
            </summary>
            <param name="id">The query ID.</param>
            <param name="name">The query name.</param>
            <param name="desc">The query description.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.QueryListItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.QueryListItem"/> class.
            </summary>
            <param name="id">The query ID.</param>
            <param name="name">The query name.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.QueryListItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.QueryListItem"/> class.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ListRequestOptions">
            <summary>
            Represents different options specified in GetList AJAX request
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListRequestOptions.Manager">
            <summary>
            Gets the EasyQueryManager
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListRequestOptions.EditorId">
            <summary>
            Gets or sets editor's ID inside specified model
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListRequestOptions.Editor">
            <summary>
            The editor.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListRequestOptions.ListName">
            <summary>
            Gets or sets the name of the list.
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="F:Korzh.EasyQuery.Services.ListRequestOptions.ExtraParams">
            <summary>
            The query (specified in the url)
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ListRequestOptions.Sql">
            <summary>
            Gets or sets the SQL statement (for SQLLIST value editors).
            </summary>
            <value>The SQL statement.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListRequestOptions.#ctor(Korzh.EasyQuery.Services.EasyQueryManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.ListRequestOptions"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="editorId">The editor identifier.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.ListRequestOptions.#ctor(Korzh.EasyQuery.Services.EasyQueryManager,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.ListRequestOptions"/> class.
            </summary>
            <param name="manager">The manager.</param>
            <param name="editorId">The editor identifier.</param>
            <param name="extraParams">Extra parameters (usually are sent with the client-side request).</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IPaging">
            <summary>
            Represents basic pagination parameters
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IPaging.PageIndex">
            <summary>
            Gets the index of the page (started from 1).
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IPaging.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IPaging.PageCount">
            <summary>
            Gets the total number of pages in result.
            </summary>
            <value>The total number of pages.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IPaging.TotalRecords">
            <summary>
            Gets the total number of records in result.
            </summary>
            <value>The total records.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IPagedList`1">
            <summary>
            Implements both <see cref="T:IPaging"/> and <see cref="T:System.Collections.Generic.IEnumerable"/> interfaces. 
            It's used to return paged list of objects.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Korzh.EasyQuery.Services.PagingSettings">
            <summary>
            Default implementation of IPaging interface
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagingSettings.Enabled">
            <summary>
            Gets or sets a value indicating whether pagination is enabled.
            </summary>
            <value><c>true</c> if pagination is enabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagingSettings.PageIndex">
            <summary>
            Gets the index of the page (started from 1).
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagingSettings.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagingSettings.PageCount">
            <summary>
            Gets the total number of pages in result.
            The value of this property is calculated automatically when <see cref="P:TotalRecords"/> is changed.
            </summary>
            <value>The total number of pages.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagingSettings.TotalRecords">
            <summary>
            Gets the total number of records in result.
            </summary>
            <value>The total records.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.PagingSettings.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.PagingSettings"/> class.
            </summary>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.PagingSettings.SaveToJsonDict">
            <summary>
            Saves to IDictionary object. Used for serialization to JSON.
            </summary>
            <returns>IDictionary&lt;System.String, System.Object&gt;.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ChunkSettings">
            <summary>
            Defines the parameters of one chunk of data requested from the client
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ChunkSettings.IsActive">
            <summary>
            Gets or sets a value indicating whether we need to consider Chunk properties when getting the result set.
            </summary>
            <value><c>true</c> if Chunk properties are used when we get the result set; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ChunkSettings.Page">
            <summary>
            Page number to support old scenarios with paging
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ChunkSettings.Offset">
            <summary>
            Gets or sets the offset.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ChunkSettings.Limit">
            <summary>
            Gets or sets the number of requested records.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.ChunkSettings.NeedTotal">
            <summary>
            Gets or sets a value indicating whether the client needs to know the total number of records returned by the current query.
            </summary>
            <value><c>true</c> if we need to return the total number of records; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.MetaData">
            <summary>
            Defines some meta data of the executed query.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.MetaData.#ctor(Korzh.EasyQuery.Services.EasyQueryManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.MetaData"/> class.
            </summary>
            <param name="manager">The manager.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.MetaData.TotalRecords">
            <summary>
            Gets the total number of records returned by the query (without limitations defined in the Chunk property).
            </summary>
            <value>The total number of records.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.PagedList`1">
            <summary>
            Default implementation of <see cref="T:IPagedList"/> interface
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Korzh.EasyQuery.Services.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.PagedList`1"/> class.
            </summary>
            <param name="superset">The superset.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            pageIndex;PageIndex cannot be below 1.
            or
            pageSize;PageSize cannot be below 1.
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.PagedList`1"/> class.
            </summary>
            <param name="superset">The superset.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="F:Korzh.EasyQuery.Services.PagedList`1.subset">
            <summary>
            Current subset of the whole list according to specified PageIndex and PageSize
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagedList`1.PageIndex">
            <summary>
            Gets the index of the page (started from 1).
            </summary>
            <value>The index of the page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagedList`1.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagedList`1.PageCount">
            <summary>
            Gets the total number of pages in result.
            </summary>
            <value>The total number of pages.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.PagedList`1.TotalRecords">
            <summary>
            Gets the total number of records in result.
            </summary>
            <value>The total records.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.PagedList`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.PagedList`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.BasicDataExportSettings">
            <summary>
            Represents basic (common) formats for data exporting operations
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.BasicDataExportSettings.#ctor(System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.BasicDataExportSettings"/> class.
            </summary>
            <param name="culture">The culture we should take date/time formats from.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.BasicDataExportSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.BasicDataExportSettings"/> class.
            The date/time formats will be taken for the current culture
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.ShowColumnNames">
            <summary>
            Gets or sets a value indicating whether column names should be included into export result.
            </summary>
            <value>
                <see langword="true"/> if column names should be included into result file; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.DateFormat">
            <summary>
            Gets or sets the format of date values.
            </summary>
            <value>
            for example: 'dd MM yyyy'
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.TimeFormat">
            <summary>
            Gets or sets the format of time values.
            </summary>
            <value>
            for example: 'HH:mm'
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.Default">
            <summary>
            Returns the default instance of <see cref="T:Korzh.EasyQuery.Services.BasicDataExportSettings"/>.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.TimezoneOffset">
            <summary>
            Timezone offset (in minutes) for all dates used in the query.
            If 0 - no offset is applied
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.ColumnFilter">
            <summary>
            Allows to filter columns during export
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.RowFilter">
            <summary>
            Filter rows during export
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.Title">
            <summary>
            The title
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.BasicDataExportSettings.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.Export.CustomDataExportTuner.Tune(Korzh.EasyQuery.Services.EasyQueryManager,Korzh.EasyQuery.Services.IDataExportSettings)">
            <summary>
            Tunes the specified manager.
            </summary>
            <param name="manager">The manager.</param>
            <param name="settings">The settings.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IDataExporter">
            <summary>
            Represents a type used to perform exporting of the data stream to some format (like CSV or PDF) 
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.Export(System.Data.IDataReader,System.IO.Stream)">
            <summary>
            Exports the specified data to the stream.
            </summary>
            <param name="dataRead">The data reader.</param>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.Export(System.Data.IDataReader,System.IO.Stream,Korzh.EasyQuery.Services.IDataExportSettings)">
            <summary>
            Exports the specified data to the stream with the specified formats.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="stream">The stream.</param>
            <param name="settings">Some exporting settings.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.Export(System.Data.IDataReader,System.IO.TextWriter)">
            <summary>
            Exports the specified data to the stream with the specified formats.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.Export(System.Data.IDataReader,System.IO.TextWriter,Korzh.EasyQuery.Services.IDataExportSettings)">
            <summary>
            Exports the specified data to the stream with the specified formats.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="writer">The writer.</param>
            <param name="settings">Some exporting settings.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.ExportAsync(System.Data.IDataReader,System.IO.Stream)">
            <summary>
            Asynchronical version of <see cref="M:Korzh.EasyQuery.Services.IDataExporter.Export(System.Data.IDataReader,System.IO.Stream)"/> method.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="stream">The stream.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.ExportAsync(System.Data.IDataReader,System.IO.Stream,Korzh.EasyQuery.Services.IDataExportSettings)">
            <summary>
            Asynchronical version of <see cref="M:Korzh.EasyQuery.Services.IDataExporter.Export(System.Data.IDataReader,System.IO.Stream,Korzh.EasyQuery.Services.IDataExportSettings)" /> method.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="stream">The stream.</param>
            <param name="settings">Some exporting settings.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.ExportAsync(System.Data.IDataReader,System.IO.TextWriter,Korzh.EasyQuery.Services.IDataExportSettings)">
            <summary>
            Asynchronical version of Export method.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="writer">The writer.</param>
            <param name="settings">Some exporting settings.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.ExportAsync(System.Data.IDataReader,System.IO.TextWriter)">
            <summary>
            Asynchronical version of Export method.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="writer">The writer.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExporter.GetContentType">
            <summary>
            Gets the MIME content type of the exporting format.
            </summary>
            <returns>System.String.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IDataExportSettings">
            <summary>
            Represents some settings used during exporting operations
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.ShowColumnNames">
            <summary>
            Gets or sets a value indicating whether column names should be included into export result.
            </summary>
            <value>
                <see langword="true"/> if column names should be included into result file; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.DateFormat">
            <summary>
            Gets or sets the format of date values.
            </summary>
            <value>
            for example: 'dd MM yyyy'
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.TimeFormat">
            <summary>
            Gets or sets the format of time values.
            </summary>
            <value>
            for example: 'HH:mm'
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.TimezoneOffset">
            <summary>
            Timezone offset (in minutes) for all dates used in the query.
            If 0 - no offset is applied
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.ColumnFilter">
            <summary>
            Filter columns during export
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.RowFilter">
            <summary>
            Filter rows during export
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.Title">
            <summary>
            The title
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IDataExportSettings.Description">
            <summary>
            The description
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IDataExportTuner">
            <summary>
             Defines the interaces for "data export tuner" classes
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IDataExportTuner.Tune(Korzh.EasyQuery.Services.EasyQueryManager,Korzh.EasyQuery.Services.IDataExportSettings)">
            <summary>
            Allows to tune the manager and export settings inside it
            </summary>
            <param name="manager"></param>
            <param name="settings"></param>
            <returns><c>false</c> if we want to stop the "tuning" (other tuners will not be called after this one). 
            Otherwise - <c>true</c>.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.FileModelLoaderSettings">
            <summary>
            Represents the settings for <see cref="T:Korzh.EasyQuery.Services.FileModelLoader"/> 
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.FileModelLoaderSettings.DataPath">
            <summary>
            Gets or sets the path to the folder where the model definitions are stored.
            </summary>
            <value>The data path.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.FileModelLoader">
            <summary>
            Represents a IModelLoader implemenation 
            which allows to load data model definitions (either XML or JSON) from the file system.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IModelLoader" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IModelLoader" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileModelLoader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.FileModelLoader"/> class.
            </summary>
            <param name="dataPath">The path to the folder where the model definitions are stored</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileModelLoader.#ctor(Microsoft.Extensions.Options.IOptions{Korzh.EasyQuery.Services.FileModelLoaderSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.FileModelLoader"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileModelLoader.LoadModelAsync(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Loads the model by its ID.
            </summary>
            <param name="model">The model.</param>
            <param name="modelId">The model identifier.</param>
            <returns><c>true</c> if the model has been loaded successfully. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.FileQueryStoreSettings">
            <summary>
            Represents the settings for <see cref="T:Korzh.EasyQuery.Services.FileQueryStore"/> 
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.FileQueryStoreSettings.DataPath">
            <summary>
            Gets or sets the path to the folder where query files are stored.
            </summary>
            <value>The data path.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.FileQueryStoreSettings.FileFormat">
            <summary>
            Gets or sets the file format. Can be either "json" or "xml"
            </summary>
            <value>The file format.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.FileQueryStore">
            <summary>
            Represents the implementation of IQueryStore which store queries on the file system.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IQueryStore" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IQueryStore" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.#ctor(Korzh.EasyQuery.Services.FileQueryStoreSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.FileQueryStore"/> class.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.FileQueryStore"/> class.
            </summary>
            <param name="dataPath">The path to the folder where query files are stored.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.#ctor(Microsoft.Extensions.Options.IOptions{Korzh.EasyQuery.Services.FileQueryStoreSettings})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.FileQueryStore"/> class.
            </summary>
            <param name="options">The options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.GetAllQueriesAsync(System.String)">
            <summary>
            Returns the list of all queries for specified model.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>Task&lt;IEnumerable&lt;QueryListItem&gt;&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.GetQueryFileText(System.String,System.String)">
            <summary>
            Read the content of the query file and returns it as a string.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.LoadQueryAsync(Korzh.EasyQuery.Query,System.String)">
            <summary>
            Loads the query's content from the storage
            </summary>
            <param name="query">The query.</param>
            <param name="queryId">The query identifier.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.AddQueryAsync(Korzh.EasyQuery.Query)">
            <summary>
            Adds a new query to the storage.
            </summary>
            <param name="query">The query.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
            <exception cref="T:Korzh.EasyQuery.Services.QueryStorageException">Query with such ID already exists: " + query.ID</exception>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.SaveQueryAsync(Korzh.EasyQuery.Query,System.Boolean)">
            <summary>
            Saves the query to the storage.
            </summary>
            <param name="query">The query.</param>
            <param name="createIfNotExists">if set to <c>true</c> then the new query will be created in the storage if does not exist now.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.FileQueryStore.RemoveQueryAsync(System.String,System.String)">
            <summary>
            Removes from the storage the query specified by model ID and query ID.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.GdtResultSet">
            <summary>
            Represents a result set which can be easly convertend into Google's DataTable format
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.Services.GdtResultSet.IsDataFillStarted">
            <summary>
            Indicates whether the data filling process has started already.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtResultSet.Cols">
            <summary>
            Gets the columns.
            </summary>
            <value>The list of the columns.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtResultSet.Rows">
            <summary>
            Gets the rows.
            </summary>
            <value>The list of the rows.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtResultSet.#ctor(Korzh.EasyQuery.Query)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.GdtResultSet"/> class.
            </summary>
            <param name="query">The query.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtResultSet.AddColumn(System.String,System.String,System.Type,System.Int32)">
            <summary>
            Adds the column.
            </summary>
            <param name="columnId">The column identifier.</param>
            <param name="title">The title.</param>
            <param name="columnType">Type of the column.</param>
            <param name="index">This index of the column in the original result set</param>
            <exception cref="T:Korzh.EasyQuery.Services.EqResultSetError">Can't add more columns since data filling has already started.</exception>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtResultSet.RecordCount">
            <summary>
            Gets or sets the record count.
            </summary>
            <value>The record count.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtResultSet.ColumnCount">
            <summary>
            Gets the number of columns.
            </summary>
            <value>The column count.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtResultSet.GetGoogleTypeBySystemType(System.Type)">
            <summary>
            Converts the system type to the type identified compatible with Google's DataTable.
            </summary>
            <param name="systemType">The system type.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtResultSet.ContainsTime(System.DateTime)">
            <summary>
            Determines whether the specified DateTime object contains time (the time part differs from 0:00)
            </summary>
            <param name="dt">A DateTime object.</param>
            <returns><c>true</c> if the specified dt contains time; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.GdtColumn">
            <summary>
            Represents one column in some <see cref="T:Korzh.EasyQuery.Services.GdtResultSet"/> object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtColumn.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.GdtColumn"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="label">The label.</param>
            <param name="type">The type.</param>
            <param name="index">The index of the column</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtColumn.Id">
            <summary>
            Gets or sets the identifier.
            </summary>
            <value>The identifier.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtColumn.Label">
            <summary>
            Gets or sets the label.
            </summary>
            <value>The label.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtColumn.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtColumn.Index">
            <summary>
            Gets the index of the column
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtColumn.P">
            <summary>
            The dynamic object with the content ready for serialization to JSON
            </summary>
            <value>The dynamic object</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.GdtRow">
            <summary>
            Represents one row in some <see cref="T:Korzh.EasyQuery.Services.GdtResultSet"/> object
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtRow.C">
            <summary>
            Gets or sets the list of cells
            </summary>
            <value>The c.</value>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtRow.AddCell(System.Object)">
            <summary>
            Adds a row cell.
            </summary>
            <param name="value">The value of the new cell.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.GdtCell">
            <summary>
            Represents one cell in some <see cref="T:Korzh.EasyQuery.Services.GdtResultSet"/> object
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.GdtCell.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.GdtCell"/> class.
            </summary>
            <param name="val">The value.</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.GdtCell.V">
            <summary>
            Gets or sets the value of cell.
            </summary>
            <value>The value of cell</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IEasyQueryManagerTuner">
            <summary>
            Defines the interaces for "manager tuner" classes
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IEasyQueryManagerTuner.Tune(Korzh.EasyQuery.Services.EasyQueryManager)">
            <summary>
            Allows to tune the manager and any object (like Model and Query) inside it
            </summary>
            <param name="manager">An instance of EasyQueryManagerBase class.</param>
            <returns><c>false</c> if we want to stop the "tuning" (other tuners will not be called after this one). 
            Otherwise - <c>true</c>.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IEqCachingService">
            <summary>
            Represents a type used to perform caching.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IEqCachingService.GetValue(System.String)">
            <summary>
            Gets the value from the cache.
            </summary>
            <param name="key">The key.</param>
            <returns>System.String.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IEqCachingService.PutValue(System.String,System.String)">
            <summary>
            Puts the value to the cache
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IEqResultSet">
            <summary>
            Represents a type used to store the result set of the query execution.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IEqResultSet.AddColumn(System.String,System.String,System.Type,System.Int32)">
            <summary>
            Adds a column.
            </summary>
            <param name="columnId">The column identifier.</param>
            <param name="title">The title.</param>
            <param name="columnType">Type of the column.</param>
            <param name="index">This index of the column in the original result set</param>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IEqResultSet.RecordCount">
            <summary>
            Gets the number of records in this result set.
            </summary>
            <value>The record count.</value>
        </member>
        <member name="P:Korzh.EasyQuery.Services.IEqResultSet.ColumnCount">
            <summary>
            Gets the number of columns in this result set.
            </summary>
            <value>The number of columns.</value>
        </member>
        <member name="T:Korzh.EasyQuery.Services.EqResultSetError">
            <summary>
            Represents the error that occurs during the filling of the result set object.
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.EqResultSetError.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.EqResultSetError"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IModelLoader">
            <summary>
            Represents a type used to perform model loading.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IModelLoader.LoadModelAsync(Korzh.EasyQuery.DataModel,System.String)">
            <summary>
            Loads the model
            </summary>
            <param name="model">The model.</param>
            <param name="modelId">The model identifier.</param>
            <returns><c>true</c> if the model has been loaded successfully. Otherwise - <c>false</c>.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.ModelLoaderException">
            <summary>
            Represents errors that occur during the model loading.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.ModelLoaderException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.ModelLoaderException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IQueryStore">
            <summary>
            Defines the basic operations of a query store.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IQueryStore.LoadQueryAsync(Korzh.EasyQuery.Query,System.String)">
            <summary>
            Loads the query from the storage
            </summary>
            <param name="query">The query.</param>
            <param name="queryId">The query identifier.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IQueryStore.AddQueryAsync(Korzh.EasyQuery.Query)">
            <summary>
            Adds a new query to the storage.
            </summary>
            <param name="query">The query.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IQueryStore.SaveQueryAsync(Korzh.EasyQuery.Query,System.Boolean)">
            <summary>
            Saves the query passed in the parameter.
            </summary>
            <param name="query">The query.</param>
            <param name="createIfNotExists">if set to <c>true</c> then the new query will be created in the storage if does not exist now.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IQueryStore.RemoveQueryAsync(System.String,System.String)">
            <summary>
            Removes from the storage the query specified by model ID and query ID.
            </summary>
            <param name="modelId">The model identifier.</param>
            <param name="queryId">The query identifier.</param>
            <returns>Task&lt;System.Boolean&gt;.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IQueryStore.GetAllQueriesAsync(System.String)">
            <summary>
            Gets the list of all queries available in the storage for the specified model.
            </summary>
            <param name="modelId">The model identifier.</param>
            <returns>Task&lt;IEnumerable&lt;QueryListItem&gt;&gt;.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.QueryStorageException">
            <summary>
            Represents the error that occurs during the execution of some query storage operation.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.QueryStorageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.QueryStorageException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.EasyQuery.Services.CustomValueListResolver">
            <summary>
            Class CustomValueListResolver.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IValueListResolver" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IValueListResolver" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.CustomValueListResolver.#ctor(System.Func{System.String,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.CustomValueListResolver"/> class.
            </summary>
            <param name="customResolver">The custom resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.CustomValueListResolver.TryGetValues(Korzh.EasyQuery.ListValueEditor,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values for some ListValueEditor. 
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="editor">The value editor.</param>
            <param name="list">The result list.</param>
            <returns><c>true</c> if we get the list, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.CustomValueListResolver.#ctor(System.Func{Korzh.EasyQuery.Services.ListRequestOptions,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.CustomValueListResolver"/> class.
            </summary>
            <param name="customResolver">The custom resolver.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.CustomValueListResolver.TryGetValues(Korzh.EasyQuery.Services.ListRequestOptions,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values for some ListValueEditor. 
            A return value indicates whether the operation succeeded.
            </summary>
            <param name="options">The options.</param>
            <param name="list">The result list.</param>
            <returns><c>true</c> if we get the list, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.IValueListResolver">
            <summary>
            Represents a type used to get the list of values by some "list" value editor.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IValueListResolver.TryGetValues(Korzh.EasyQuery.ListValueEditor,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values by the value editor specified in the parameter.
            </summary>
            <param name="editor">The editor.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the list is returned successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.IValueListResolver.TryGetValues(Korzh.EasyQuery.Services.ListRequestOptions,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values by the value editor specified in the parameter.
            </summary>
            <param name="options">The options.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the list is returned successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.Services.LookupValueListResolver">
            <summary>
            Represents a special case of IValueListResolver which returns the list of values for the lookup fields.
            Implements the <see cref="T:Korzh.EasyQuery.Services.IValueListResolver" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.Services.IValueListResolver" />
        </member>
        <member name="M:Korzh.EasyQuery.Services.LookupValueListResolver.#ctor(System.Func{System.String,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.Services.LookupValueListResolver"/> class.
            </summary>
            <param name="contextResolver">The resolver for the context type we used to build our data model.</param>
        </member>
        <member name="M:Korzh.EasyQuery.Services.LookupValueListResolver.TryGetValues(Korzh.EasyQuery.ListValueEditor,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values by the value editor specified in the parameter.
            </summary>
            <param name="editor">The editor.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the list is returned successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.LookupValueListResolver.TryGetValues(Korzh.EasyQuery.Services.ListRequestOptions,System.Collections.Generic.IEnumerable{Korzh.EasyQuery.Services.ListItem}@)">
            <summary>
            Gets the list of values by the value editor specified in the parameter.
            </summary>
            <param name="options">The options.</param>
            <param name="result">The result.</param>
            <returns><c>true</c> if the list is returned successfully, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.Services.LookupValueListResolver.GetListForContext(System.Object,System.String)">
            <summary>
            Gets the list for the context type.
            </summary>
            <param name="context">The context.</param>
            <param name="attrId">The attribute identifier.</param>
            <returns>IEnumerable&lt;ListItem&gt;.</returns>
            <exception cref="T:System.ArgumentNullException">context</exception>
        </member>
        <member name="T:Korzh.EasyQuery.TypeExtensions">
            <summary>
            Contains several useful extensions for reflection types and structures.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsPrimaryKey(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether specified property is a primary key.
            </summary>
            <param name="pi">The property info.</param>
            <returns><c>true</c> if the property is a primary key; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsInheritedFrom(System.Type,System.String)">
            <summary>
            Determines whether the type is inherited from another type specified by the specified full type name.
            </summary>
            <param name="type">The type to check the inheritence for.</param>
            <param name="fullTypeName">Full name of the type.</param>
            <returns><c>true</c> if is inherited from the type specified byt its full type name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsInheritedFrom(System.Type,System.Type)">
            <summary>
            Determines whether the type is inherited from another type.
            </summary>
            <param name="type">The type to check the inheritence for.</param>
            <param name="baseType">The base type.</param>
            <returns><c>true</c> if is inherited from the type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsInheritedFromGeneric(System.Type,System.Type)">
            <summary>
            Determines whether the type is inherited from generic type.
            </summary>
            <param name="type">The type to check the inheritence for.</param>
            <param name="baseType">The base type.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsSimpleType(System.Type)">
            <summary>
            Checks if the type can be used in columns and conditions
            </summary>
            <param name="t">The type.</param>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsComplexType(System.Type)">
            <summary>
            Determines whether the specified type is complex type (marked by ComplexType attribute).
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a complex type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsGenericType(System.Type)">
            <summary>
            Determines whether the specified type is generic type.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a generic type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsEnum(System.Type)">
            <summary>
            Determines whether the specified type is an enumeration.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a enumeration type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Determines whether the specified type is a nullable type.
            </summary>
            <param name="typeToCheck">The type to check.</param>
            <returns><c>true</c> if the specified type is a nullable type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.IsAttributeDefined(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Determines whether the attribute with specified name is defined for the property.
            </summary>
            <param name="pi">A PropertyInfo object which defines the property</param>
            <param name="attrName">Name of the attribute.</param>
            <returns><c>true</c> if "attrName" attribute is defined for "pi" property; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TypeExtensions.GetMappedProperties(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Filters the list of properties (defined by source parameter) to return only those which does not have "NotMapped" attribute.
            </summary>
            <param name="source">The source list of properties.</param>
            <returns>IEnumerable&lt;PropertyInfo&gt;.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.CustomValueEditor">
            <summary>
            Represents custom (user defined) value editor.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.CustomValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.CustomValueEditor"/> class.
            </summary>
            <param name="tag">The custom tag of this value editor.</param>
        </member>
        <member name="P:Korzh.EasyQuery.CustomValueEditor.Tag">
            <summary>
            Gets the name of the value editor type.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This defenition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.CustomValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the "CUSTOM" value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the "CUSTOM" value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.LoadAttribute(System.String,System.String)">
            <summary>
            Loads one attribute from XML reader.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrValue">The attribute value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.LoadContentFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the content of value editor from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.SaveContentToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves editor parameters to XML.
            </summary>
            <param name="writer">XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.CustomValueEditor.SaveContentToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves the content of value editor to IDictionary object (for JSON serialization).
            </summary>
            <param name="dict">The object of IDictionary&lt;string, object&gt; type.</param>
        </member>
        <member name="P:Korzh.EasyQuery.CustomValueEditor.Data">
            <summary>
            Gets or sets the data assigned with the editor.
            </summary>
            <value>Any data assigned with the editor.</value>
        </member>
        <member name="T:Korzh.EasyQuery.IDefaultValuesStorage">
            <summary>
            Represents a storage of default values
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.IDefaultValuesStorage.DefaultValues">
            <summary>
            Gets the list of default values
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.DateTimeValueEditor">
            <summary>
            Represents the value editor for date and/or time.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.SubType">
            <summary>
            Gets or sets the type of data (Date, Time or DateTime).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.DefaultValues">
            <summary>
            Gets the list of default values
            </summary>
            <value></value>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.DateTimeValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.#ctor(System.String,Korzh.EasyQuery.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.DateTimeValueEditor"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="subType">Sub-Type of the editor.</param>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.Tag">
            <summary>
            Gets the name of the value editor type.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This definition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.SaveAttributesToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves all attributes of value editor's node to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.LoadAttribute(System.String,System.String)">
            <summary>
            Loads one attribute from XML reader.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrValue">The attribute value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the date/time value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.DateTimeValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the date/time value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.DateTimeValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="T:Korzh.EasyQuery.ListValueEditor">
            <summary>
            Represents base abstract type of list value editors.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ListValueEditor"/> class.
            </summary>
            <param name="id">ID of the list value editor</param>
        </member>
        <member name="P:Korzh.EasyQuery.ListValueEditor.ControlType">
            <summary>
            Gets or sets the type of list control (MENU, LISTBOX, etc).
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ListValueEditor.Multiselect">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Korzh.EasyQuery.ListValueEditor"/> allows to select several items.
            </summary>
            <value>
              <c>true</c> if multiselect; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.ListValueEditor.ExtraParams">
            <summary>
            Gets ExtraParams for this <see cref="T:Korzh.EasyQuery.ListValueEditor"/>.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.SaveContentToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves the content of value editor to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.LoadContentFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the content of value editor from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.ReadExtraParamsFromXml(System.Xml.XmlReader)">
            <summary>
            Reads the extra parameters from XML.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the custom value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the custom value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ListValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.CustomListValueEditor">
            <summary>
            Represents custom (user-defined) list value editor
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.CustomListValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.CustomListValueEditor"/> class.
            </summary>
            <param name="id">The ID of the custom value editor</param>
            <param name="listName">Name of the list.</param>
            <param name="controlType">Type of the control.</param>
        </member>
        <member name="P:Korzh.EasyQuery.CustomListValueEditor.ListName">
            <summary>
            Gets or sets the name of the list.
            </summary>
            <value>The name of the list.</value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomListValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomListValueEditor.IDBase">
            <summary>
            Gets the base part of identifier.
            </summary>
            <value>The identifier base.</value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomListValueEditor.Tag">
            <summary>
            Gets the value editor's tag.
            </summary>
            <value>The tag of the value editor.</value>
        </member>
        <member name="P:Korzh.EasyQuery.CustomListValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This defenition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.LoadAttribute(System.String,System.String)">
            <summary>
            Loads one attribute from XML reader.
            </summary>
            <param name="attrName"></param>
            <param name="attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.SaveAttributesToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves the content of value editor to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.SaveContentToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves the content of value editor to JsonDict object (for JSON serialization).
            </summary>
            <param name="dict">The object of JsonDict; type.</param>
        </member>
        <member name="P:Korzh.EasyQuery.CustomListValueEditor.ResultType">
            <summary>
            Gets or sets the data type of edited values
            </summary>
            <value>
            The data type of edited values.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the custom value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the custom value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.CustomListValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ConstValueItem">
            <summary>
            Represents one item in the list of available values for LIST value editor.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ConstValueItem.Id">
            <summary>
            Gets or sets the value.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ConstValueItem.Text">
            <summary>
            Gets or sets the caption.
            </summary>
            <value></value>
        </member>
        <member name="T:Korzh.EasyQuery.ConstValueList">
            <summary>
            Represents list of availalbe values. 
            Each item contain the value itself and some caption representing this value.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConstValueList.Add(System.String,System.String)">
            <summary>
            Adds new item with the specified value and caption into the list.
            </summary>
            <param name="id">Value ID.</param>
            <param name="text">Value text.</param>
            <returns>The index of new item in list.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ConstListValueEditor">
            <summary>
            Represents the constant list value editor.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.ConstListValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ConstListValueEditor.Tag">
            <summary>
            Gets the name of the value editor type.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ConstListValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This defenition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.ConstListValueEditor.Values">
            <summary>
            Gets the list of available values.
            </summary>
            <value>The list of available values.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstListValueEditor"/> class.
            </summary>
            <param name="id">Value editor's ID</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ConstListValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.CreateValueList">
            <summary>
            Creates the value list.
            </summary>
            <returns>The created ConstValueList object.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.LoadContentFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the content of value editor from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.SaveContentToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves editor parameters to XML.
            </summary>
            <param name="writer">XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.SaveContentToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves the content of value editor to IDictionary object (for JSON serialization).
            </summary>
            <param name="dict">The object of IDictionary&lt;string, object&gt; type.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ConstListValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.ConstListValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the "CONST LIST" value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Different read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the "CONST LIST" value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Different read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read now</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ConstListValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read now</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.SqlListValueEditor">
            <summary>
            Represents the list <see cref="T:Korzh.EasyQuery.ValueEditor"/>.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.Tag">
            <summary>
            Gets the name of the value editor type.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.IDBase">
            <summary>
            Gets the base part of identifier.
            </summary>
            <value>The identifier base.</value>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.SqlListValueEditor"/> class.
            </summary>
            <param name="id">The ID of the SQL List Editor</param>
            <param name="sql">SQL statement that retrieves the list of values.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.SqlListValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This defenition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.SQL">
            <summary>
            Gets or sets the text of SQL SELECT statement.
            </summary>
            <value>The text of SQL SELECT statement which should return the list of available values.</value>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.SQLCount">
            <summary>
            Gets or sets the text of SQLCount SELECT statement.
            </summary>
            <value>The text of SQL SELECT statement which should return the number of values.</value>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.ResultType">
            <summary>
            Gets or sets the data type of edited values
            </summary>
            <value>
            The data type of edited values.
            </value>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.LoadContentFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the content of value editor from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.SaveContentToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves editor parameters to XML.
            </summary>
            <param name="writer">XmlWriter object.</param>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.SaveContentToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves the content of value editor to IDictionary object (for JSON serialization).
            </summary>
            <param name="dict">The object of IDictionary&lt;string, object&gt; type.</param>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.SqlListValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the "SQL LIST" value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the "SQL LIST" value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.SqlListValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.SubQueryValueEditor">
            <summary>
            Represents the subquery value editor.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SubQueryValueEditor.Tag">
            <summary>
            Gets the name of the value editor type.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.SubQueryValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.SubQueryValueEditor.IDBase">
            <summary>
            Gets the base part of identifier.
            </summary>
            <value>The identifier base.</value>
        </member>
        <member name="P:Korzh.EasyQuery.SubQueryValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This defenition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.SubQueryValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.SubQueryValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.SubQueryValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.SubQueryValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="T:Korzh.EasyQuery.TextValueEditor">
            <summary>
            Represents the simpliest value editor.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.TextValueEditor"/> class.
            </summary>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.IDBase">
            <summary>
            Gets the base part of identifier.
            </summary>
            <value>The identifier base.</value>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.#ctor(System.String,Korzh.EasyQuery.DataType)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.TextValueEditor"/> class.
            </summary>
            <param name="id">The identifier.</param>
            <param name="type">The type.</param>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.Tag">
            <summary>
            Gets the tag of the value editor.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks>
            This defenition can be used for creation necessary row element
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.ResultType">
            <summary>
            Gets or sets the data type of edited values
            </summary>
            <value>
            The data type of edited values.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.TextValueEditor.Multiline">
            <summary>
            Gets or sets a value indicating whether text editor should be multiline.
            </summary>
            <value><c>true</c> if text editor must be multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.SaveAttributesToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves all attributes of value editor's node to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.LoadAttribute(System.String,System.String)">
            <summary>
            Loads one attribute from XML reader.
            </summary>
            <param name="attrName"></param>
            <param name="attrValue"></param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.LoadContentFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the content of value editor from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property which is read</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the text value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.TextValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the text value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="T:Korzh.EasyQuery.EditorTags">
            <summary>
            Defines the constants for value editors' tags.
            </summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.Text">
            <summary>Represents a simple text editor</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.DateTime">
            <summary>Represents a date/time editor</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.Date">
            <summary>Represents a date editor</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.Time">
            <summary>Represents a time editor</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.CustomList">
            <summary>Represents a custom list value editor</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.ConstList">
            <summary>Represents a constant list value editor</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.ConstListBox">
            <summary>Represents a list value editor which uses a list box control to show the values</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.ConstListMulty">
            <summary>Represents a list value editor which allows to select several values at once</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.SqlList">
            <summary>Represents a list value editor which takes the value from DB via some SQL SELECT statement</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.SubQuery">
            <summary>Represents a sub-query value editor which takes the value from DB via some SQL SELECT statement</summary>
        </member>
        <member name="F:Korzh.EasyQuery.EditorTags.Custom">
            <summary>Represents a custom value editor</summary>
        </member>
        <member name="T:Korzh.EasyQuery.IValueEditorCreator">
            <summary>
            Internal interface used for definition new (custom) types of value editors
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.IValueEditorCreator.Create(System.String)">
            <summary>
            Creates an instance of ValueEditor.
            </summary>
            <returns>ValueEditor object.</returns>
        </member>
        <member name="T:Korzh.EasyQuery.ValueEditor">
            <summary>
            Represents an abstract value editor. 
            </summary>
            <remarks>
            Value editor defines the way how user input the constant values in query panel.
            The simplest type of value editor is "EDIT" which represents one edit field where user can type necessary value.
            Other type of value editor is "LIST" - it allows to select necessary value from some list of available values.
            </remarks>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.RegisterCreator(Korzh.EasyQuery.IValueEditorCreator)">
            <summary>
            Registers new type of value editor. 
            </summary>
            <param name="creator">An object that implementats IValueEditorCeator iterface.</param>
            <returns>Returns true if registration succeed. Otherwise - false.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.GetNextID">
            <summary>
            Gets the next value editor identifier.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.Create(System.String)">
            <summary>
            Creates a value editor instance of the specified type.
            </summary>
            <param name="tag">The tag which represents the editor.</param>
            <returns>New created ValueEditor object if type is recognized. Otherwise - null.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ValueEditor"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ValueEditor"/> class.
            </summary>
            <param name="id">Value Editor ID.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.Id">
            <summary>
            Gets or sets the ID of this value editor instance.
            </summary>
            <value>
            The ID.
            </value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.IsDefault">
            <summary>
            Gets or sets a value indicating whether this editor is one of the default ones.
            </summary>
            <value><c>true</c> if this instance is default; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.IDBase">
            <summary>
            Gets the base part of identifier.
            </summary>
            <value>The identifier base.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.STypeCaption">
            <summary>
            Gets the full name of the value editor class type.
            </summary>
            <value></value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.Tag">
            <summary>
            Gets the name of the value editor type.
            </summary>
            <value>The name of the value editor type.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.XmlDefinition">
            <summary>
            Gets the XML definition of value editor.
            </summary>
            <value>The XML definition of value editor.</value>
            <remarks> 
            This defenition can be used for creation necessary row element 
            which represents current value editor in XListBox control.
            </remarks>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.DefaultValue">
            <summary>
            Gets or sets the default value.
            </summary>
            <value>The default value</value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.DefaultText">
            <summary>
            Gets or sets the default text.
            </summary>
            <value>The default text.</value>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.ResultType">
            <summary>
            Gets or sets the data type of edited values
            </summary>
            <value>The data type of edited values.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.CheckInModel(Korzh.EasyQuery.DataModel)">
            <summary>
            Check current editor in model and adds it into Editors list if necessary.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditor.Model">
            <summary>
            Gets the model which this editor belongs to
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a value editor based on the value of "tag" property and reads the content of the newly created editor from JSON.
            </summary>
            <param name="reader">The reader.</param>
            <returns>ValueEditor</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException"></exception>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Creates a value editor based on the value of "tag" property and reads the content of the newly created editor from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader.</param>
            <returns>Task&lt;ValueEditor&gt;.</returns>
            <exception cref="T:Korzh.EasyQuery.BadJsonFormatException">
            </exception>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.SaveToXmlWriter(System.Xml.XmlWriter,System.String)">
            <summary>
            Saves editor parameters to XML.
            </summary>
            <param name="writer">Writer.</param>
            <param name="tagName">Name of the tag.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.SaveAttributesToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves all attributes of value editor's node to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.SaveContentToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves the content of value editor to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.LoadFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads from XML node.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.LoadAttribute(System.String,System.String)">
            <summary>
            Loads one attribute from XML reader.
            </summary>
            <param name="attrName">Name of the attribute.</param>
            <param name="attrValue">The attribute value.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.LoadContentFromXmlReader(System.Xml.XmlReader)">
            <summary>
            Loads the content of value editor from XML reader.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.SaveToJsonDict">
            <summary>
            Saves the content of value editor to IDictionary object (for JSON serialization).
            </summary>
            <returns>
            The object of IDictionary&lt;string, object&gt; type.
            </returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.SaveContentToJsonDict(Korzh.EasyQuery.JsonDict)">
            <summary>
            Saves the content of value editor to IDictionary object (for JSON serialization).
            </summary>
            <param name="dict">The object of IDictionary&lt;string, object&gt; type.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the value editor to JSON.
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.WritePropertiesToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the value editor to JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">Read/write options.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.WritePropertiesToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions)">
            <summary>
            Writes the content of the value editor to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">Read/write options.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.ReadContentFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the value editor from JSON.
            </summary>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.ReadContentFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the content of the value editor from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.ReadOnePropFromJson(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON.
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditor.ReadOnePropFromJsonAsync(Newtonsoft.Json.JsonReader,System.String)">
            <summary>
            Reads one editor's property from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <param name="propName">The name of the property to read</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.ValueEditorList">
            <summary>
            Represents list of value editors
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.IndexByID(System.String)">
            <summary>
            Find valueeditor index by ID.
            </summary>
            <param name="editorId">ID of operator.</param>
            <returns>Operator index in the list or -1 if operator with specified ID was not found</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.FindByID(System.String)">
            <summary>
            Finds the valueeditor by ID.
            </summary>
            <param name="editorId">ID of operator.</param>
            <returns>Operator object or null if operator with specified ID was not found.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.SaveToXmlWriter(System.Xml.XmlWriter)">
            <summary>
            Saves to XML writer.
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.WriteToJson(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions,System.Boolean)">
            <summary>
            Writes the list of the value editors to JSON.
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">Read/write options.</param>
            <param name="includeDefaults">if set to <c>true</c> then the default editors must be saved as well.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.WriteToJsonAsync(Newtonsoft.Json.JsonWriter,Korzh.EasyQuery.ModelReadWriteOptions,System.Boolean)">
            <summary>
            Writes the list of the value editors to JSON (asynchronous way).
            </summary>
            <param name="writer">The writer.</param>
            <param name="rwOptions">Read/write options.</param>
            <param name="includeDefaults">if set to <c>true</c> then the default editors must be saved as well.</param>
            <returns>Task.</returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.ReadFromJson(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of value editors from JSON.
            </summary>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorList.ReadFromJsonAsync(Newtonsoft.Json.JsonReader)">
            <summary>
            Reads the list of value editors from JSON (asynchronous way).
            </summary>
            <param name="reader">The reader</param>
            <returns></returns>
        </member>
        <member name="T:Korzh.EasyQuery.ValueEditorStore">
            <summary>
            Represents the list of value editors which belongs to some DataModel object.
            Implements the <see cref="T:Korzh.EasyQuery.ValueEditorList" />
            </summary>
            <seealso cref="T:Korzh.EasyQuery.ValueEditorList" />
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorStore.#ctor(Korzh.EasyQuery.DataModel)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.ValueEditorStore"/> class.
            </summary>
            <param name="model">The model.</param>
        </member>
        <member name="P:Korzh.EasyQuery.ValueEditorStore.Model">
            <summary>
            Gets the model.
            </summary>
            <value>The model.</value>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorStore.InsertItem(System.Int32,Korzh.EasyQuery.ValueEditor)">
            <summary>
            Inserts an element into the <see cref="T:System.Collections.ObjectModel.Collection`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be null for reference types.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorStore.RemoveItem(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:System.Collections.ObjectModel.Collection`1"></see>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Korzh.EasyQuery.ValueEditorStore.ClearItems">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.ObjectModel.Collection`1"></see>.
            </summary>
        </member>
        <member name="T:Korzh.EasyQuery.EqValueEditorException">
            <summary>
            Represents errors that occur during some operation with a value editor.
            Implements the <see cref="T:System.Exception" />
            </summary>
            <seealso cref="T:System.Exception" />
        </member>
        <member name="M:Korzh.EasyQuery.EqValueEditorException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EqValueEditorException"/> class.
            </summary>
        </member>
        <member name="M:Korzh.EasyQuery.EqValueEditorException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.EasyQuery.EqValueEditorException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:Korzh.Utils.TextStorage">
            <summary>
            Static class which stores all text resources used in assembly
            </summary>
        </member>
        <member name="M:Korzh.Utils.TextStorage.GetCurrentCulture">
            <summary>
            Returns current culture
            </summary>
            <returns>CultureInfo object</returns>
        </member>
        <member name="M:Korzh.Utils.TextStorage.GetCurrentUICulture">
            <summary>
            Returns current UI culture
            </summary>
            <returns>CultureInfo object</returns>
        </member>
        <member name="M:Korzh.Utils.TextStorage.Get(System.String)">
            <summary>
            Gets the string by its ID
            </summary>
            <param name="id">The ID (key) of the string.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.Utils.TextStorage.#ctor(System.Resources.ResourceManager)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.Utils.TextStorage"/> class.
            </summary>
            <param name="nativeResources">The native resources.</param>
        </member>
        <member name="M:Korzh.Utils.TextStorage.LoadFromResources(System.Resources.ResourceManager)">
            <summary>
            Loads texts from ResourceManager object.
            </summary>
            <param name="resManager">The ResourceManager object.</param>
        </member>
        <member name="M:Korzh.Utils.TextStorage.Put(System.String,System.String)">
            <summary>
            Adds new resource item with specified key and value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Korzh.Utils.TextStorage.LoadFromFile(System.String)">
            <summary>
            Loads text resources from file.
            </summary>
            <remarks>
            Each line in such file must contain the key and the value separated by "=" symbol (e.g. SHello=Hello world)
            </remarks>
            <param name="path">The path to file.</param>
        </member>
        <member name="M:Korzh.Utils.TextStorage.LoadFromFileForCulture(System.String,System.Globalization.CultureInfo,System.String)">
            <summary>
            Loads resources from .properties like file for indicated culture.
            </summary>
            <param name="baseFileName">Name of the base file.</param>
            <param name="cultureInfo">The culture info. If null - we take the current thread culture</param>
            <param name="fileExt">The file extention. If null - use ".properties" extention</param>
        </member>
        <member name="M:Korzh.Utils.TextStorage.LoadFromStream(System.IO.Stream)">
            <summary>
            Loads this <see cref="T:Korzh.Utils.TextStorage"/> object from <see cref="T:System.IO.Stream"/> object.
            </summary>
            <param name="input">The Stream input.</param>
        </member>
        <member name="M:Korzh.Utils.TextStorage.LoadFromTextReader(System.IO.TextReader)">
            <summary>
            Loads this <see cref="T:Korzh.Utils.TextStorage"/> object from <see cref="T:System.IO.TextReader"/> object.
            </summary>
            <param name="reader">The reader.</param>
        </member>
        <member name="T:Korzh.Utils.TextStorageMap">
            <summary>
            Stores a map of <see cref="T:Korzh.Utils.TextStorage"/> instanced.
            </summary>
        </member>
        <member name="M:Korzh.Utils.TextStorageMap.#ctor(System.String,System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:Korzh.Utils.TextStorageMap"/> class.
            </summary>
            <param name="resourceName">Name of the resource.</param>
            <param name="assembly">The assembly.</param>
        </member>
        <member name="M:Korzh.Utils.TextStorageMap.GetStorage(System.String)">
            <summary>
            Gets the current storage.
            </summary>
            <param name="storageId">The ID of the storage. Can be null so the default storage is loaded in such case.</param>
            <returns></returns>
        </member>
        <member name="M:Korzh.Utils.TextStorageMap.ReloadNativeResources(System.String)">
            <summary>
            Reloads the specified storage by its ID.
            </summary>
            <param name="storageId">The storage ID. This method reloads the default storage if ID is not specified</param>
        </member>
        <member name="T:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilder">
            <summary>
            A special class which is used during EasyQuery services registration in DI.
            </summary>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilder"/> class.
            </summary>
            <param name="services">The services.</param>
        </member>
        <member name="P:Microsoft.Extensions.DependencyInjection.EasyQueryServicesBuilder.Services">
            <summary>
            Gets the DI services.
            </summary>
            <value>The DI services.</value>
        </member>
    </members>
</doc>
